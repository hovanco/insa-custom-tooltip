{"ast":null,"code":"import axiosClient from './axios-client';\nimport { IMG_URL } from '../configs/vars';\n\nasync function loadPageConversations({\n  storeId,\n  token,\n  fbPageId,\n  query,\n  url\n}) {\n  const base_url = `/social-network/v1/stores/${storeId}/facebook-conversations/pages/${fbPageId}/conversations`;\n  const response = await axiosClient({\n    method: 'GET',\n    url: url ? `/social-network/${url}` : query ? `${base_url}?limit=20&${query}` : base_url\n  });\n  return response.data;\n} // load conversations\n\n\nexport async function loadConversation({\n  storeId,\n  token,\n  fbPageIds,\n  query,\n  url\n}) {\n  const response = await Promise.all(fbPageIds.map(async fbPageId => {\n    const page_conversations = await loadPageConversations({\n      storeId,\n      token,\n      fbPageId,\n      query,\n      url\n    });\n    return page_conversations || [];\n  }));\n  return response[0];\n} // load comments\n\nexport async function loadComments({\n  storeId,\n  fbPageId,\n  conversationId,\n  token,\n  next\n}) {\n  let url = `/social-network/v1/stores/${storeId}/facebook-conversations/pages/${fbPageId}/conversations/${conversationId}/comments?limit=20`;\n\n  if (next) {\n    url = `/social-network/${next}`;\n  }\n\n  const option = {\n    method: 'GET',\n    url\n  };\n  const response = await axiosClient(option);\n  return response.data;\n} // load messages\n\nexport async function loadMessages({\n  storeId,\n  fbPageId,\n  fbObjectId,\n  token,\n  next\n}) {\n  let url = `/social-network/v1/stores/${storeId}/facebook-conversations/pages/${fbPageId}/conversations/${fbObjectId}/messages?limit=20`;\n\n  if (next) {\n    url = `/social-network/${next}`;\n  }\n\n  const response = await axiosClient({\n    method: 'GET',\n    url\n  });\n  return response.data;\n} // reply comment or message\n\nexport async function sendReply({\n  storeId,\n  fbPageId,\n  token,\n  text = '',\n  id,\n  fbObjectId,\n  type,\n  images\n}) {\n  const baseUrl = `/social-network/v1/stores/${storeId}/facebook-conversations/pages`;\n  const urlMessage = `${baseUrl}/${fbPageId}/messages`;\n  const urlComment = `${baseUrl}/${fbPageId}/comments/${fbObjectId}/reply`;\n  const url = type === 1 ? urlMessage : urlComment; // send message\n\n  if (type === 1) {\n    // send message text\n    const sendMessageText = async () => {\n      if (!text || text.length === 0) return null;\n      const dataMessage = {\n        message: {\n          text\n        },\n        recipient: {\n          id\n        }\n      };\n      return await axiosClient({\n        method: 'POST',\n        url,\n        data: dataMessage\n      });\n    }; // send images\n\n\n    const sendImages = async () => {\n      if (!images) return null;\n      return await Promise.all(images.map(async image => {\n        const data = {\n          message: {\n            attachment: {\n              type: 'IMAGE',\n              payload: {\n                url: `${IMG_URL}${image === null || image === void 0 ? void 0 : image.key}`\n              }\n            }\n          },\n          recipient: {\n            id\n          }\n        };\n        return await axiosClient({\n          method: 'POST',\n          url,\n          data\n        });\n      }));\n    };\n\n    const reponse = await Promise.all([sendImages(), sendMessageText()]);\n    return reponse;\n  }\n\n  if (type === 2) {\n    const sendCommentText = async () => {\n      if (!text || text.length === 0) return null;\n      const dataComment = {\n        message: text\n      };\n      return await axiosClient({\n        method: 'POST',\n        url,\n        data: dataComment\n      });\n    }; // send images\n\n\n    const sendCommentImages = async () => {\n      if (!images) return null;\n      return await Promise.all(images.map(async image => {\n        const data = {\n          attachment_url: `${IMG_URL}${image.key}`\n        };\n        return await axiosClient({\n          method: 'POST',\n          url,\n          data\n        });\n      }));\n    };\n\n    const reponse = await Promise.all([sendCommentImages(), sendCommentText()]);\n    return reponse;\n  }\n} // like comment\n\nexport async function likeComment({\n  storeId,\n  fbPageId,\n  commentId,\n  token,\n  data\n}) {\n  const url = `/social-network/v1/stores/${storeId}/facebook-conversations/pages/${fbPageId}/comments/${commentId}/likes`;\n  const response = await axiosClient({\n    method: 'POST',\n    url,\n    data\n  });\n  return response.data;\n} // delete comment\n\nexport async function deleteComment({\n  storeId,\n  fbPageId,\n  commentId,\n  token,\n  conversationId\n}) {\n  const url = `/social-network/v1/stores/${storeId}/facebook-conversations/pages/${fbPageId}/comments/${commentId}`;\n  const response = await axiosClient({\n    method: 'DELETE',\n    url,\n    data: {\n      conversationId\n    }\n  });\n  return response.data;\n} // hide comment\n\nexport async function hideComment({\n  storeId,\n  fbPageId,\n  commentId,\n  token,\n  isHidden,\n  fbConversationId\n}) {\n  const url = `/social-network/v1/stores/${storeId}/facebook-conversations/pages/${fbPageId}/comments/${commentId}/hidden`;\n  const response = await axiosClient({\n    method: 'PUT',\n    url,\n    data: {\n      isHidden,\n      fbConversationId\n    }\n  });\n  return response.data;\n} // send private reply\n\nexport async function sendPrivateReply({\n  storeId,\n  fbPageId,\n  token,\n  text,\n  commentId\n}) {\n  const url = `/social-network/v1/stores/${storeId}/facebook-conversations/pages/${fbPageId}/comments/${commentId}/private-reply`;\n  const response = await axiosClient({\n    method: 'POST',\n    url,\n    data: {\n      message: text\n    }\n  });\n  return response.data;\n} // get detail post_id\n\nexport async function getDetailPost({\n  storeId,\n  fbPageId,\n  postId,\n  token\n}) {\n  const url = `/social-network/v1/stores/${storeId}/facebook-conversations/pages/${fbPageId}/posts/${postId}`;\n  const response = await axiosClient({\n    method: 'GET',\n    url\n  });\n  return response.data;\n} // mark as unread\n\nexport async function markAsUnreadApi({\n  storeId,\n  fbPageId,\n  conversationId,\n  token,\n  read\n}) {\n  const url = `/social-network/v1/stores/${storeId}/facebook-conversations/pages/${fbPageId}/conversations/${conversationId}/mark-as-read`;\n  const response = await axiosClient({\n    method: 'PUT',\n    url,\n    data: {\n      read\n    }\n  });\n  return response.data;\n} // set / unset labels\n\nexport async function labelConversationApi({\n  storeId,\n  fbPageId,\n  conversationId,\n  token,\n  action,\n  labelId\n}) {\n  const url = `/social-network/v1/stores/${storeId}/facebook-conversations/pages/${fbPageId}/conversations/${conversationId}/labels/${action}`;\n  const response = await axiosClient({\n    method: 'PUT',\n    url,\n    data: {\n      labelId\n    }\n  });\n  return response.data;\n} // get unread conversations count\n\nexport async function getUnreadConversationsCount({\n  token,\n  storeId,\n  fbPageId\n}) {\n  const url = `/social-network/v1/stores/${storeId}/facebook-conversations/pages/${fbPageId}/conversations/unread`;\n  const response = await axiosClient({\n    method: 'GET',\n    url\n  });\n  return response.data;\n} // toggle block user of conversation\n\nexport async function toggleBlockUser({\n  pageId,\n  userId,\n  storeId,\n  token,\n  blocked\n}) {\n  const base_url = `/social-network/v1/stores/${storeId}/facebook-pages/${pageId}/user/${userId}`;\n  const url = blocked ? `${base_url}/block` : `${base_url}/unblock`;\n  const method = blocked ? 'POST' : 'DELETE';\n  const response = await axiosClient({\n    method,\n    url\n  });\n  return response.data;\n}","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/api/conversation-api.ts"],"names":["axiosClient","IMG_URL","loadPageConversations","storeId","token","fbPageId","query","url","base_url","response","method","data","loadConversation","fbPageIds","Promise","all","map","page_conversations","loadComments","conversationId","next","option","loadMessages","fbObjectId","sendReply","text","id","type","images","baseUrl","urlMessage","urlComment","sendMessageText","length","dataMessage","message","recipient","sendImages","image","attachment","payload","key","reponse","sendCommentText","dataComment","sendCommentImages","attachment_url","likeComment","commentId","deleteComment","hideComment","isHidden","fbConversationId","sendPrivateReply","getDetailPost","postId","markAsUnreadApi","read","labelConversationApi","action","labelId","getUnreadConversationsCount","toggleBlockUser","pageId","userId","blocked"],"mappings":"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","sourcesContent":["import axiosClient from './axios-client';\nimport { IImage } from '../collections/image';\nimport { IMG_URL } from '../configs/vars';\n\nasync function loadPageConversations({\n    storeId,\n    token,\n    fbPageId,\n    query,\n    url,\n}: {\n    storeId: string;\n    token: string;\n    fbPageId: string;\n    query?: string;\n    url?: string;\n}): Promise<any> {\n    const base_url = `/social-network/v1/stores/${storeId}/facebook-conversations/pages/${fbPageId}/conversations`;\n\n    const response = await axiosClient({\n        method: 'GET',\n        url: url ? `/social-network/${url}` : query ? `${base_url}?limit=20&${query}` : base_url,\n    });\n\n    return response.data;\n}\n\n// load conversations\nexport async function loadConversation({\n    storeId,\n    token,\n    fbPageIds,\n    query,\n    url,\n}: {\n    storeId: string;\n    token: string;\n    fbPageIds: string[];\n    query?: string;\n    url?: string;\n}): Promise<any> {\n    const response = await Promise.all(\n        fbPageIds.map(async (fbPageId: string) => {\n            const page_conversations = await loadPageConversations({\n                storeId,\n                token,\n                fbPageId,\n                query,\n                url,\n            });\n\n            return page_conversations || [];\n        })\n    );\n\n    return response[0];\n}\n\n// load comments\nexport async function loadComments({\n    storeId,\n    fbPageId,\n    conversationId,\n    token,\n    next,\n}: {\n    storeId: string;\n    fbPageId: string;\n    conversationId: string;\n    token: string;\n    next?: string;\n}) {\n    let url = `/social-network/v1/stores/${storeId}/facebook-conversations/pages/${fbPageId}/conversations/${conversationId}/comments?limit=20`;\n    if (next) {\n        url = `/social-network/${next}`;\n    }\n\n    const option: any = {\n        method: 'GET',\n        url,\n    };\n\n    const response = await axiosClient(option);\n\n    return response.data;\n}\n\n// load messages\nexport async function loadMessages({\n    storeId,\n    fbPageId,\n    fbObjectId,\n    token,\n    next,\n}: {\n    storeId: string;\n    fbPageId: string;\n    fbObjectId: string;\n    token: string;\n    next?: string;\n}): Promise<any> {\n    let url = `/social-network/v1/stores/${storeId}/facebook-conversations/pages/${fbPageId}/conversations/${fbObjectId}/messages?limit=20`;\n    if (next) {\n        url = `/social-network/${next}`;\n    }\n\n    const response = await axiosClient({\n        method: 'GET',\n        url,\n    });\n\n    return response.data;\n}\n\n// reply comment or message\nexport async function sendReply({\n    storeId,\n    fbPageId,\n    token,\n    text = '',\n    id,\n    fbObjectId,\n    type,\n    images,\n}: {\n    storeId: string;\n    fbPageId: string;\n    token: string;\n    text?: string;\n    id: string;\n    fbObjectId?: string;\n    type: number;\n    images?: IImage[];\n}): Promise<any> {\n    const baseUrl = `/social-network/v1/stores/${storeId}/facebook-conversations/pages`;\n\n    const urlMessage = `${baseUrl}/${fbPageId}/messages`;\n    const urlComment = `${baseUrl}/${fbPageId}/comments/${fbObjectId}/reply`;\n    const url = type === 1 ? urlMessage : urlComment;\n\n    // send message\n    if (type === 1) {\n        // send message text\n        const sendMessageText = async () => {\n            if (!text || text.length === 0) return null;\n\n            const dataMessage = {\n                message: {\n                    text,\n                },\n                recipient: { id },\n            };\n\n            return await axiosClient({\n                method: 'POST',\n                url,\n                data: dataMessage,\n            });\n        };\n\n        // send images\n        const sendImages = async () => {\n            if (!images) return null;\n\n            return await Promise.all(\n                images.map(async (image: IImage) => {\n                    const data = {\n                        message: {\n                            attachment: {\n                                type: 'IMAGE',\n                                payload: {\n                                    url: `${IMG_URL}${image?.key}`,\n                                },\n                            },\n                        },\n                        recipient: { id },\n                    };\n\n                    return await axiosClient({\n                        method: 'POST',\n                        url,\n                        data,\n                    });\n                })\n            );\n        };\n\n        const reponse = await Promise.all([sendImages(), sendMessageText()]);\n\n        return reponse;\n    }\n\n    if (type === 2) {\n        const sendCommentText = async () => {\n            if (!text || text.length === 0) return null;\n\n            const dataComment = {\n                message: text,\n            };\n\n            return await axiosClient({\n                method: 'POST',\n                url,\n                data: dataComment,\n            });\n        };\n\n        // send images\n        const sendCommentImages = async () => {\n            if (!images) return null;\n\n            return await Promise.all(\n                images.map(async (image: IImage) => {\n                    const data = {\n                        attachment_url: `${IMG_URL}${image.key}`,\n                    };\n\n                    return await axiosClient({\n                        method: 'POST',\n                        url,\n                        data,\n                    });\n                })\n            );\n        };\n\n        const reponse = await Promise.all([sendCommentImages(), sendCommentText()]);\n\n        return reponse;\n    }\n}\n\n// like comment\nexport async function likeComment({\n    storeId,\n    fbPageId,\n    commentId,\n    token,\n    data,\n}: {\n    storeId: string;\n    fbPageId: string;\n    commentId: string;\n    token: string;\n    data: {\n        fbConversationId: string;\n    };\n}) {\n    const url = `/social-network/v1/stores/${storeId}/facebook-conversations/pages/${fbPageId}/comments/${commentId}/likes`;\n\n    const response = await axiosClient({\n        method: 'POST',\n        url,\n        data,\n    });\n\n    return response.data;\n}\n\n// delete comment\nexport async function deleteComment({\n    storeId,\n    fbPageId,\n    commentId,\n    token,\n    conversationId,\n}: {\n    storeId: string;\n    fbPageId: string;\n    commentId: string;\n    token: string;\n    conversationId: string;\n}) {\n    const url = `/social-network/v1/stores/${storeId}/facebook-conversations/pages/${fbPageId}/comments/${commentId}`;\n\n    const response = await axiosClient({\n        method: 'DELETE',\n        url,\n        data: {\n            conversationId,\n        },\n    });\n\n    return response.data;\n}\n\n// hide comment\nexport async function hideComment({\n    storeId,\n    fbPageId,\n    commentId,\n    token,\n    isHidden,\n    fbConversationId,\n}: {\n    storeId: string;\n    fbPageId: string;\n    commentId: string;\n    token: string;\n    isHidden: boolean;\n    fbConversationId: string;\n}) {\n    const url = `/social-network/v1/stores/${storeId}/facebook-conversations/pages/${fbPageId}/comments/${commentId}/hidden`;\n\n    const response = await axiosClient({\n        method: 'PUT',\n        url,\n        data: {\n            isHidden,\n            fbConversationId,\n        },\n    });\n\n    return response.data;\n}\n\n// send private reply\nexport async function sendPrivateReply({\n    storeId,\n    fbPageId,\n    token,\n    text,\n    commentId,\n}: {\n    storeId: string;\n    fbPageId: string;\n    token: string;\n    text: string;\n    commentId: string;\n}) {\n    const url = `/social-network/v1/stores/${storeId}/facebook-conversations/pages/${fbPageId}/comments/${commentId}/private-reply`;\n\n    const response = await axiosClient({\n        method: 'POST',\n        url,\n        data: {\n            message: text,\n        },\n    });\n\n    return response.data;\n}\n\n// get detail post_id\nexport async function getDetailPost({\n    storeId,\n    fbPageId,\n    postId,\n    token,\n}: {\n    storeId: string;\n    fbPageId: string;\n    postId: string;\n    token: string;\n}) {\n    const url = `/social-network/v1/stores/${storeId}/facebook-conversations/pages/${fbPageId}/posts/${postId}`;\n\n    const response = await axiosClient({\n        method: 'GET',\n        url,\n    });\n\n    return response.data;\n}\n\n// mark as unread\nexport async function markAsUnreadApi({\n    storeId,\n    fbPageId,\n    conversationId,\n    token,\n    read,\n}: {\n    storeId: string;\n    fbPageId: string;\n    conversationId: string;\n    token: string;\n    read: boolean;\n}) {\n    const url = `/social-network/v1/stores/${storeId}/facebook-conversations/pages/${fbPageId}/conversations/${conversationId}/mark-as-read`;\n\n    const response = await axiosClient({\n        method: 'PUT',\n        url,\n        data: {\n            read,\n        },\n    });\n\n    return response.data;\n}\n\n// set / unset labels\nexport async function labelConversationApi({\n    storeId,\n    fbPageId,\n    conversationId,\n    token,\n    action,\n    labelId,\n}: {\n    storeId: string;\n    fbPageId: string;\n    conversationId: string;\n    token: string;\n    action: string;\n    labelId: string;\n}) {\n    const url = `/social-network/v1/stores/${storeId}/facebook-conversations/pages/${fbPageId}/conversations/${conversationId}/labels/${action}`;\n\n    const response = await axiosClient({\n        method: 'PUT',\n        url,\n        data: {\n            labelId,\n        },\n    });\n\n    return response.data;\n}\n\n// get unread conversations count\nexport async function getUnreadConversationsCount({\n    token,\n    storeId,\n    fbPageId,\n}: {\n    token: string;\n    storeId: string;\n    fbPageId: string;\n}) {\n    const url = `/social-network/v1/stores/${storeId}/facebook-conversations/pages/${fbPageId}/conversations/unread`;\n\n    const response = await axiosClient({\n        method: 'GET',\n        url,\n    });\n\n    return response.data;\n}\n\n// toggle block user of conversation\nexport async function toggleBlockUser({\n    pageId,\n    userId,\n    storeId,\n    token,\n    blocked,\n}: {\n    pageId: string;\n    userId: string;\n    storeId: string;\n    token: string;\n    blocked: boolean;\n}) {\n    const base_url = `/social-network/v1/stores/${storeId}/facebook-pages/${pageId}/user/${userId}`;\n    const url = blocked ? `${base_url}/block` : `${base_url}/unblock`;\n    const method = blocked ? 'POST' : 'DELETE';\n\n    const response = await axiosClient({\n        method,\n        url,\n    });\n\n    return response.data;\n}\n"]},"metadata":{},"sourceType":"module"}