{"ast":null,"code":"import axios from 'axios';\nimport axiosClient from './axios-client';\nimport { flatten, pick } from 'lodash';\nimport { API_URI } from '../configs/vars';\nimport { createImagesRequest } from './images-api';\nexport async function fetchPresignedRequest({\n  token,\n  data\n}) {\n  const url = `/store/v1/upload/presigned-url/post/image`;\n  const res = await axiosClient({\n    method: 'POST',\n    url,\n    headers: {\n      Authorization: `Bearer ${token}`\n    },\n    data\n  });\n  return res.data;\n}\n\nasync function uploadImageRequest({\n  galleryId,\n  storeId,\n  token,\n  file,\n  fields,\n  url\n}) {\n  delete axios.defaults.headers.common['Authorization'];\n  if (!fields) return null;\n  const headers = {\n    'Content-Type': 'multipart/form-data'\n  };\n  const data = new FormData();\n\n  for (let key in fields) {\n    data.append([key], fields[key]);\n  }\n\n  data.append('file', file);\n  await axios({\n    method: 'POST',\n    url,\n    headers,\n    data\n  });\n  const key = fields.Key.replace('development/', '');\n  const responseImg = await createImagesRequest({\n    token,\n    storeId,\n    data: {\n      key,\n      name: file.name,\n      galleryId,\n      star: false\n    }\n  });\n  return responseImg;\n}\n\nasync function uploadImagesRequest({\n  token,\n  storeId,\n  galleryId,\n  files\n}) {\n  const presignedRequest = [];\n  files.forEach(file => {\n    const itemPresigned = fetchPresignedRequest({\n      token,\n      data: {\n        quantity: 1,\n        ext: file.name.split('.').pop(),\n        contentType: file.type\n      }\n    });\n    presignedRequest.push(itemPresigned);\n  });\n  const presignedArray = flatten(await Promise.all(presignedRequest));\n  const images = await Promise.all(presignedArray.map(async (item, i) => {\n    const resImg = await uploadImageRequest({\n      storeId,\n      galleryId,\n      token,\n      fields: item.fields,\n      file: files[i],\n      url: item.url\n    });\n    return pick(resImg, ['_id', 'key', 'star', 'storeId', 'name']);\n  }));\n  return images;\n}\n\nasync function removeImagesRequest({\n  token,\n  fileNames\n}) {\n  axios.defaults.baseURL = '';\n  const url = `${API_URI}/social-network/v1/upload/files/remove`;\n  await axios({\n    method: 'POST',\n    url,\n    headers: {\n      Authorization: `Bearer ${token}`\n    },\n    data: {\n      fileNames\n    }\n  });\n  axios.defaults.baseURL = API_URI;\n}\n\nexport { removeImagesRequest, uploadImagesRequest };","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/api/upload-api.ts"],"names":["axios","axiosClient","flatten","pick","API_URI","createImagesRequest","fetchPresignedRequest","token","data","url","res","method","headers","Authorization","uploadImageRequest","galleryId","storeId","file","fields","defaults","common","FormData","key","append","Key","replace","responseImg","name","star","uploadImagesRequest","files","presignedRequest","forEach","itemPresigned","quantity","ext","split","pop","contentType","type","push","presignedArray","Promise","all","images","map","item","i","resImg","removeImagesRequest","fileNames","baseURL"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,OAAT,EAAkBC,IAAlB,QAA8B,QAA9B;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,mBAAT,QAAoC,cAApC;AAEA,OAAO,eAAeC,qBAAf,CAAqC;AACxCC,EAAAA,KADwC;AAExCC,EAAAA;AAFwC,CAArC,EAUU;AACb,QAAMC,GAAG,GAAI,2CAAb;AAEA,QAAMC,GAAG,GAAG,MAAMT,WAAW,CAAC;AAC1BU,IAAAA,MAAM,EAAE,MADkB;AAE1BF,IAAAA,GAF0B;AAG1BG,IAAAA,OAAO,EAAE;AACLC,MAAAA,aAAa,EAAG,UAASN,KAAM;AAD1B,KAHiB;AAM1BC,IAAAA;AAN0B,GAAD,CAA7B;AASA,SAAOE,GAAG,CAACF,IAAX;AACH;;AAED,eAAeM,kBAAf,CAAkC;AAC9BC,EAAAA,SAD8B;AAE9BC,EAAAA,OAF8B;AAG9BT,EAAAA,KAH8B;AAI9BU,EAAAA,IAJ8B;AAK9BC,EAAAA,MAL8B;AAM9BT,EAAAA;AAN8B,CAAlC,EAciB;AACb,SAAOT,KAAK,CAACmB,QAAN,CAAeP,OAAf,CAAuBQ,MAAvB,CAA8B,eAA9B,CAAP;AAEA,MAAI,CAACF,MAAL,EAAa,OAAO,IAAP;AAEb,QAAMN,OAAO,GAAG;AACZ,oBAAgB;AADJ,GAAhB;AAIA,QAAMJ,IAAS,GAAG,IAAIa,QAAJ,EAAlB;;AAEA,OAAK,IAAIC,GAAT,IAAgBJ,MAAhB,EAAwB;AACpBV,IAAAA,IAAI,CAACe,MAAL,CAAY,CAACD,GAAD,CAAZ,EAAmBJ,MAAM,CAACI,GAAD,CAAzB;AACH;;AACDd,EAAAA,IAAI,CAACe,MAAL,CAAY,MAAZ,EAAoBN,IAApB;AAEA,QAAMjB,KAAK,CAAC;AACRW,IAAAA,MAAM,EAAE,MADA;AAERF,IAAAA,GAFQ;AAGRG,IAAAA,OAHQ;AAIRJ,IAAAA;AAJQ,GAAD,CAAX;AAOA,QAAMc,GAAG,GAAIJ,MAAM,CAACM,GAAR,CAAuBC,OAAvB,CAA+B,cAA/B,EAA+C,EAA/C,CAAZ;AAEA,QAAMC,WAAW,GAAG,MAAMrB,mBAAmB,CAAC;AAC1CE,IAAAA,KAD0C;AAE1CS,IAAAA,OAF0C;AAG1CR,IAAAA,IAAI,EAAE;AACFc,MAAAA,GADE;AAEFK,MAAAA,IAAI,EAAEV,IAAI,CAACU,IAFT;AAGFZ,MAAAA,SAHE;AAIFa,MAAAA,IAAI,EAAE;AAJJ;AAHoC,GAAD,CAA7C;AAWA,SAAOF,WAAP;AACH;;AAED,eAAeG,mBAAf,CAAmC;AAC/BtB,EAAAA,KAD+B;AAE/BS,EAAAA,OAF+B;AAG/BD,EAAAA,SAH+B;AAI/Be,EAAAA;AAJ+B,CAAnC,EAUiB;AACb,QAAMC,gBAAuB,GAAG,EAAhC;AAEAD,EAAAA,KAAK,CAACE,OAAN,CAAef,IAAD,IAAe;AACzB,UAAMgB,aAAa,GAAG3B,qBAAqB,CAAC;AACxCC,MAAAA,KADwC;AAExCC,MAAAA,IAAI,EAAE;AACF0B,QAAAA,QAAQ,EAAE,CADR;AAEFC,QAAAA,GAAG,EAAElB,IAAI,CAACU,IAAL,CAAUS,KAAV,CAAgB,GAAhB,EAAqBC,GAArB,EAFH;AAGFC,QAAAA,WAAW,EAAErB,IAAI,CAACsB;AAHhB;AAFkC,KAAD,CAA3C;AASAR,IAAAA,gBAAgB,CAACS,IAAjB,CAAsBP,aAAtB;AACH,GAXD;AAaA,QAAMQ,cAAc,GAAGvC,OAAO,CAAC,MAAMwC,OAAO,CAACC,GAAR,CAAYZ,gBAAZ,CAAP,CAA9B;AAEA,QAAMa,MAAM,GAAG,MAAMF,OAAO,CAACC,GAAR,CACjBF,cAAc,CAACI,GAAf,CAAmB,OAAOC,IAAP,EAAkBC,CAAlB,KAAgC;AAC/C,UAAMC,MAAM,GAAG,MAAMlC,kBAAkB,CAAC;AACpCE,MAAAA,OADoC;AAEpCD,MAAAA,SAFoC;AAGpCR,MAAAA,KAHoC;AAIpCW,MAAAA,MAAM,EAAE4B,IAAI,CAAC5B,MAJuB;AAKpCD,MAAAA,IAAI,EAAEa,KAAK,CAACiB,CAAD,CALyB;AAMpCtC,MAAAA,GAAG,EAAEqC,IAAI,CAACrC;AAN0B,KAAD,CAAvC;AASA,WAAON,IAAI,CAAC6C,MAAD,EAAS,CAAC,KAAD,EAAQ,KAAR,EAAe,MAAf,EAAuB,SAAvB,EAAkC,MAAlC,CAAT,CAAX;AACH,GAXD,CADiB,CAArB;AAeA,SAAOJ,MAAP;AACH;;AAED,eAAeK,mBAAf,CAAmC;AAC/B1C,EAAAA,KAD+B;AAE/B2C,EAAAA;AAF+B,CAAnC,EAMiB;AACblD,EAAAA,KAAK,CAACmB,QAAN,CAAegC,OAAf,GAAyB,EAAzB;AAEA,QAAM1C,GAAG,GAAI,GAAEL,OAAQ,wCAAvB;AAEA,QAAMJ,KAAK,CAAC;AACRW,IAAAA,MAAM,EAAE,MADA;AAERF,IAAAA,GAFQ;AAGRG,IAAAA,OAAO,EAAE;AACLC,MAAAA,aAAa,EAAG,UAASN,KAAM;AAD1B,KAHD;AAMRC,IAAAA,IAAI,EAAE;AAAE0C,MAAAA;AAAF;AANE,GAAD,CAAX;AASAlD,EAAAA,KAAK,CAACmB,QAAN,CAAegC,OAAf,GAAyB/C,OAAzB;AACH;;AAED,SAAS6C,mBAAT,EAA8BpB,mBAA9B","sourcesContent":["import axios from 'axios';\nimport axiosClient from './axios-client';\nimport { flatten, pick } from 'lodash';\nimport { API_URI } from '../configs/vars';\nimport { createImagesRequest } from './images-api';\n\nexport async function fetchPresignedRequest({\n    token,\n    data,\n}: {\n    token: string;\n    data: {\n        quantity: number;\n        ext: string;\n        contentType: string;\n    };\n}): Promise<any> {\n    const url = `/store/v1/upload/presigned-url/post/image`;\n\n    const res = await axiosClient({\n        method: 'POST',\n        url,\n        headers: {\n            Authorization: `Bearer ${token}`,\n        },\n        data,\n    });\n\n    return res.data;\n}\n\nasync function uploadImageRequest({\n    galleryId,\n    storeId,\n    token,\n    file,\n    fields,\n    url,\n}: {\n    galleryId?: string;\n    storeId: string;\n    token: string;\n    file: any;\n    fields: any;\n    url: string;\n}): Promise<any> {\n    delete axios.defaults.headers.common['Authorization'];\n\n    if (!fields) return null;\n\n    const headers = {\n        'Content-Type': 'multipart/form-data',\n    };\n\n    const data: any = new FormData();\n\n    for (let key in fields) {\n        data.append([key], fields[key]);\n    }\n    data.append('file', file);\n\n    await axios({\n        method: 'POST',\n        url,\n        headers,\n        data,\n    });\n\n    const key = (fields.Key as string).replace('development/', '');\n\n    const responseImg = await createImagesRequest({\n        token,\n        storeId,\n        data: {\n            key,\n            name: file.name,\n            galleryId,\n            star: false,\n        },\n    });\n\n    return responseImg;\n}\n\nasync function uploadImagesRequest({\n    token,\n    storeId,\n    galleryId,\n    files,\n}: {\n    storeId: string;\n    galleryId?: string;\n    token: string;\n    files: any;\n}): Promise<any> {\n    const presignedRequest: any[] = [];\n\n    files.forEach((file: any) => {\n        const itemPresigned = fetchPresignedRequest({\n            token,\n            data: {\n                quantity: 1,\n                ext: file.name.split('.').pop(),\n                contentType: file.type,\n            },\n        });\n\n        presignedRequest.push(itemPresigned);\n    });\n\n    const presignedArray = flatten(await Promise.all(presignedRequest));\n\n    const images = await Promise.all(\n        presignedArray.map(async (item: any, i: number) => {\n            const resImg = await uploadImageRequest({\n                storeId,\n                galleryId,\n                token,\n                fields: item.fields,\n                file: files[i],\n                url: item.url,\n            });\n\n            return pick(resImg, ['_id', 'key', 'star', 'storeId', 'name']);\n        })\n    );\n\n    return images;\n}\n\nasync function removeImagesRequest({\n    token,\n    fileNames,\n}: {\n    token: string;\n    fileNames: string[];\n}): Promise<any> {\n    axios.defaults.baseURL = '';\n\n    const url = `${API_URI}/social-network/v1/upload/files/remove`;\n\n    await axios({\n        method: 'POST',\n        url,\n        headers: {\n            Authorization: `Bearer ${token}`,\n        },\n        data: { fileNames },\n    });\n\n    axios.defaults.baseURL = API_URI;\n}\n\nexport { removeImagesRequest, uploadImagesRequest };\n"]},"metadata":{},"sourceType":"module"}