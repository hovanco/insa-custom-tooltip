{"ast":null,"code":"import axios from './axios-client';\n\nasync function fetchProductsRequest({\n  token,\n  storeId,\n  query\n}) {\n  const {\n    page,\n    limit,\n    textSearch,\n    sort,\n    withQuantity,\n    warehouseId\n  } = query;\n  let url = `/store/v1/stores/${storeId}/products?page=${page}&limit=${limit}&variant=true&createdAt=desc`;\n  textSearch && (url += `&search=${textSearch}`);\n  sort && (url += `&${sort}`);\n  warehouseId && (url += `&warehouseId=${warehouseId}`);\n  withQuantity && (url += `&withQuantity=${withQuantity}`);\n  const res = await axios({\n    method: 'GET',\n    url: url\n  });\n  return res.data;\n}\n\nasync function createProductRequest({\n  token,\n  storeId,\n  data\n}) {\n  const res = await axios({\n    method: 'POST',\n    url: `/store/v1/stores/${storeId}/products`,\n    data\n  });\n  return res.data;\n}\n\nasync function updateProductRequest({\n  token,\n  productId,\n  data\n}) {\n  const {\n    __v,\n    _id,\n    createdAt,\n    updatedAt,\n    storeId,\n    key,\n    ...rest\n  } = data;\n  const res = await axios({\n    method: 'PUT',\n    url: `/store/v1/stores/${storeId}/products/${productId}`,\n    data: rest\n  });\n  return res.data;\n}\n\nasync function deleteProductRequest({\n  token,\n  storeId,\n  productId\n}) {\n  const res = await axios({\n    method: 'DELETE',\n    url: `/store/v1/stores/${storeId}/products/${productId}`\n  });\n  return res.data;\n}\n\nasync function fetchCategoryRequest({\n  token,\n  storeId,\n  query\n}) {\n  const {\n    textSearch\n  } = query || {};\n  let url = `/store/v1/stores/${storeId}/categories?page=1&limit=20`;\n  textSearch && (url += `&search=${textSearch}`);\n  const res = await axios({\n    method: 'GET',\n    url: url\n  });\n  return res.data;\n}\n\nasync function createCategoryRequest({\n  token,\n  data,\n  storeId\n}) {\n  let url = `/store/v1/stores/${storeId}/categories`;\n  const res = await axios({\n    method: 'POST',\n    url: url,\n    data\n  });\n  return res.data;\n}\n\nexport { fetchProductsRequest, createProductRequest, deleteProductRequest, fetchCategoryRequest, createCategoryRequest, updateProductRequest };","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/api/product-api.ts"],"names":["axios","fetchProductsRequest","token","storeId","query","page","limit","textSearch","sort","withQuantity","warehouseId","url","res","method","data","createProductRequest","updateProductRequest","productId","__v","_id","createdAt","updatedAt","key","rest","deleteProductRequest","fetchCategoryRequest","createCategoryRequest"],"mappings":"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","sourcesContent":["import axios from './axios-client';\n\nasync function fetchProductsRequest({\n    token,\n    storeId,\n    query,\n}: {\n    token: string;\n    storeId: string;\n    query: {\n        textSearch?: string;\n        page: number;\n        limit: number;\n        sort?: string,\n        withQuantity?: boolean,\n        warehouseId?: string,\n    };\n}): Promise<any> {\n    const { page, limit, textSearch, sort, withQuantity, warehouseId } = query;\n    let url = `/store/v1/stores/${storeId}/products?page=${page}&limit=${limit}&variant=true&createdAt=desc`;\n    textSearch && (url += `&search=${textSearch}`);\n    sort && (url += `&${sort}`);\n    warehouseId && (url += `&warehouseId=${warehouseId}`);\n    withQuantity && (url += `&withQuantity=${withQuantity}`);\n\n    const res = await axios({\n        method: 'GET',\n        url: url,\n    });\n\n    return res.data;\n}\n\nasync function createProductRequest({\n    token,\n    storeId,\n    data,\n}: {\n    token: string;\n    storeId: string;\n    data: any;\n}): Promise<any> {\n    const res = await axios({\n        method: 'POST',\n        url: `/store/v1/stores/${storeId}/products`,\n\n        data,\n    });\n\n    return res.data;\n}\n\nasync function updateProductRequest({\n    token,\n    productId,\n    data,\n}: {\n    token: string;\n    storeId: string;\n    productId: string;\n    data: any;\n}): Promise<any> {\n    const { __v, _id, createdAt, updatedAt, storeId, key, ...rest } = data;\n    const res = await axios({\n        method: 'PUT',\n        url: `/store/v1/stores/${storeId}/products/${productId}`,\n\n        data: rest,\n    });\n\n    return res.data;\n}\n\nasync function deleteProductRequest({\n    token,\n    storeId,\n    productId,\n}: {\n    token: string;\n    storeId: string;\n    productId: string;\n}): Promise<any> {\n    const res = await axios({\n        method: 'DELETE',\n        url: `/store/v1/stores/${storeId}/products/${productId}`,\n    });\n\n    return res.data;\n}\n\nasync function fetchCategoryRequest({\n    token,\n    storeId,\n    query,\n}: {\n    token: string;\n    storeId: string;\n    query?: { textSearch?: string };\n}): Promise<any> {\n    const { textSearch } = query || {};\n    let url = `/store/v1/stores/${storeId}/categories?page=1&limit=20`;\n    textSearch && (url += `&search=${textSearch}`);\n\n    const res = await axios({\n        method: 'GET',\n        url: url,\n    });\n\n    return res.data;\n}\n\nasync function createCategoryRequest({\n    token,\n    data,\n    storeId,\n}: {\n    token: string;\n    storeId: string;\n    data: { name: string; parentId?: string };\n}): Promise<any> {\n    let url = `/store/v1/stores/${storeId}/categories`;\n\n    const res = await axios({\n        method: 'POST',\n        url: url,\n\n        data,\n    });\n\n    return res.data;\n}\n\nexport {\n    fetchProductsRequest,\n    createProductRequest,\n    deleteProductRequest,\n    fetchCategoryRequest,\n    createCategoryRequest,\n    updateProductRequest,\n};\n"]},"metadata":{},"sourceType":"module"}