{"ast":null,"code":"import { message } from 'antd';\nimport { get } from 'lodash';\nimport * as types from '../reducers/setting/actionTypes';\nimport { loadQuickMessage, createQuickMessage, updateQuickMessage, deleteQuickMessage } from '../api/setting';\nexport const loadQuickMessageAction = data => async dispatch => {\n  try {\n    dispatch({\n      type: types.LOAD_QUICK_MESSAGE\n    });\n    const res = await loadQuickMessage(data);\n    dispatch({\n      type: types.LOAD_QUICK_MESSAGE_SUCCESS,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: types.LOAD_QUICK_MESSAGE_FAILED\n    });\n  }\n};\nexport const createQuickMessageAction = data => async dispatch => {\n  try {\n    dispatch({\n      type: types.CREATE_QUICK_MESSAGE\n    });\n    const res = await createQuickMessage(data);\n    dispatch({\n      type: types.CREATE_QUICK_MESSAGE_SUCCESS,\n      payload: res.data\n    });\n    message.success('Tạo tin nhắn nhanh thành công.');\n    data.toggle();\n  } catch (error) {\n    dispatch({\n      type: types.CREATE_QUICK_MESSAGE_FAILED\n    });\n    const errorMessage = get(error, 'response.data.message');\n\n    if (errorMessage === 'SHORTCUT_DUPLICATED') {\n      message.error('Phím tắt đã được sử dụng');\n    } else {\n      message.error('Tạo tin nhắn nhanh thất bại');\n    }\n\n    throw new Error('CREATE_FAILED');\n  }\n};\nexport const updateQuickMessageAction = data => async dispatch => {\n  try {\n    dispatch({\n      type: types.UPDATE_QUICK_MESSAGE\n    });\n    const res = await updateQuickMessage(data);\n    dispatch({\n      type: types.UPDATE_QUICK_MESSAGE_SUCCESS,\n      payload: res.data\n    });\n    message.success('Sửa tin nhắn nhanh thành công.');\n    data.toggle();\n  } catch (error) {\n    dispatch({\n      type: types.UPDATE_QUICK_MESSAGE_FAILED\n    });\n    const errorMessage = get(error, 'response.data.message');\n\n    if (errorMessage === 'SHORTCUT_DUPLICATED') {\n      message.error('Phím tắt đã được sử dụng');\n    } else {\n      message.error('Chỉnh sửa tin nhắn nhanh thất bại');\n    }\n\n    throw new Error('UPDATE_FAILED');\n  }\n};\nexport const deleteQuickMessageAction = data => async dispatch => {\n  try {\n    dispatch({\n      type: types.DELETE_QUICK_MESSAGE\n    });\n    await deleteQuickMessage(data);\n    dispatch({\n      type: types.DELETE_QUICK_MESSAGE_SUCCESS,\n      payload: data\n    });\n    message.success('Xoá tin nhắn nhanh thành công.');\n  } catch (error) {\n    dispatch({\n      type: types.DELETE_QUICK_MESSAGE_FAILED\n    });\n    message.error('Xoá tin nhắn nhanh thất bại');\n  }\n};","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/actions/setting.ts"],"names":["message","get","types","loadQuickMessage","createQuickMessage","updateQuickMessage","deleteQuickMessage","loadQuickMessageAction","data","dispatch","type","LOAD_QUICK_MESSAGE","res","LOAD_QUICK_MESSAGE_SUCCESS","payload","error","LOAD_QUICK_MESSAGE_FAILED","createQuickMessageAction","CREATE_QUICK_MESSAGE","CREATE_QUICK_MESSAGE_SUCCESS","success","toggle","CREATE_QUICK_MESSAGE_FAILED","errorMessage","Error","updateQuickMessageAction","UPDATE_QUICK_MESSAGE","UPDATE_QUICK_MESSAGE_SUCCESS","UPDATE_QUICK_MESSAGE_FAILED","deleteQuickMessageAction","DELETE_QUICK_MESSAGE","DELETE_QUICK_MESSAGE_SUCCESS","DELETE_QUICK_MESSAGE_FAILED"],"mappings":"AACA,SAASA,OAAT,QAAwB,MAAxB;AACA,SAASC,GAAT,QAAoB,QAApB;AAEA,OAAO,KAAKC,KAAZ,MAAuB,iCAAvB;AACA,SACIC,gBADJ,EAEIC,kBAFJ,EAGIC,kBAHJ,EAIIC,kBAJJ,QAKO,gBALP;AAQA,OAAO,MAAMC,sBAAsB,GAAIC,IAAD,IAAmB,MAAOC,QAAP,IAA8B;AACnF,MAAI;AACAA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAER,KAAK,CAACS;AADP,KAAD,CAAR;AAIA,UAAMC,GAAG,GAAG,MAAMT,gBAAgB,CAACK,IAAD,CAAlC;AAEAC,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAER,KAAK,CAACW,0BADP;AAELC,MAAAA,OAAO,EAAEF,GAAG,CAACJ;AAFR,KAAD,CAAR;AAIH,GAXD,CAWE,OAAOO,KAAP,EAAc;AACZN,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAER,KAAK,CAACc;AAAd,KAAD,CAAR;AACH;AACJ,CAfM;AAiBP,OAAO,MAAMC,wBAAwB,GAAIT,IAAD,IAAmB,MAAOC,QAAP,IAA8B;AACrF,MAAI;AACAA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAER,KAAK,CAACgB;AADP,KAAD,CAAR;AAIA,UAAMN,GAAG,GAAG,MAAMR,kBAAkB,CAACI,IAAD,CAApC;AAEAC,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAER,KAAK,CAACiB,4BADP;AAELL,MAAAA,OAAO,EAAEF,GAAG,CAACJ;AAFR,KAAD,CAAR;AAIAR,IAAAA,OAAO,CAACoB,OAAR,CAAgB,gCAAhB;AACAZ,IAAAA,IAAI,CAACa,MAAL;AACH,GAbD,CAaE,OAAON,KAAP,EAAc;AACZN,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAER,KAAK,CAACoB;AAAd,KAAD,CAAR;AACA,UAAMC,YAAY,GAAGtB,GAAG,CAACc,KAAD,EAAQ,uBAAR,CAAxB;;AACA,QAAIQ,YAAY,KAAK,qBAArB,EAA4C;AACxCvB,MAAAA,OAAO,CAACe,KAAR,CAAc,0BAAd;AACH,KAFD,MAEO;AACHf,MAAAA,OAAO,CAACe,KAAR,CAAc,6BAAd;AACH;;AACD,UAAM,IAAIS,KAAJ,CAAU,eAAV,CAAN;AACH;AACJ,CAxBM;AA0BP,OAAO,MAAMC,wBAAwB,GAAIjB,IAAD,IAAmB,MAAOC,QAAP,IAA8B;AACrF,MAAI;AACAA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAER,KAAK,CAACwB;AADP,KAAD,CAAR;AAIA,UAAMd,GAAG,GAAG,MAAMP,kBAAkB,CAACG,IAAD,CAApC;AAEAC,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAER,KAAK,CAACyB,4BADP;AAELb,MAAAA,OAAO,EAAEF,GAAG,CAACJ;AAFR,KAAD,CAAR;AAIAR,IAAAA,OAAO,CAACoB,OAAR,CAAgB,gCAAhB;AACAZ,IAAAA,IAAI,CAACa,MAAL;AACH,GAbD,CAaE,OAAON,KAAP,EAAc;AACZN,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAER,KAAK,CAAC0B;AAAd,KAAD,CAAR;AACA,UAAML,YAAY,GAAGtB,GAAG,CAACc,KAAD,EAAQ,uBAAR,CAAxB;;AACA,QAAIQ,YAAY,KAAK,qBAArB,EAA4C;AACxCvB,MAAAA,OAAO,CAACe,KAAR,CAAc,0BAAd;AACH,KAFD,MAEO;AACHf,MAAAA,OAAO,CAACe,KAAR,CAAc,mCAAd;AACH;;AACD,UAAM,IAAIS,KAAJ,CAAU,eAAV,CAAN;AACH;AACJ,CAxBM;AA0BP,OAAO,MAAMK,wBAAwB,GAAIrB,IAAD,IAAmB,MAAOC,QAAP,IAA8B;AACrF,MAAI;AACAA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAER,KAAK,CAAC4B;AADP,KAAD,CAAR;AAIA,UAAMxB,kBAAkB,CAACE,IAAD,CAAxB;AAEAC,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAER,KAAK,CAAC6B,4BADP;AAELjB,MAAAA,OAAO,EAAEN;AAFJ,KAAD,CAAR;AAIAR,IAAAA,OAAO,CAACoB,OAAR,CAAgB,gCAAhB;AACH,GAZD,CAYE,OAAOL,KAAP,EAAc;AACZN,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAER,KAAK,CAAC8B;AAAd,KAAD,CAAR;AACAhC,IAAAA,OAAO,CAACe,KAAR,CAAc,6BAAd;AACH;AACJ,CAjBM","sourcesContent":["import { Dispatch } from 'redux';\nimport { message } from 'antd';\nimport { get } from 'lodash';\n\nimport * as types from '../reducers/setting/actionTypes';\nimport {\n    loadQuickMessage,\n    createQuickMessage,\n    updateQuickMessage,\n    deleteQuickMessage,\n} from '../api/setting';\nimport { Payload } from '../reducers/setting/interfaces';\n\nexport const loadQuickMessageAction = (data: Payload) => async (dispatch: Dispatch) => {\n    try {\n        dispatch({\n            type: types.LOAD_QUICK_MESSAGE,\n        });\n\n        const res = await loadQuickMessage(data);\n\n        dispatch({\n            type: types.LOAD_QUICK_MESSAGE_SUCCESS,\n            payload: res.data,\n        });\n    } catch (error) {\n        dispatch({ type: types.LOAD_QUICK_MESSAGE_FAILED });\n    }\n};\n\nexport const createQuickMessageAction = (data: Payload) => async (dispatch: Dispatch) => {\n    try {\n        dispatch({\n            type: types.CREATE_QUICK_MESSAGE,\n        });\n\n        const res = await createQuickMessage(data);\n\n        dispatch({\n            type: types.CREATE_QUICK_MESSAGE_SUCCESS,\n            payload: res.data,\n        });\n        message.success('Tạo tin nhắn nhanh thành công.');\n        data.toggle();\n    } catch (error) {\n        dispatch({ type: types.CREATE_QUICK_MESSAGE_FAILED });\n        const errorMessage = get(error, 'response.data.message');\n        if (errorMessage === 'SHORTCUT_DUPLICATED') {\n            message.error('Phím tắt đã được sử dụng');\n        } else {\n            message.error('Tạo tin nhắn nhanh thất bại');\n        }\n        throw new Error('CREATE_FAILED');\n    }\n};\n\nexport const updateQuickMessageAction = (data: Payload) => async (dispatch: Dispatch) => {\n    try {\n        dispatch({\n            type: types.UPDATE_QUICK_MESSAGE,\n        });\n\n        const res = await updateQuickMessage(data);\n\n        dispatch({\n            type: types.UPDATE_QUICK_MESSAGE_SUCCESS,\n            payload: res.data,\n        });\n        message.success('Sửa tin nhắn nhanh thành công.');\n        data.toggle();\n    } catch (error) {\n        dispatch({ type: types.UPDATE_QUICK_MESSAGE_FAILED });\n        const errorMessage = get(error, 'response.data.message');\n        if (errorMessage === 'SHORTCUT_DUPLICATED') {\n            message.error('Phím tắt đã được sử dụng');\n        } else {\n            message.error('Chỉnh sửa tin nhắn nhanh thất bại');\n        }\n        throw new Error('UPDATE_FAILED');\n    }\n};\n\nexport const deleteQuickMessageAction = (data: Payload) => async (dispatch: Dispatch) => {\n    try {\n        dispatch({\n            type: types.DELETE_QUICK_MESSAGE,\n        });\n\n        await deleteQuickMessage(data);\n\n        dispatch({\n            type: types.DELETE_QUICK_MESSAGE_SUCCESS,\n            payload: data,\n        });\n        message.success('Xoá tin nhắn nhanh thành công.');\n    } catch (error) {\n        dispatch({ type: types.DELETE_QUICK_MESSAGE_FAILED });\n        message.error('Xoá tin nhắn nhanh thất bại');\n    }\n};\n"]},"metadata":{},"sourceType":"module"}