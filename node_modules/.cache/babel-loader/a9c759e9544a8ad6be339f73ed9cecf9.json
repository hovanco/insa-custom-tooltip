{"ast":null,"code":"import { keyBy, filter } from 'lodash';\nimport types from './types';\nconst initialState = {\n  loading: true,\n  labels: {}\n};\n\nconst labelReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.LOADING:\n      return { ...state,\n        loading: true\n      };\n\n    case types.LOAD_LABEL_SUCCESS:\n      {\n        const labels = keyBy(action.payload, '_id');\n        return { ...state,\n          labels,\n          loading: false\n        };\n      }\n\n    case types.REMOVE_LABEL:\n      {\n        const labels = filter(state.labels, label => label._id !== action.payload);\n        return { ...state,\n          labels\n        };\n      }\n\n    case types.UPDATE_ORDER_LABEL:\n      {\n        const newLabels = Object.keys(state.labels).map(key => {\n          const label = JSON.parse(JSON.stringify(state.labels))[key];\n\n          if (label._id === action.payload.labelId) {\n            label.order = action.payload.order;\n          }\n\n          return label;\n        });\n        return { ...state,\n          labels: keyBy(newLabels, '_id')\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default labelReducer;","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/reducers/labelState/labelReducer.ts"],"names":["keyBy","filter","types","initialState","loading","labels","labelReducer","state","action","type","LOADING","LOAD_LABEL_SUCCESS","payload","REMOVE_LABEL","label","_id","UPDATE_ORDER_LABEL","newLabels","Object","keys","map","key","JSON","parse","stringify","labelId","order"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,MAAhB,QAAoC,QAApC;AAEA,OAAOC,KAAP,MAAkB,SAAlB;AAYA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,IADQ;AAEjBC,EAAAA,MAAM,EAAE;AAFS,CAArB;;AAKA,MAAMC,YAAY,GAAG,CAACC,KAAkB,GAAGJ,YAAtB,EAAoCK,MAApC,KAA0E;AAC3F,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,KAAK,CAACQ,OAAX;AACI,aAAO,EAAE,GAAGH,KAAL;AAAYH,QAAAA,OAAO,EAAE;AAArB,OAAP;;AAEJ,SAAKF,KAAK,CAACS,kBAAX;AAA+B;AAC3B,cAAMN,MAAM,GAAGL,KAAK,CAACQ,MAAM,CAACI,OAAR,EAAiB,KAAjB,CAApB;AACA,eAAO,EAAE,GAAGL,KAAL;AAAYF,UAAAA,MAAZ;AAAoBD,UAAAA,OAAO,EAAE;AAA7B,SAAP;AACH;;AAED,SAAKF,KAAK,CAACW,YAAX;AAAyB;AACrB,cAAMR,MAAM,GAAGJ,MAAM,CAACM,KAAK,CAACF,MAAP,EAAgBS,KAAD,IAAmBA,KAAK,CAACC,GAAN,KAAcP,MAAM,CAACI,OAAvD,CAArB;AACA,eAAO,EAAE,GAAGL,KAAL;AAAYF,UAAAA;AAAZ,SAAP;AACH;;AAED,SAAKH,KAAK,CAACc,kBAAX;AAA+B;AAC3B,cAAMC,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYZ,KAAK,CAACF,MAAlB,EAA0Be,GAA1B,CAA+BC,GAAD,IAAiB;AAC7D,gBAAMP,KAAK,GAAGQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAejB,KAAK,CAACF,MAArB,CAAX,EAAyCgB,GAAzC,CAAd;;AACA,cAAIP,KAAK,CAACC,GAAN,KAAcP,MAAM,CAACI,OAAP,CAAea,OAAjC,EAA0C;AACtCX,YAAAA,KAAK,CAACY,KAAN,GAAclB,MAAM,CAACI,OAAP,CAAec,KAA7B;AACH;;AACD,iBAAOZ,KAAP;AACH,SANiB,CAAlB;AAOA,eAAO,EACH,GAAGP,KADA;AAEHF,UAAAA,MAAM,EAAEL,KAAK,CAACiB,SAAD,EAAY,KAAZ;AAFV,SAAP;AAIH;;AAED;AACI,aAAOV,KAAP;AA7BR;AA+BH,CAhCD;;AAkCA,eAAeD,YAAf","sourcesContent":["import { keyBy, filter, find } from 'lodash';\nimport { ILabel } from '../../collections/label';\nimport types from './types';\n\nexport interface ILabelState {\n    loading: boolean;\n    labels: any;\n}\n\nexport interface IActionLabel {\n    type: string;\n    payload: any;\n}\n\nconst initialState = {\n    loading: true,\n    labels: {},\n};\n\nconst labelReducer = (state: ILabelState = initialState, action: IActionLabel): ILabelState => {\n    switch (action.type) {\n        case types.LOADING:\n            return { ...state, loading: true };\n\n        case types.LOAD_LABEL_SUCCESS: {\n            const labels = keyBy(action.payload, '_id');\n            return { ...state, labels, loading: false };\n        }\n\n        case types.REMOVE_LABEL: {\n            const labels = filter(state.labels, (label: ILabel) => label._id !== action.payload);\n            return { ...state, labels };\n        }\n\n        case types.UPDATE_ORDER_LABEL: {\n            const newLabels = Object.keys(state.labels).map((key: string) => {\n                const label = JSON.parse(JSON.stringify(state.labels))[key];\n                if (label._id === action.payload.labelId) {\n                    label.order = action.payload.order;\n                }\n                return label;\n            });\n            return {\n                ...state,\n                labels: keyBy(newLabels, '_id'),\n            };\n        }\n\n        default:\n            return state;\n    }\n};\n\nexport default labelReducer;\n"]},"metadata":{},"sourceType":"module"}