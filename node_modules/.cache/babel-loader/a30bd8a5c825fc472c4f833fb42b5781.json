{"ast":null,"code":"import { message } from 'antd';\nimport types from './imagesTypes';\nimport { fetchImagesRequest } from '../../api/images-api';\nimport { createGalleryRequest, fetchGalleryRequest } from '../../api/gallery-api';\nexport const addImages = images => {\n  return {\n    type: types.ADD_IMAGES_SUCCESS,\n    payload: images\n  };\n};\nexport const removeImage = imageId => {\n  return {\n    type: types.DELETE_IMAGE,\n    payload: imageId\n  };\n};\nexport const changTextSearch = text => {\n  return {\n    type: types.SEARCH,\n    payload: text\n  };\n};\nexport const searchImage = ({\n  text,\n  galleryId\n}) => async (dispatch, getState) => {\n  dispatch({\n    type: types.FETCH_IMAGES_LOADING\n  });\n\n  try {\n    const {\n      auth,\n      store\n    } = getState();\n    const {\n      token\n    } = auth;\n    const storeId = store.store._id;\n    const res = await fetchImagesRequest({\n      token: token.accessToken,\n      storeId,\n      galleryId,\n      name: text\n    });\n\n    if (res) {\n      dispatch({\n        type: types.FETCH_IMAGES_SUCCESS,\n        payload: res\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: types.FETCH_IMAGES_FAILED\n    });\n  }\n};\nexport const toggleBookmark = imageId => {\n  return {\n    type: types.TOOGLE_LIKE_IMAGE,\n    payload: imageId\n  };\n};\nexport const fetchImages = galleryId => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: types.FETCH_IMAGES_LOADING\n    });\n    const {\n      auth,\n      store\n    } = getState();\n    const {\n      token\n    } = auth;\n    const storeId = store.store._id;\n    const res = await fetchImagesRequest({\n      token: token.accessToken,\n      storeId,\n      galleryId\n    });\n\n    if (res) {\n      dispatch({\n        type: types.FETCH_IMAGES_SUCCESS,\n        payload: res\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: types.FETCH_IMAGES_FAILED\n    });\n  }\n};\nexport const fetchImagesBookmark = () => async (dispatch, getState) => {\n  dispatch({\n    type: types.FETCH_IMAGES_LOADING\n  });\n\n  try {\n    const {\n      auth,\n      store\n    } = getState();\n    const {\n      token\n    } = auth;\n    const storeId = store.store._id;\n    const res = await fetchImagesRequest({\n      token: token.accessToken,\n      storeId,\n      star: true\n    });\n    dispatch({\n      type: types.FETCH_IMAGES_SUCCESS,\n      payload: res\n    });\n  } catch (error) {}\n};\nexport const createGallery = name => async (dispatch, getState) => {\n  try {\n    const {\n      auth,\n      store\n    } = getState();\n    const {\n      token\n    } = auth;\n    const storeId = store.store._id;\n    const res = await createGalleryRequest({\n      token: token.accessToken,\n      storeId,\n      data: {\n        name\n      }\n    });\n\n    if (res) {\n      dispatch({\n        type: types.CREATE_GALLERY_SUCCESS,\n        payload: res\n      });\n    }\n  } catch (error) {\n    message.error('Lá»—i táº¡o má»›i danh má»¥c');\n  }\n};\nexport const fetchGallery = () => async (dispatch, getState) => {\n  try {\n    const {\n      auth,\n      store\n    } = getState();\n    const {\n      token\n    } = auth;\n    const storeId = store.store._id;\n    const res = await fetchGalleryRequest({\n      token: token.accessToken,\n      storeId\n    });\n\n    if (res) {\n      dispatch({\n        type: types.FETCH_GALLERY_SUCCESS,\n        payload: res\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: types.FETCH_IMAGES_FAILED\n    });\n  }\n};\nexport function deleteGallery(galleryId) {\n  return {\n    type: types.DELETE_GALLERY,\n    payload: galleryId\n  };\n}","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/reducers/imagesState/imagesAction.ts"],"names":["message","types","fetchImagesRequest","createGalleryRequest","fetchGalleryRequest","addImages","images","type","ADD_IMAGES_SUCCESS","payload","removeImage","imageId","DELETE_IMAGE","changTextSearch","text","SEARCH","searchImage","galleryId","dispatch","getState","FETCH_IMAGES_LOADING","auth","store","token","storeId","_id","res","accessToken","name","FETCH_IMAGES_SUCCESS","error","FETCH_IMAGES_FAILED","toggleBookmark","TOOGLE_LIKE_IMAGE","fetchImages","fetchImagesBookmark","star","createGallery","data","CREATE_GALLERY_SUCCESS","fetchGallery","FETCH_GALLERY_SUCCESS","deleteGallery","DELETE_GALLERY"],"mappings":"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","sourcesContent":["import { Dispatch } from 'redux';\nimport { message } from 'antd';\n\nimport types from './imagesTypes';\n\nimport { fetchImagesRequest } from '../../api/images-api';\nimport { createGalleryRequest, fetchGalleryRequest } from '../../api/gallery-api';\n\nexport const addImages = (images: string[]) => {\n    return {\n        type: types.ADD_IMAGES_SUCCESS,\n        payload: images,\n    };\n};\n\nexport const removeImage = (imageId: string) => {\n    return {\n        type: types.DELETE_IMAGE,\n        payload: imageId,\n    };\n};\n\nexport const changTextSearch = (text: string) => {\n    return {\n        type: types.SEARCH,\n        payload: text,\n    };\n};\n\nexport const searchImage = ({\n    text,\n    galleryId,\n}: {\n    text: string;\n    galleryId?: string;\n    star?: boolean;\n}) => async (dispatch: Dispatch, getState: () => any) => {\n    dispatch({\n        type: types.FETCH_IMAGES_LOADING,\n    });\n\n    try {\n        const { auth, store } = getState();\n        const { token } = auth;\n        const storeId = store.store._id;\n\n        const res = await fetchImagesRequest({\n            token: token.accessToken,\n            storeId,\n            galleryId,\n            name: text,\n        });\n\n        if (res) {\n            dispatch({ type: types.FETCH_IMAGES_SUCCESS, payload: res });\n        }\n    } catch (error) {\n        dispatch({ type: types.FETCH_IMAGES_FAILED });\n    }\n};\n\nexport const toggleBookmark = (imageId: string) => {\n    return {\n        type: types.TOOGLE_LIKE_IMAGE,\n        payload: imageId,\n    };\n};\n\nexport const fetchImages = (galleryId?: string) => async (\n    dispatch: Dispatch,\n    getState: () => any\n) => {\n    try {\n        dispatch({\n            type: types.FETCH_IMAGES_LOADING,\n        });\n\n        const { auth, store } = getState();\n        const { token } = auth;\n        const storeId = store.store._id;\n\n        const res = await fetchImagesRequest({\n            token: token.accessToken,\n            storeId,\n            galleryId,\n        });\n\n        if (res) {\n            dispatch({ type: types.FETCH_IMAGES_SUCCESS, payload: res });\n        }\n    } catch (error) {\n        dispatch({ type: types.FETCH_IMAGES_FAILED });\n    }\n};\n\nexport const fetchImagesBookmark = () => async (dispatch: Dispatch, getState: any) => {\n    dispatch({\n        type: types.FETCH_IMAGES_LOADING,\n    });\n\n    try {\n        const { auth, store } = getState();\n        const { token } = auth;\n        const storeId = store.store._id;\n\n        const res = await fetchImagesRequest({\n            token: token.accessToken,\n            storeId,\n            star: true,\n        });\n\n        dispatch({ type: types.FETCH_IMAGES_SUCCESS, payload: res });\n    } catch (error) {}\n};\n\nexport const createGallery = (name: string) => async (dispatch: Dispatch, getState: () => any) => {\n    try {\n        const { auth, store } = getState();\n        const { token } = auth;\n        const storeId = store.store._id;\n\n        const res = await createGalleryRequest({\n            token: token.accessToken,\n            storeId,\n            data: { name },\n        });\n\n        if (res) {\n            dispatch({ type: types.CREATE_GALLERY_SUCCESS, payload: res });\n        }\n    } catch (error) {\n        message.error('Lá»—i táº¡o má»›i danh má»¥c');\n    }\n};\n\nexport const fetchGallery = () => async (dispatch: Dispatch, getState: () => any) => {\n    try {\n        const { auth, store } = getState();\n        const { token } = auth;\n        const storeId = store.store._id;\n\n        const res = await fetchGalleryRequest({\n            token: token.accessToken,\n            storeId,\n        });\n\n        if (res) {\n            dispatch({ type: types.FETCH_GALLERY_SUCCESS, payload: res });\n        }\n    } catch (error) {\n        dispatch({ type: types.FETCH_IMAGES_FAILED });\n    }\n};\n\nexport function deleteGallery(galleryId: string) {\n    return {\n        type: types.DELETE_GALLERY,\n        payload: galleryId,\n    };\n}\n"]},"metadata":{},"sourceType":"module"}