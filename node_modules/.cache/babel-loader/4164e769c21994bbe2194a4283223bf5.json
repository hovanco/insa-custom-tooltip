{"ast":null,"code":"import { omit } from 'lodash';\nimport axiosClient from './axios-client';\n\nasync function createStore({\n  token,\n  name,\n  address,\n  province,\n  district,\n  ward,\n  phoneNo\n}) {\n  const res = await axiosClient({\n    method: 'POST',\n    url: '/store/v1/stores',\n    data: {\n      name,\n      address,\n      province,\n      district,\n      ward,\n      phoneNo\n    }\n  });\n  return res.data;\n}\n\nasync function loadStore(token) {\n  const res = await axiosClient({\n    method: 'GET',\n    url: '/store/v1/stores'\n  });\n  return res.data;\n}\n\nasync function editStore({\n  token,\n  storeId,\n  data\n}) {\n  const res = await axiosClient({\n    method: 'PUT',\n    url: `/store/v1/stores/${storeId}`,\n    data\n  });\n  return res.data;\n}\n\nasync function getListCustomers({\n  storeId,\n  token,\n  page = 1,\n  limit = 10,\n  query\n}) {\n  const url = `/store/v1/stores/${storeId}/customers?page=${page}&limit=${limit}&${query}`;\n  const response = await axiosClient({\n    method: 'GET',\n    url\n  });\n  return response.data;\n}\n\nasync function createCustomer({\n  storeId,\n  token,\n  data\n}) {\n  const url = `/store/v1/stores/${storeId}/customers`;\n  const response = await axiosClient({\n    method: 'POST',\n    url,\n    data: { ...data,\n      source: 'facebook'\n    }\n  });\n  return response.data;\n}\n\nasync function updateCustomer({\n  storeId,\n  token,\n  customerId,\n  data\n}) {\n  const url = `/store/v1/stores/${storeId}/customers/${customerId}`;\n  const response = await axiosClient({\n    method: 'PUT',\n    url,\n    data: omit(data, ['source'])\n  });\n  return response.data;\n}\n\nasync function createOrder({\n  storeId,\n  token,\n  data\n}) {\n  const res = await axiosClient({\n    method: 'POST',\n    url: `/store/v1/stores/${storeId}/orders`,\n    data: { ...data,\n      source: 'facebook'\n    }\n  });\n  return res.data;\n}\n\nconst storeApi = {\n  loadStore,\n  createStore,\n  editStore,\n  getListCustomers,\n  createCustomer,\n  createOrder,\n  updateCustomer\n};\nexport default storeApi;","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/api/store-api.ts"],"names":["omit","axiosClient","createStore","token","name","address","province","district","ward","phoneNo","res","method","url","data","loadStore","editStore","storeId","getListCustomers","page","limit","query","response","createCustomer","source","updateCustomer","customerId","createOrder","storeApi"],"mappings":"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","sourcesContent":["import { omit } from 'lodash';\nimport { ESaleChannel } from '../collections/sale-channel';\nimport axiosClient from './axios-client';\n\nasync function createStore({\n    token,\n    name,\n    address,\n    province,\n    district,\n    ward,\n    phoneNo,\n}: {\n    token: string;\n    name: string;\n    address: string;\n    province: string;\n    district: string;\n    ward: string;\n    phoneNo: string;\n}): Promise<any> {\n    const res = await axiosClient({\n        method: 'POST',\n        url: '/store/v1/stores',\n        data: { name, address, province, district, ward, phoneNo },\n    });\n\n    return res.data;\n}\n\nasync function loadStore(token: string): Promise<any> {\n    const res = await axiosClient({\n        method: 'GET',\n        url: '/store/v1/stores',\n    });\n\n    return res.data;\n}\n\nasync function editStore({\n    token,\n    storeId,\n    data,\n}: {\n    token: string;\n    storeId: string;\n    data: { name?: string, saleChannels?: ESaleChannel[], };\n}): Promise<any> {\n    const res = await axiosClient({\n        method: 'PUT',\n        url: `/store/v1/stores/${storeId}`,\n\n        data,\n    });\n\n    return res.data;\n}\n\nasync function getListCustomers({\n    storeId,\n    token,\n    page = 1,\n    limit = 10,\n    query,\n}: {\n    storeId: string;\n    token: string;\n    page?: number;\n    limit?: number;\n    query?: string;\n}) {\n    const url = `/store/v1/stores/${storeId}/customers?page=${page}&limit=${limit}&${query}`;\n    const response = await axiosClient({\n        method: 'GET',\n        url,\n    });\n\n    return response.data;\n}\n\nasync function createCustomer({\n    storeId,\n    token,\n    data,\n}: {\n    storeId: string;\n    token: string;\n    data: any;\n}) {\n    const url = `/store/v1/stores/${storeId}/customers`;\n    const response = await axiosClient({\n        method: 'POST',\n        url,\n        data: { ...data, source: 'facebook' },\n    });\n\n    return response.data;\n}\n\nasync function updateCustomer({\n    storeId,\n    token,\n    customerId,\n    data,\n}: {\n    storeId: string;\n    token: string;\n    customerId: string;\n    data: any;\n}) {\n    const url = `/store/v1/stores/${storeId}/customers/${customerId}`;\n    const response = await axiosClient({\n        method: 'PUT',\n        url,\n        data: omit(data, ['source']),\n    });\n\n    return response.data;\n}\n\ninterface IProduct {\n    productId: string;\n    count: number;\n}\n\ninterface ICustomer {\n    name: string;\n    phoneNo: string;\n    address: string;\n}\n\nasync function createOrder({\n    storeId,\n    token,\n    data,\n}: {\n    storeId: string;\n    token: string;\n    data: {\n        fbPageId?: string;\n        products: IProduct[];\n        customer: ICustomer;\n        deliveryOptions: any;\n        warehouseId?: string;\n    };\n}): Promise<any> {\n    const res = await axiosClient({\n        method: 'POST',\n        url: `/store/v1/stores/${storeId}/orders`,\n        data: { ...data, source: 'facebook' },\n    });\n\n    return res.data;\n}\n\nconst storeApi = {\n    loadStore,\n    createStore,\n    editStore,\n    getListCustomers,\n    createCustomer,\n    createOrder,\n    updateCustomer,\n};\n\nexport default storeApi;\n"]},"metadata":{},"sourceType":"module"}