{"ast":null,"code":"import types from './authTypes';\nconst initialState = {\n  loading: true,\n  isAuth: false,\n  isLogout: false,\n  token: {},\n  user: {}\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.LOADING:\n      return { ...state,\n        loading: true\n      };\n\n    case types.LOAD_USER_SUCCESS:\n      return { ...state,\n        user: action.payload,\n        loading: false,\n        isAuth: true\n      };\n\n    case types.LOGIN_SUCCESSS:\n      return { ...state,\n        token: action.payload,\n        isLogout: false\n      };\n\n    case types.UPDATE_TOKEN:\n      return { ...state,\n        token: { ...state.token,\n          accessToken: action.payload\n        }\n      };\n\n    case types.LOAD_USER_FAILED:\n      return { ...initialState,\n        loading: false\n      };\n\n    case types.LOGOUT:\n      return { ...initialState,\n        loading: false,\n        isLogout: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default authReducer;","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/reducers/authState/authReducer.ts"],"names":["types","initialState","loading","isAuth","isLogout","token","user","authReducer","state","action","type","LOADING","LOAD_USER_SUCCESS","payload","LOGIN_SUCCESSS","UPDATE_TOKEN","accessToken","LOAD_USER_FAILED","LOGOUT"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,aAAlB;AAmBA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,IADQ;AAEjBC,EAAAA,MAAM,EAAE,KAFS;AAGjBC,EAAAA,QAAQ,EAAE,KAHO;AAIjBC,EAAAA,KAAK,EAAE,EAJU;AAKjBC,EAAAA,IAAI,EAAE;AALW,CAArB;;AAQA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAuD;AACvE,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,KAAK,CAACW,OAAX;AACI,aAAO,EAAE,GAAGH,KAAL;AAAYN,QAAAA,OAAO,EAAE;AAArB,OAAP;;AAEJ,SAAKF,KAAK,CAACY,iBAAX;AACI,aAAO,EACH,GAAGJ,KADA;AAEHF,QAAAA,IAAI,EAAEG,MAAM,CAACI,OAFV;AAGHX,QAAAA,OAAO,EAAE,KAHN;AAIHC,QAAAA,MAAM,EAAE;AAJL,OAAP;;AAOJ,SAAKH,KAAK,CAACc,cAAX;AACI,aAAO,EACH,GAAGN,KADA;AAEHH,QAAAA,KAAK,EAAEI,MAAM,CAACI,OAFX;AAGHT,QAAAA,QAAQ,EAAE;AAHP,OAAP;;AAMJ,SAAKJ,KAAK,CAACe,YAAX;AACI,aAAO,EACH,GAAGP,KADA;AAEHH,QAAAA,KAAK,EAAE,EACH,GAAGG,KAAK,CAACH,KADN;AAEHW,UAAAA,WAAW,EAAEP,MAAM,CAACI;AAFjB;AAFJ,OAAP;;AAQJ,SAAKb,KAAK,CAACiB,gBAAX;AACI,aAAO,EAAE,GAAGhB,YAAL;AAAmBC,QAAAA,OAAO,EAAE;AAA5B,OAAP;;AACJ,SAAKF,KAAK,CAACkB,MAAX;AACI,aAAO,EAAE,GAAGjB,YAAL;AAAmBC,QAAAA,OAAO,EAAE,KAA5B;AAAmCE,QAAAA,QAAQ,EAAE;AAA7C,OAAP;;AAEJ;AACI,aAAOI,KAAP;AAlCR;AAoCH,CArCD;;AAuCA,eAAeD,WAAf","sourcesContent":["import types from './authTypes';\n\ninterface IAction {\n    type: string;\n    payload: any;\n}\n\ninterface Token {}\n\nexport interface User {}\n\nexport interface IAuthState {\n    loading: boolean;\n    isAuth: boolean;\n    isLogout: boolean;\n    token: Token;\n    user: User;\n}\n\nconst initialState = {\n    loading: true,\n    isAuth: false,\n    isLogout: false,\n    token: {},\n    user: {},\n};\n\nconst authReducer = (state = initialState, action: IAction): IAuthState => {\n    switch (action.type) {\n        case types.LOADING:\n            return { ...state, loading: true };\n\n        case types.LOAD_USER_SUCCESS:\n            return {\n                ...state,\n                user: action.payload,\n                loading: false,\n                isAuth: true,\n            };\n\n        case types.LOGIN_SUCCESSS:\n            return {\n                ...state,\n                token: action.payload,\n                isLogout: false,\n            };\n\n        case types.UPDATE_TOKEN:\n            return {\n                ...state,\n                token: {\n                    ...state.token,\n                    accessToken: action.payload,\n                },\n            };\n\n        case types.LOAD_USER_FAILED:\n            return { ...initialState, loading: false };\n        case types.LOGOUT:\n            return { ...initialState, loading: false, isLogout: true };\n\n        default:\n            return state;\n    }\n};\n\nexport default authReducer;\n"]},"metadata":{},"sourceType":"module"}