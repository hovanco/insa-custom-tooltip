{"ast":null,"code":"import { loginApi } from '../../api';\nimport authApi from '../../api/auth-api';\nimport { connectFanpageApi } from '../../api/fanpage';\nimport storeApi from '../../api/store-api';\nimport { getToken, removeToken } from '../../api/token';\nimport { getUserApi } from '../../api/user';\nimport { connectFanpageSuccess } from '../fanpageState/fanpageAction';\nimport { loadingStore, loadStore, loadStoreSuccess } from '../storeState/storeAction';\nimport types from './authTypes'; // load user\n\nconst loadingUser = () => ({\n  type: types.LOADING\n});\n\nconst loadUserSuccess = payload => ({\n  type: types.LOAD_USER_SUCCESS,\n  payload\n});\n\nexport const getUserAction = () => async dispatch => {\n  try {\n    dispatch(loadingUser());\n    const res = await getUserApi();\n    await dispatch(loadUserSuccess(res.data));\n    await dispatch(loadStore());\n  } catch (error) {\n    dispatch({\n      type: types.LOAD_USER_FAILED\n    });\n  }\n}; // login with email\n\nexport const loginActionWithEmail = payload => dispatch => {\n  dispatch({\n    type: types.LOGIN_SUCCESSS,\n    payload\n  });\n  dispatch(getUserAction());\n}; // login with service\n\nexport const loginActionWithService = (data, service) => async dispatch => {\n  try {\n    dispatch(loadingUser());\n    const res = await loginApi(data, service);\n    dispatch({\n      type: types.LOGIN_SUCCESSS,\n      payload: res.data\n    }); // load user\n\n    const res_user = await getUserApi(); // load store\n\n    dispatch(loadingStore());\n    const response_store = await storeApi.loadStore(res.data.accessToken);\n    await dispatch(loadStoreSuccess(response_store));\n\n    if (service === 'facebook') {\n      // add shortLiveToken to localStorage\n      if (data.accessToken) {\n        localStorage.setItem('shortLiveToken', data.accessToken);\n      } // connect fanpage\n\n\n      if (response_store) {\n        const response_connect_fanpage = await connectFanpageApi({\n          payload: {\n            shortLiveToken: data.accessToken\n          },\n          storeId: response_store._id,\n          token: res.data.accessToken\n        });\n        await dispatch(connectFanpageSuccess(response_connect_fanpage.data));\n      }\n    }\n\n    await dispatch(loadUserSuccess(res_user.data));\n  } catch (e) {\n    dispatch({\n      type: types.LOGIN_FAILED\n    });\n  }\n}; // logout\n\nexport const logout = () => async dispatch => {\n  try {\n    const refreshToken = getToken('refreshToken');\n\n    if (refreshToken) {\n      await authApi.logout(refreshToken);\n    }\n\n    removeToken();\n    dispatch({\n      type: types.LOGOUT\n    });\n  } catch (error) {}\n};","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/reducers/authState/authAction.ts"],"names":["loginApi","authApi","connectFanpageApi","storeApi","getToken","removeToken","getUserApi","connectFanpageSuccess","loadingStore","loadStore","loadStoreSuccess","types","loadingUser","type","LOADING","loadUserSuccess","payload","LOAD_USER_SUCCESS","getUserAction","dispatch","res","data","error","LOAD_USER_FAILED","loginActionWithEmail","LOGIN_SUCCESSS","loginActionWithService","service","res_user","response_store","accessToken","localStorage","setItem","response_connect_fanpage","shortLiveToken","storeId","_id","token","e","LOGIN_FAILED","logout","refreshToken","LOGOUT"],"mappings":"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","sourcesContent":["import { Dispatch } from 'redux';\nimport { loginApi, Payload } from '../../api';\nimport authApi from '../../api/auth-api';\nimport { connectFanpageApi } from '../../api/fanpage';\nimport storeApi from '../../api/store-api';\nimport { getToken, removeToken } from '../../api/token';\nimport { getUserApi } from '../../api/user';\nimport { connectFanpageSuccess } from '../fanpageState/fanpageAction';\nimport { loadingStore, loadStore, loadStoreSuccess } from '../storeState/storeAction';\nimport types from './authTypes';\n\n// load user\nconst loadingUser = () => ({ type: types.LOADING });\n\nconst loadUserSuccess = (payload: any) => ({\n    type: types.LOAD_USER_SUCCESS,\n    payload,\n});\n\nexport const getUserAction = () => async (dispatch: Dispatch<any>) => {\n    try {\n        dispatch(loadingUser());\n\n        const res = await getUserApi();\n\n        await dispatch(loadUserSuccess(res.data));\n        await dispatch(loadStore());\n    } catch (error) {\n        dispatch({\n            type: types.LOAD_USER_FAILED,\n        });\n    }\n};\n\n// login with email\nexport const loginActionWithEmail = (payload: any) => (dispatch: any) => {\n    dispatch({\n        type: types.LOGIN_SUCCESSS,\n        payload,\n    });\n\n    dispatch(getUserAction());\n};\n\n// login with service\nexport const loginActionWithService = (data: Payload, service?: any) => async (dispatch: any) => {\n    try {\n        dispatch(loadingUser());\n        const res = await loginApi(data, service);\n\n        dispatch({\n            type: types.LOGIN_SUCCESSS,\n            payload: res.data,\n        });\n\n        // load user\n        const res_user = await getUserApi();\n\n        // load store\n        dispatch(loadingStore());\n        const response_store = await storeApi.loadStore(res.data.accessToken);\n        await dispatch(loadStoreSuccess(response_store));\n\n        if (service === 'facebook') {\n            // add shortLiveToken to localStorage\n            if (data.accessToken) {\n                localStorage.setItem('shortLiveToken', data.accessToken);\n            }\n\n            // connect fanpage\n            if (response_store) {\n                const response_connect_fanpage = await connectFanpageApi({\n                    payload: { shortLiveToken: data.accessToken },\n                    storeId: response_store._id,\n                    token: res.data.accessToken,\n                });\n                await dispatch(connectFanpageSuccess(response_connect_fanpage.data));\n            }\n        }\n\n        await dispatch(loadUserSuccess(res_user.data));\n    } catch (e) {\n        dispatch({\n            type: types.LOGIN_FAILED,\n        });\n    }\n};\n\n// logout\nexport const logout = () => async (dispatch: Dispatch<any>) => {\n    try {\n        const refreshToken = getToken('refreshToken');\n\n        if (refreshToken) {\n            await authApi.logout(refreshToken);\n        }\n\n        removeToken();\n\n        dispatch({\n            type: types.LOGOUT,\n        });\n    } catch (error) {}\n};\n"]},"metadata":{},"sourceType":"module"}