{"ast":null,"code":"import types from './warehouseTypes';\nconst initialState = {\n  loading: false,\n  loadingCreateWarehouse: false,\n  warehouses: {\n    data: [],\n    total: 0\n  }\n};\n\nconst warehouseReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.FETCH_WAREHOUSES_LOADING:\n      return { ...state,\n        loading: true\n      };\n\n    case types.FETCH_WAREHOUSES_SUCCESS:\n      return { ...state,\n        warehouses: {\n          data: action.payload.data,\n          total: action.payload.total\n        },\n        loading: false\n      };\n\n    case types.FETCH_WAREHOUSES_FAILED:\n      return { ...state,\n        warehouses: {},\n        loading: false\n      };\n\n    case types.CREATE_WAREHOUSE_LOADING:\n      return { ...state,\n        loadingCreateWarehouse: true\n      };\n\n    case types.DELETE_WAREHOUSE_SUCCESS:\n      const cloneWarehouses = (state.warehouses.data || []).filter(o => o._id !== action.payload);\n      return { ...state,\n        warehouses: { ...state.warehouses,\n          data: [...cloneWarehouses]\n        }\n      };\n\n    case types.DELETE_WAREHOUSE_FAILED:\n      return { ...state\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default warehouseReducer;","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/reducers/warehouseState/warehouseReducer.ts"],"names":["types","initialState","loading","loadingCreateWarehouse","warehouses","data","total","warehouseReducer","state","action","type","FETCH_WAREHOUSES_LOADING","FETCH_WAREHOUSES_SUCCESS","payload","FETCH_WAREHOUSES_FAILED","CREATE_WAREHOUSE_LOADING","DELETE_WAREHOUSE_SUCCESS","cloneWarehouses","filter","o","_id","DELETE_WAREHOUSE_FAILED"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AAYA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,KADQ;AAEjBC,EAAAA,sBAAsB,EAAE,KAFP;AAGjBC,EAAAA,UAAU,EAAE;AACRC,IAAAA,IAAI,EAAE,EADE;AAERC,IAAAA,KAAK,EAAE;AAFC;AAHK,CAArB;;AASA,MAAMC,gBAAgB,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAA2C;AAChE,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,KAAK,CAACW,wBAAX;AACI,aAAO,EACH,GAAGH,KADA;AAEHN,QAAAA,OAAO,EAAE;AAFN,OAAP;;AAKJ,SAAKF,KAAK,CAACY,wBAAX;AACI,aAAO,EACH,GAAGJ,KADA;AAEHJ,QAAAA,UAAU,EAAE;AAAEC,UAAAA,IAAI,EAAEI,MAAM,CAACI,OAAP,CAAeR,IAAvB;AAA6BC,UAAAA,KAAK,EAAEG,MAAM,CAACI,OAAP,CAAeP;AAAnD,SAFT;AAGHJ,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAMJ,SAAKF,KAAK,CAACc,uBAAX;AACI,aAAO,EACH,GAAGN,KADA;AAEHJ,QAAAA,UAAU,EAAE,EAFT;AAGHF,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAMJ,SAAKF,KAAK,CAACe,wBAAX;AACI,aAAO,EACH,GAAGP,KADA;AAEHL,QAAAA,sBAAsB,EAAE;AAFrB,OAAP;;AAKJ,SAAKH,KAAK,CAACgB,wBAAX;AACI,YAAMC,eAAe,GAAG,CAACT,KAAK,CAACJ,UAAN,CAAiBC,IAAjB,IAAyB,EAA1B,EAA8Ba,MAA9B,CACnBC,CAAD,IAAYA,CAAC,CAACC,GAAF,KAAUX,MAAM,CAACI,OADT,CAAxB;AAIA,aAAO,EACH,GAAGL,KADA;AAEHJ,QAAAA,UAAU,EAAE,EACR,GAAGI,KAAK,CAACJ,UADD;AAERC,UAAAA,IAAI,EAAE,CAAC,GAAGY,eAAJ;AAFE;AAFT,OAAP;;AAQJ,SAAKjB,KAAK,CAACqB,uBAAX;AACI,aAAO,EACH,GAAGb;AADA,OAAP;;AAIJ;AACI,aAAOA,KAAP;AA9CR;AAgDH,CAjDD;;AAmDA,eAAeD,gBAAf","sourcesContent":["import types from './warehouseTypes';\n\nexport interface IAction {\n    type: string;\n    payload: any;\n}\n\nexport interface IWarehouses {\n    data: any[];\n    total: number;\n}\n\nconst initialState = {\n    loading: false,\n    loadingCreateWarehouse: false,\n    warehouses: {\n        data: [],\n        total: 0,\n    },\n};\n\nconst warehouseReducer = (state = initialState, action: IAction) => {\n    switch (action.type) {\n        case types.FETCH_WAREHOUSES_LOADING:\n            return {\n                ...state,\n                loading: true,\n            };\n\n        case types.FETCH_WAREHOUSES_SUCCESS:\n            return {\n                ...state,\n                warehouses: { data: action.payload.data, total: action.payload.total },\n                loading: false,\n            };\n\n        case types.FETCH_WAREHOUSES_FAILED:\n            return {\n                ...state,\n                warehouses: {},\n                loading: false,\n            };\n\n        case types.CREATE_WAREHOUSE_LOADING:\n            return {\n                ...state,\n                loadingCreateWarehouse: true,\n            };\n\n        case types.DELETE_WAREHOUSE_SUCCESS:\n            const cloneWarehouses = (state.warehouses.data || []).filter(\n                (o: any) => o._id !== action.payload\n            );\n\n            return {\n                ...state,\n                warehouses: {\n                    ...state.warehouses,\n                    data: [...cloneWarehouses],\n                },\n            };\n\n        case types.DELETE_WAREHOUSE_FAILED:\n            return {\n                ...state,\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default warehouseReducer;\n"]},"metadata":{},"sourceType":"module"}