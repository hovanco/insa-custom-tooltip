{"ast":null,"code":"import { keyBy, set, isEmpty } from 'lodash';\nimport types from './fanpageTypes';\nimport { isActivePage } from './fanpageAction';\nimport { ConversationType } from '../../collections/facebook-conversation';\nconst initialState = {\n  loading: true,\n  loading_conversation: true,\n  pages: {},\n  allPages: {},\n  conversations: [],\n  iniData: false,\n  conversation: null,\n  newMessage: null,\n  originSocketMessage: null,\n  page: null,\n  error: false,\n  isUpdateMessage: true,\n  next: null,\n  filterConversation: ['all']\n};\n\nconst facebookReducer = (state = initialState, action) => {\n  let index = 0;\n\n  switch (action.type) {\n    case types.CONNECT_FANPAGE_SUCCESSS:\n      return { ...state,\n        pages: { ...state.pages,\n          ...keyBy(action.payload, '_id')\n        },\n        loading: false\n      };\n\n    case types.CONNECT_FANPAGE_FAILED:\n      return { ...state,\n        error: true,\n        loading: false\n      };\n\n    case types.REMOVE_ERROR_LOAD_FANPAGES:\n      return { ...state,\n        error: false\n      };\n\n    case types.LOAD_FANPAGES:\n      return { ...state,\n        loading: true\n      };\n\n    case types.SET_NEW_MESSAGE:\n      return { ...state,\n        newMessage: action.payload\n      };\n\n    case types.LOAD_FANPAGES_SUCCESS:\n      const pages = action.payload.data.reduce((value, o) => {\n        if (isActivePage(o)) {\n          value[o._id] = o;\n        }\n\n        return value;\n      }, {});\n      const allPages = action.payload.data.reduce((value, o) => {\n        value[o._id] = o;\n        return value;\n      }, {});\n      let page;\n\n      if (!isEmpty(action.payload.activePage)) {\n        page = action.payload.activePage;\n      } else {\n        page = action.payload.data.find(item => isActivePage(item));\n      }\n\n      return { ...state,\n        pages,\n        allPages,\n        page,\n        loading: false\n      };\n\n    case types.LOAD_FANPAGES_FAILED:\n      return { ...state,\n        loading: false\n      };\n\n    case types.LOADING_CONVERSATIONS:\n      return { ...state,\n        loading_conversation: true\n      };\n\n    case types.REMOVE_CONVERSATIONS:\n      return { ...state,\n        conversations: [],\n        next: null\n      };\n\n    case types.LOAD_CONVERSATIONS_SUCCESS:\n      {\n        const {\n          pageSelected,\n          conversations\n        } = action.payload;\n\n        if (pageSelected) {\n          const pageSelectedId = pageSelected._id;\n          const pages_news = { ...state.pages,\n            [pageSelectedId]: { ...state.pages[pageSelectedId],\n              countUnread: pageSelected.countUnread\n            }\n          };\n          return { ...state,\n            conversations: conversations.data,\n            next: conversations.next,\n            page: pageSelected,\n            pages: pages_news,\n            loading_conversation: false\n          };\n        }\n\n        return { ...state,\n          conversations: state.conversations.concat(conversations.data),\n          next: conversations.next,\n          loading_conversation: false\n        };\n      }\n\n    case types.SELECT_CONVERSATION:\n      {\n        const conversations_news = state.conversations.map(c => {\n          if (c._id === action.payload._id) {\n            return { ...c,\n              unread: false\n            };\n          }\n\n          return c;\n        });\n        return { ...state,\n          conversation: action.payload,\n          conversations: conversations_news\n        };\n      }\n\n    case types.MARK_AS_UNREAD:\n      {\n        const conversations_news = state.conversations.map(c => {\n          if (c._id === action.payload.conversation._id) {\n            return { ...c,\n              unread: action.payload.unread\n            };\n          }\n\n          return c;\n        });\n        return { ...state,\n          conversations: conversations_news\n        };\n      }\n\n    case types.UPDATE_COUNT_UNREAD_PAGE:\n      {\n        const pages_news = Object.keys(state.pages).map(key => {\n          const p = JSON.parse(JSON.stringify(state.pages))[key];\n\n          if (p.fbObjectId === action.payload.fbObjectId) {\n            p.countUnread = action.payload.count;\n          }\n\n          return p;\n        });\n        return { ...state,\n          pages: keyBy(pages_news, '_id')\n        };\n      }\n\n    case types.UPDATE_CONVERSATION:\n      {\n        const {\n          conversation,\n          newMessage,\n          isUpdateMessage\n        } = action.payload;\n\n        if (state.filterConversation.length > 0 && !state.filterConversation.includes('all')) {\n          if (conversation.type === ConversationType.Message && !state.filterConversation.includes('message') || conversation.type === ConversationType.Comment && !state.filterConversation.includes('comment')) {\n            return { ...state\n            };\n          }\n        }\n\n        const pageCurrent = state.page;\n\n        if (pageCurrent.fbObjectId === conversation.fbPageId) {\n          const conversation_local = state.conversation;\n          index = state.conversations.findIndex(o => o._id === conversation._id);\n          const is_valid = state.conversation && conversation_local._id === conversation._id;\n          let conversation_new = { ...conversation,\n            unread: conversation_local && conversation_local.fbObjectId === conversation.fbObjectId ? false : newMessage.from.id !== pageCurrent.fbObjectId\n          };\n          let conversations_new = [];\n          const tempConversation = state.conversations[index];\n\n          if (index !== -1) {\n            conversation_new = { ...conversation_new,\n              labelIds: tempConversation.labelIds\n            };\n            state.conversations.splice(index, 1);\n            conversations_new = [conversation_new, ...state.conversations];\n          } else {\n            conversations_new = [conversation_new, ...state.conversations];\n          }\n\n          return { ...state,\n            conversations: conversations_new,\n            newMessage: is_valid ? newMessage : null,\n            originSocketMessage: newMessage,\n            isUpdateMessage\n          };\n        }\n\n        return { ...state\n        };\n      }\n\n    case types.UPDATE_LABEL_CONVERSATION:\n      {\n        const conversations_news = state.conversations.map(c => {\n          if (c._id === action.payload.conversation._id) {\n            let labelIds;\n\n            if (c.labelIds) {\n              const data = c.labelIds.filter(item => item._id === action.payload.label._id);\n\n              if (data.length > 0) {\n                labelIds = c.labelIds.filter(item => item._id !== action.payload.label._id);\n              } else {\n                labelIds = [...c.labelIds, action.payload.label];\n              }\n            } else {\n              labelIds = [action.payload.label];\n            }\n\n            action.payload.conversation.labelIds = labelIds;\n            return { ...c,\n              labelIds\n            };\n          }\n\n          return c;\n        });\n        return { ...state,\n          conversation: action.payload.conversation,\n          conversations: conversations_news\n        };\n      }\n\n    case types.UPDATE_LIKED_COMMENTS_CONVERSATION:\n      {\n        const conversations_news = state.conversations.map(c => {\n          if (c._id === action.payload.conversationId) {\n            const newLikedComments = { ...c.likedComments\n            };\n            set(newLikedComments, `${action.payload.commentId}`, action.payload.value);\n            return { ...c,\n              likedComments: newLikedComments\n            };\n          }\n\n          return c;\n        });\n        const newConversation = state.conversation;\n        if (newConversation) newConversation.likedComments = { ...newConversation.likedComments,\n          [action.payload.commentId]: action.payload.value\n        };\n        return { ...state,\n          conversations: conversations_news,\n          conversation: newConversation\n        };\n      }\n\n    case types.UPDATE_HIDDEN_COMMENTS_CONVERSATION:\n      {\n        const conversations_news = state.conversations.map(c => {\n          if (c._id === action.payload.conversationId) {\n            const newHiddenComments = { ...c.hiddenComments\n            };\n            set(newHiddenComments, `${action.payload.commentId}`, action.payload.value);\n            return { ...c,\n              hiddenComments: newHiddenComments\n            };\n          }\n\n          return c;\n        });\n        return { ...state,\n          conversations: conversations_news\n        };\n      }\n\n    case types.UPDATE_BLOCK_CONVERSATION:\n      {\n        const conversations_news = state.conversations.map(c => {\n          if (c.fbUserId === action.payload.fbUserId) {\n            return { ...c,\n              blocked: !c.blocked\n            };\n          }\n\n          return c;\n        });\n        return { ...state,\n          conversations: conversations_news\n        };\n      }\n\n    case types.SET_NULL_FOR_CONVERSATION:\n      {\n        return { ...state,\n          conversation: null\n        };\n      }\n\n    case types.REMOVE_CONVERSATION:\n      {\n        const conversations_news = state.conversations.filter(c => c._id !== action.payload.conversationId);\n        return { ...state,\n          conversations: conversations_news\n        };\n      }\n\n    case types.UPDATE_MAIN_COMMENT_CONVERSATION:\n      {\n        const conversations_news = state.conversations.map(c => {\n          if (c._id === action.payload.conversationId) {\n            return { ...c,\n              fbObjectId: action.payload.fbObjectId,\n              commentIds: action.payload.commentIds\n            };\n          }\n\n          return c;\n        });\n        return { ...state,\n          conversations: conversations_news\n        };\n      }\n\n    case types.SET_CURRENT_PAGE:\n      {\n        return { ...state,\n          page: action.payload\n        };\n      }\n\n    case types.SET_FILTER_CONVERSATION:\n      {\n        return { ...state,\n          filterConversation: action.payload\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default facebookReducer;","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/reducers/fanpageState/fanpageReducer.ts"],"names":["keyBy","set","isEmpty","types","isActivePage","ConversationType","initialState","loading","loading_conversation","pages","allPages","conversations","iniData","conversation","newMessage","originSocketMessage","page","error","isUpdateMessage","next","filterConversation","facebookReducer","state","action","index","type","CONNECT_FANPAGE_SUCCESSS","payload","CONNECT_FANPAGE_FAILED","REMOVE_ERROR_LOAD_FANPAGES","LOAD_FANPAGES","SET_NEW_MESSAGE","LOAD_FANPAGES_SUCCESS","data","reduce","value","o","_id","activePage","find","item","LOAD_FANPAGES_FAILED","LOADING_CONVERSATIONS","REMOVE_CONVERSATIONS","LOAD_CONVERSATIONS_SUCCESS","pageSelected","pageSelectedId","pages_news","countUnread","concat","SELECT_CONVERSATION","conversations_news","map","c","unread","MARK_AS_UNREAD","UPDATE_COUNT_UNREAD_PAGE","Object","keys","key","p","JSON","parse","stringify","fbObjectId","count","UPDATE_CONVERSATION","length","includes","Message","Comment","pageCurrent","fbPageId","conversation_local","findIndex","is_valid","conversation_new","from","id","conversations_new","tempConversation","labelIds","splice","UPDATE_LABEL_CONVERSATION","filter","label","UPDATE_LIKED_COMMENTS_CONVERSATION","conversationId","newLikedComments","likedComments","commentId","newConversation","UPDATE_HIDDEN_COMMENTS_CONVERSATION","newHiddenComments","hiddenComments","UPDATE_BLOCK_CONVERSATION","fbUserId","blocked","SET_NULL_FOR_CONVERSATION","REMOVE_CONVERSATION","UPDATE_MAIN_COMMENT_CONVERSATION","commentIds","SET_CURRENT_PAGE","SET_FILTER_CONVERSATION"],"mappings":"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","sourcesContent":["import { keyBy, set, isEmpty } from 'lodash';\nimport types from './fanpageTypes';\nimport { isActivePage } from './fanpageAction';\nimport { IFacebookPage } from '../../collections/facebook-page';\nimport { ConversationType, IFacebookConversation } from '../../collections/facebook-conversation';\n\nexport interface IAction {\n    type: string;\n    payload: any;\n}\n\nexport interface Page extends IFacebookPage {\n    countUnread: number;\n    picture: string;\n}\n\nexport interface IConversation extends IFacebookConversation {}\n\nexport interface IFacebookState {\n    loading: boolean;\n    loading_conversation: boolean;\n    pages: any;\n    allPages: any;\n    conversations: IFacebookConversation[];\n    iniData: boolean;\n    conversation: any;\n    newMessage: any;\n    originSocketMessage: any;\n    page: Page;\n    error: boolean;\n    isUpdateMessage: boolean;\n    next: string;\n    filterConversation: string[];\n}\n\nconst initialState = {\n    loading: true,\n    loading_conversation: true,\n    pages: {},\n    allPages: {},\n    conversations: [],\n    iniData: false,\n    conversation: null,\n    newMessage: null,\n    originSocketMessage: null,\n    page: null,\n    error: false,\n    isUpdateMessage: true,\n    next: null,\n    filterConversation: ['all'],\n};\n\nconst facebookReducer = (state = initialState, action: IAction) => {\n    let index = 0;\n\n    switch (action.type) {\n        case types.CONNECT_FANPAGE_SUCCESSS:\n            return {\n                ...state,\n                pages: {\n                    ...state.pages,\n                    ...keyBy(action.payload, '_id'),\n                },\n                loading: false,\n            };\n\n        case types.CONNECT_FANPAGE_FAILED:\n            return {\n                ...state,\n                error: true,\n                loading: false,\n            };\n\n        case types.REMOVE_ERROR_LOAD_FANPAGES:\n            return {\n                ...state,\n                error: false,\n            };\n\n        case types.LOAD_FANPAGES:\n            return {\n                ...state,\n                loading: true,\n            };\n\n        case types.SET_NEW_MESSAGE:\n            return {\n                ...state,\n                newMessage: action.payload,\n            };\n\n        case types.LOAD_FANPAGES_SUCCESS:\n            const pages = action.payload.data.reduce((value: any, o: any) => {\n                if (isActivePage(o)) {\n                    value[o._id] = o;\n                }\n                return value;\n            }, {});\n            const allPages = action.payload.data.reduce((value: any, o: any) => {\n                value[o._id] = o;\n                return value;\n            }, {});\n\n            let page;\n            if (!isEmpty(action.payload.activePage)) {\n                page = action.payload.activePage;\n            } else {\n                page = action.payload.data.find((item: any) => isActivePage(item));\n            }\n\n            return {\n                ...state,\n                pages,\n                allPages,\n                page,\n                loading: false,\n            };\n\n        case types.LOAD_FANPAGES_FAILED:\n            return {\n                ...state,\n                loading: false,\n            };\n\n        case types.LOADING_CONVERSATIONS:\n            return { ...state, loading_conversation: true };\n\n        case types.REMOVE_CONVERSATIONS:\n            return {\n                ...state,\n                conversations: [],\n                next: null,\n            };\n\n        case types.LOAD_CONVERSATIONS_SUCCESS: {\n            const { pageSelected, conversations } = action.payload;\n\n            if (pageSelected) {\n                const pageSelectedId = pageSelected._id;\n\n                const pages_news = {\n                    ...state.pages,\n                    [pageSelectedId]: {\n                        ...(state.pages as any)[pageSelectedId],\n                        countUnread: pageSelected.countUnread,\n                    },\n                };\n\n                return {\n                    ...state,\n                    conversations: conversations.data,\n                    next: conversations.next,\n                    page: pageSelected,\n                    pages: pages_news,\n                    loading_conversation: false,\n                };\n            }\n\n            return {\n                ...state,\n                conversations: state.conversations.concat(conversations.data),\n                next: conversations.next,\n                loading_conversation: false,\n            };\n        }\n\n        case types.SELECT_CONVERSATION: {\n            const conversations_news = state.conversations.map((c: IConversation) => {\n                if (c._id === action.payload._id) {\n                    return { ...c, unread: false };\n                }\n                return c;\n            });\n            return {\n                ...state,\n                conversation: action.payload,\n                conversations: conversations_news,\n            };\n        }\n\n        case types.MARK_AS_UNREAD: {\n            const conversations_news = state.conversations.map((c: IConversation) => {\n                if (c._id === action.payload.conversation._id) {\n                    return { ...c, unread: action.payload.unread };\n                }\n                return c;\n            });\n            return {\n                ...state,\n                conversations: conversations_news,\n            };\n        }\n\n        case types.UPDATE_COUNT_UNREAD_PAGE: {\n            const pages_news = Object.keys(state.pages).map((key: string) => {\n                const p = JSON.parse(JSON.stringify(state.pages))[key];\n                if (p.fbObjectId === action.payload.fbObjectId) {\n                    p.countUnread = action.payload.count;\n                }\n                return p;\n            });\n            return {\n                ...state,\n                pages: keyBy(pages_news, '_id'),\n            };\n        }\n\n        case types.UPDATE_CONVERSATION: {\n            const { conversation, newMessage, isUpdateMessage } = action.payload;\n\n            if (state.filterConversation.length > 0 && !state.filterConversation.includes('all')) {\n                if (\n                    (conversation.type === ConversationType.Message && !state.filterConversation.includes('message')) ||\n                    (conversation.type === ConversationType.Comment && !state.filterConversation.includes('comment'))\n                ) {\n                    return { ...state };\n                }\n            }\n\n            const pageCurrent: any = state.page;\n            if (pageCurrent.fbObjectId === conversation.fbPageId) {\n                const conversation_local: any = state.conversation;\n                index = state.conversations.findIndex(\n                    (o: IConversation) => o._id === conversation._id\n                );\n\n                const is_valid = state.conversation && conversation_local._id === conversation._id;\n\n                let conversation_new = {\n                    ...conversation,\n                    unread:\n                        conversation_local &&\n                        conversation_local.fbObjectId === conversation.fbObjectId\n                            ? false\n                            : newMessage.from.id !== pageCurrent.fbObjectId,\n                };\n\n                let conversations_new = [];\n                const tempConversation: any = state.conversations[index];\n\n                if (index !== -1) {\n                    conversation_new = {\n                        ...conversation_new,\n                        labelIds: tempConversation.labelIds,\n                    };\n                    state.conversations.splice(index, 1);\n                    conversations_new = [conversation_new, ...state.conversations];\n                } else {\n                    conversations_new = [conversation_new, ...state.conversations];\n                }\n\n                return {\n                    ...state,\n                    conversations: conversations_new,\n                    newMessage: is_valid ? newMessage : null,\n                    originSocketMessage: newMessage,\n                    isUpdateMessage,\n                };\n            }\n\n            return { ...state };\n        }\n\n        case types.UPDATE_LABEL_CONVERSATION: {\n            const conversations_news = state.conversations.map((c: IConversation) => {\n                if (c._id === action.payload.conversation._id) {\n                    let labelIds;\n                    if (c.labelIds) {\n                        const data = c.labelIds.filter(\n                            (item) => item._id === action.payload.label._id\n                        );\n                        if (data.length > 0) {\n                            labelIds = c.labelIds.filter(\n                                (item) => item._id !== action.payload.label._id\n                            );\n                        } else {\n                            labelIds = [...c.labelIds, action.payload.label];\n                        }\n                    } else {\n                        labelIds = [action.payload.label];\n                    }\n                    action.payload.conversation.labelIds = labelIds;\n                    return { ...c, labelIds };\n                }\n                return c;\n            });\n            return {\n                ...state,\n                conversation: action.payload.conversation,\n                conversations: conversations_news,\n            };\n        }\n\n        case types.UPDATE_LIKED_COMMENTS_CONVERSATION: {\n            const conversations_news = state.conversations.map((c: IConversation) => {\n                if (c._id === action.payload.conversationId) {\n                    const newLikedComments = { ...c.likedComments };\n                    set(newLikedComments, `${action.payload.commentId}`, action.payload.value);\n                    return { ...c, likedComments: newLikedComments };\n                }\n                return c;\n            });\n\n            const newConversation: any = state.conversation;\n            if (newConversation)\n                newConversation.likedComments = {\n                    ...newConversation.likedComments,\n                    [action.payload.commentId]: action.payload.value,\n                };\n\n            return {\n                ...state,\n                conversations: conversations_news,\n                conversation: newConversation,\n            };\n        }\n\n        case types.UPDATE_HIDDEN_COMMENTS_CONVERSATION: {\n            const conversations_news = state.conversations.map((c: IConversation) => {\n                if (c._id === action.payload.conversationId) {\n                    const newHiddenComments = { ...c.hiddenComments };\n                    set(newHiddenComments, `${action.payload.commentId}`, action.payload.value);\n                    return { ...c, hiddenComments: newHiddenComments };\n                }\n                return c;\n            });\n            return {\n                ...state,\n                conversations: conversations_news,\n            };\n        }\n\n        case types.UPDATE_BLOCK_CONVERSATION: {\n            const conversations_news = state.conversations.map((c: IConversation) => {\n                if (c.fbUserId === action.payload.fbUserId) {\n                    return { ...c, blocked: !c.blocked };\n                }\n                return c;\n            });\n            return {\n                ...state,\n                conversations: conversations_news,\n            };\n        }\n\n        case types.SET_NULL_FOR_CONVERSATION: {\n            return {\n                ...state,\n                conversation: null,\n            };\n        }\n\n        case types.REMOVE_CONVERSATION: {\n            const conversations_news = state.conversations.filter(\n                (c: IConversation) => c._id !== action.payload.conversationId\n            );\n            return {\n                ...state,\n                conversations: conversations_news,\n            };\n        }\n\n        case types.UPDATE_MAIN_COMMENT_CONVERSATION: {\n            const conversations_news = state.conversations.map((c: IConversation) => {\n                if (c._id === action.payload.conversationId) {\n                    return {\n                        ...c,\n                        fbObjectId: action.payload.fbObjectId,\n                        commentIds: action.payload.commentIds,\n                    };\n                }\n                return c;\n            });\n            return {\n                ...state,\n                conversations: conversations_news,\n            };\n        }\n\n        case types.SET_CURRENT_PAGE: {\n            return {\n                ...state,\n                page: action.payload,\n            };\n        }\n\n        case types.SET_FILTER_CONVERSATION: {\n            return {\n                ...state,\n                filterConversation: action.payload,\n            };\n        }\n\n        default:\n            return state;\n    }\n};\n\nexport default facebookReducer;\n"]},"metadata":{},"sourceType":"module"}