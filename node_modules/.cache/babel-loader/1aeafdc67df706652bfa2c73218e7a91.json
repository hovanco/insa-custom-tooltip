{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/FacebookClient/src/pages/conversation/conversation-list/conversation-item.tsx\",\n    _s = $RefreshSig$();\n\nimport { MinusCircleOutlined, UserOutlined } from '@ant-design/icons';\nimport { Avatar } from 'antd';\nimport moment from 'moment';\nimport React, { memo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { markAsUnreadApi } from '../../../api/conversation-api';\nimport { FacebookOutlinedIcon, MessageIcon } from '../../../assets/icon';\nimport { selectConversation, setNullForConversation, updateCountUnreadPage } from '../../../reducers/fanpageState/fanpageAction';\nimport { generateUrlImgFb } from '../../../utils/generate-url-img-fb';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ConversationItem = ({\n  conversation\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const conversation_select = useSelector(({\n    fanpage\n  }) => fanpage.conversation);\n  const store = useSelector(({\n    store\n  }) => store.store);\n  const token = useSelector(({\n    auth\n  }) => auth.token);\n  const page = useSelector(({\n    fanpage\n  }) => fanpage.page);\n  const updateYear = moment(conversation.updatedAt).format('YYYY');\n  const nowYear = moment().format('YYYY');\n  const format_date = updateYear === nowYear ? 'DD/MM' : 'DD/MM/YY';\n  const date = moment(conversation.updatedAt).format(format_date);\n\n  const handleSelectConversation = async () => {\n    await dispatch(setNullForConversation());\n    dispatch(selectConversation(conversation));\n\n    if (conversation.unread) {\n      markAsUnreadApi({\n        storeId: store._id,\n        fbPageId: conversation.fbPageId,\n        token: token.accessToken,\n        conversationId: conversation.fbObjectId,\n        read: true\n      }).then(res => {\n        dispatch(updateCountUnreadPage({\n          fbObjectId: store.activePage.fbObjectId\n        }));\n      });\n    }\n  };\n\n  const active = conversation_select && conversation._id === conversation_select._id;\n  let className = active ? 'item active' : 'item';\n  if (conversation.unread) className += ' unread';\n  const classNameInfo = 'info';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: className,\n    onClick: handleSelectConversation,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"item-avatar\",\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        src: generateUrlImgFb(conversation.fbUserId, page.accessToken),\n        icon: /*#__PURE__*/_jsxDEV(UserOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 27\n        }, this),\n        size: 50\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"icon\",\n        children: conversation.type === 1 ? /*#__PURE__*/_jsxDEV(MessageIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 48\n        }, this) : /*#__PURE__*/_jsxDEV(FacebookOutlinedIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 66\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classNameInfo,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"name\",\n          children: conversation.fbUsername\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), ' ', conversation.blocked && /*#__PURE__*/_jsxDEV(MinusCircleOutlined, {\n          style: {\n            color: 'red'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 46\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"message\",\n        children: conversation.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"labels-wrap\",\n        children: conversation.labelIds && conversation.labelIds.map(item => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"label\",\n          style: {\n            background: item.backgroundColor,\n            color: item.color,\n            fontWeight: conversation.unread ? 700 : 400\n          },\n          children: item.name\n        }, item._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"item-right\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"date\",\n        children: date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ConversationItem, \"tVr+2RksGzZsV4zFpAAuLXaKFAc=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = ConversationItem;\nexport default _c2 = /*#__PURE__*/memo(ConversationItem);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ConversationItem\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/pages/conversation/conversation-list/conversation-item.tsx"],"names":["MinusCircleOutlined","UserOutlined","Avatar","moment","React","memo","useDispatch","useSelector","markAsUnreadApi","FacebookOutlinedIcon","MessageIcon","selectConversation","setNullForConversation","updateCountUnreadPage","generateUrlImgFb","ConversationItem","conversation","dispatch","conversation_select","fanpage","store","token","auth","page","updateYear","updatedAt","format","nowYear","format_date","date","handleSelectConversation","unread","storeId","_id","fbPageId","accessToken","conversationId","fbObjectId","read","then","res","activePage","active","className","classNameInfo","fbUserId","type","fbUsername","blocked","color","message","labelIds","map","item","background","backgroundColor","fontWeight","name"],"mappings":"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","sourcesContent":["import { MinusCircleOutlined, UserOutlined } from '@ant-design/icons';\nimport { Avatar, Space } from 'antd';\nimport moment from 'moment';\nimport React, { FC, memo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { markAsUnreadApi } from '../../../api/conversation-api';\nimport { FacebookOutlinedIcon, MessageIcon } from '../../../assets/icon';\nimport { IAuthState } from '../../../reducers/authState/authReducer';\nimport {\n    selectConversation,\n    setNullForConversation,\n    updateCountUnreadPage,\n} from '../../../reducers/fanpageState/fanpageAction';\nimport { IConversation, IFacebookState } from '../../../reducers/fanpageState/fanpageReducer';\nimport { IStoreState } from '../../../reducers/storeState/storeReducer';\nimport { generateUrlImgFb } from '../../../utils/generate-url-img-fb';\n\ninterface Props {\n    conversation: IConversation;\n}\n\nconst ConversationItem: FC<Props> = ({ conversation }): JSX.Element => {\n    const dispatch = useDispatch();\n    const conversation_select = useSelector(\n        ({ fanpage }: { fanpage: IFacebookState }) => fanpage.conversation\n    );\n\n    const store = useSelector(({ store }: { store: IStoreState }) => store.store);\n\n    const token: any = useSelector(({ auth }: { auth: IAuthState }) => auth.token);\n\n    const page = useSelector(({ fanpage }: { fanpage: IFacebookState }) => fanpage.page);\n\n    const updateYear = moment(conversation.updatedAt).format('YYYY');\n    const nowYear = moment().format('YYYY');\n    const format_date = updateYear === nowYear ? 'DD/MM' : 'DD/MM/YY';\n    const date = moment(conversation.updatedAt).format(format_date);\n\n    const handleSelectConversation = async () => {\n        await dispatch(setNullForConversation());\n        dispatch(selectConversation(conversation));\n        if (conversation.unread) {\n            markAsUnreadApi({\n                storeId: store._id,\n                fbPageId: conversation.fbPageId,\n                token: token.accessToken,\n                conversationId: conversation.fbObjectId,\n                read: true,\n            }).then((res: any) => {\n                dispatch(\n                    updateCountUnreadPage({\n                        fbObjectId: store.activePage.fbObjectId,\n                    })\n                );\n            });\n        }\n    };\n\n    const active = conversation_select && conversation._id === conversation_select._id;\n\n    let className = active ? 'item active' : 'item';\n\n    if (conversation.unread) className += ' unread';\n\n    const classNameInfo = 'info';\n\n    return (\n        <div className={className} onClick={handleSelectConversation}>\n            <div className='item-avatar'>\n                <Avatar\n                    src={generateUrlImgFb(conversation.fbUserId, page.accessToken)}\n                    icon={<UserOutlined />}\n                    size={50}\n                />\n                <span className='icon'>\n                    {conversation.type === 1 ? <MessageIcon /> : <FacebookOutlinedIcon />}\n                </span>\n            </div>\n\n            <div className={classNameInfo}>\n                <div>\n                    <span className='name'>{conversation.fbUsername}</span>{' '}\n                    {conversation.blocked && <MinusCircleOutlined style={{ color: 'red' }} />}\n                </div>\n\n                <span className='message'>{conversation.message}</span>\n\n                <div className='labels-wrap'>\n                    {conversation.labelIds &&\n                        conversation.labelIds.map((item) => (\n                            <span\n                                className='label'\n                                style={{\n                                    background: item.backgroundColor,\n                                    color: item.color,\n                                    fontWeight: conversation.unread ? 700 : 400,\n                                }}\n                                key={item._id}\n                            >\n                                {item.name}\n                            </span>\n                        ))}\n                </div>\n            </div>\n            <div className='item-right'>\n                <div className='date'>{date}</div>\n            </div>\n        </div>\n    );\n};\n\nexport default memo(ConversationItem);\n"]},"metadata":{},"sourceType":"module"}