{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/FacebookClient/src/pages/live-stream/script-step/context.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { find } from 'lodash';\nimport moment from 'moment';\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectPage } from '../../../reducers/livestreamState/livestreamAction';\nimport { templatesComment } from './comment-template';\nimport { templatesMessage } from './message-template';\nimport { templatesWrongKeyword } from './message-template-wrong-keyword';\nimport { templatesWrongPhone } from './message-template-wrong-phone';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initial_livestream = {\n  fbPageId: undefined,\n  type: 0,\n  videoId: undefined,\n  name: undefined,\n  keywords: [],\n  syntax: 0,\n  orderCreationType: 0,\n  autoReplyIfCommentIsCorrect: false,\n  autoReplyIfCommentIsIncorrect: false,\n  autoHideComments: false,\n  commentTemplate: undefined,\n  messageTemplate: undefined,\n  messageTemplateForWrongKeyword: undefined,\n  messageTemplateForWrongPhoneNo: undefined,\n  active: false\n};\nconst initialContext = {\n  livestream: initial_livestream,\n  setLiveStream: livestream => livestream\n};\nconst NewLiveStreamContext = /*#__PURE__*/createContext(initialContext);\nexport const NewLiveStreamProvider = ({\n  children,\n  script\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const fbPageIdState = useSelector(state => state.livestream.fbPageId);\n  const pages = useSelector(state => state.fanpage.pages);\n  const [livestream, setLiveStream] = useState(initial_livestream);\n  const value = {\n    livestream,\n    setLiveStream\n  };\n  useEffect(() => {\n    async function initialSetUpContext() {\n      if (script) {\n        return setLiveStream(script);\n      }\n\n      const page = find(pages, page => page.fbObjectId === fbPageIdState);\n\n      if (page) {\n        const fbPageId = fbPageIdState ? fbPageIdState : page.fbObjectId;\n        const name = `Livestream ngày ${moment().format('DD/MM')} page ${page.name}`;\n        return setLiveStream({ ...livestream,\n          fbPageId,\n          name\n        });\n      }\n\n      const arrPageIds = Object.keys(pages).map(pageId => pageId);\n\n      if (arrPageIds.length > 0) {\n        const pageId = arrPageIds[0];\n        const fbPageId = pages[pageId].fbObjectId;\n        dispatch(selectPage(fbPageId));\n        const name = `Livestream ngày ${moment().format('DD/MM')} page ${pages[pageId].name}`;\n        return setLiveStream({ ...livestream,\n          fbPageId,\n          name\n        });\n      }\n\n      return null;\n    }\n\n    initialSetUpContext();\n  }, [pages]);\n  return /*#__PURE__*/_jsxDEV(NewLiveStreamContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 12\n  }, this);\n};\n\n_s(NewLiveStreamProvider, \"o3Ez8i/1UDygbHecL4qh5wLUUjE=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = NewLiveStreamProvider;\nexport const useNewLiveStream = () => {\n  _s2();\n\n  const {\n    livestream,\n    setLiveStream\n  } = useContext(NewLiveStreamContext);\n  const pages = useSelector(state => state.fanpage.pages);\n\n  const setFbPageId = fbPageId => {\n    const page = find(pages, p => p.fbObjectId === fbPageId);\n    setLiveStream({ ...livestream,\n      fbPageId,\n      name: page ? `Livestream ngày ${moment().format('DD/MM')} page ${page.name}` : undefined\n    });\n  };\n\n  const setNameLiveStream = name => {\n    setLiveStream({ ...livestream,\n      name\n    });\n  };\n\n  const setTypeLivestream = type => {\n    setLiveStream({ ...livestream,\n      type\n    });\n  };\n\n  const addKeyword = keyword => {\n    setLiveStream({ ...livestream,\n      keywords: [...livestream.keywords, keyword]\n    });\n  };\n\n  const removeKeyword = keywordIndex => {\n    setLiveStream({ ...livestream,\n      keywords: livestream.keywords.filter((keyword, index) => index !== keywordIndex)\n    });\n  };\n\n  const updateKeyword = (keyword, keywordIndex) => {\n    const newKeywords = livestream.keywords.map((item, index) => {\n      if (keywordIndex === index) return keyword;\n      return item;\n    });\n    setLiveStream({ ...livestream,\n      keywords: newKeywords\n    });\n  };\n\n  const setSyntaxWithPhone = syntax => {\n    const autoReplyIfCommentIsIncorrect = () => {\n      if (syntax === 0 && livestream.autoReplyIfCommentIsIncorrect) {\n        return false;\n      }\n\n      return livestream.autoReplyIfCommentIsIncorrect;\n    };\n\n    setLiveStream({ ...livestream,\n      syntax,\n      autoReplyIfCommentIsIncorrect: autoReplyIfCommentIsIncorrect()\n    });\n  };\n\n  const setOrderCreationType = orderCreationType => {\n    setLiveStream({ ...livestream,\n      orderCreationType\n    });\n  };\n\n  const setAutoReplyIfCommentIsCorrect = () => {\n    if (!livestream.autoReplyIfCommentIsCorrect) {\n      setLiveStream({ ...livestream,\n        autoReplyIfCommentIsCorrect: !livestream.autoReplyIfCommentIsCorrect,\n        messageTemplate: templatesMessage[0].text,\n        commentTemplate: templatesComment[0].text\n      });\n    } else {\n      setLiveStream({ ...livestream,\n        autoReplyIfCommentIsCorrect: !livestream.autoReplyIfCommentIsCorrect,\n        messageTemplate: undefined,\n        commentTemplate: undefined\n      });\n    }\n  };\n\n  const setAutoReplyIfCommentIsIncorrect = () => {\n    if (!livestream.autoReplyIfCommentIsIncorrect) {\n      setLiveStream({ ...livestream,\n        autoReplyIfCommentIsIncorrect: !livestream.autoReplyIfCommentIsIncorrect,\n        messageTemplateForWrongKeyword: templatesWrongKeyword[0].text,\n        messageTemplateForWrongPhoneNo: templatesWrongPhone[0].text\n      });\n    } else {\n      setLiveStream({ ...livestream,\n        autoReplyIfCommentIsIncorrect: !livestream.autoReplyIfCommentIsIncorrect,\n        messageTemplateForWrongKeyword: undefined,\n        messageTemplateForWrongPhoneNo: undefined\n      });\n    }\n  };\n\n  const setAutoHideComments = () => {\n    setLiveStream({ ...livestream,\n      autoHideComments: !livestream.autoHideComments\n    });\n  };\n\n  const setCommentTemplate = commentTemplate => {\n    setLiveStream({ ...livestream,\n      commentTemplate\n    });\n  };\n\n  const setMessageTemplate = messageTemplate => {\n    setLiveStream({ ...livestream,\n      messageTemplate\n    });\n  };\n\n  const setTemplateCommentIsCorrect = ({\n    commentTemplate,\n    messageTemplate\n  }) => {\n    setLiveStream({ ...livestream,\n      commentTemplate,\n      messageTemplate\n    });\n  };\n\n  const setMessageTemplateForWrongKeyword = messageTemplateForWrongKeyword => {\n    setLiveStream({ ...livestream,\n      messageTemplateForWrongKeyword\n    });\n  };\n\n  const setMessageTemplateForWrongPhoneNo = messageTemplateForWrongPhoneNo => {\n    setLiveStream({ ...livestream,\n      messageTemplateForWrongPhoneNo\n    });\n  };\n\n  const setVideoId = videoId => {\n    setLiveStream({ ...livestream,\n      videoId\n    });\n  };\n\n  const resetLiveStream = () => {\n    setLiveStream(initial_livestream);\n  };\n\n  return {\n    livestream,\n    setLiveStream,\n    setFbPageId,\n    setNameLiveStream,\n    setTypeLivestream,\n    setSyntaxWithPhone,\n    setAutoReplyIfCommentIsCorrect,\n    setAutoReplyIfCommentIsIncorrect,\n    setAutoHideComments,\n    addKeyword,\n    removeKeyword,\n    updateKeyword,\n    setOrderCreationType,\n    setTemplateCommentIsCorrect,\n    setCommentTemplate,\n    setMessageTemplate,\n    setMessageTemplateForWrongKeyword,\n    setMessageTemplateForWrongPhoneNo,\n    setVideoId,\n    resetLiveStream\n  };\n};\n\n_s2(useNewLiveStream, \"fAj45Rk78/Ow0ZqMGxsGJauaJNY=\", false, function () {\n  return [useSelector];\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"NewLiveStreamProvider\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/pages/live-stream/script-step/context.tsx"],"names":["find","moment","React","createContext","useContext","useEffect","useState","useDispatch","useSelector","selectPage","templatesComment","templatesMessage","templatesWrongKeyword","templatesWrongPhone","initial_livestream","fbPageId","undefined","type","videoId","name","keywords","syntax","orderCreationType","autoReplyIfCommentIsCorrect","autoReplyIfCommentIsIncorrect","autoHideComments","commentTemplate","messageTemplate","messageTemplateForWrongKeyword","messageTemplateForWrongPhoneNo","active","initialContext","livestream","setLiveStream","NewLiveStreamContext","NewLiveStreamProvider","children","script","dispatch","fbPageIdState","state","pages","fanpage","value","initialSetUpContext","page","fbObjectId","format","arrPageIds","Object","keys","map","pageId","length","useNewLiveStream","setFbPageId","p","setNameLiveStream","setTypeLivestream","addKeyword","keyword","removeKeyword","keywordIndex","filter","index","updateKeyword","newKeywords","item","setSyntaxWithPhone","setOrderCreationType","setAutoReplyIfCommentIsCorrect","text","setAutoReplyIfCommentIsIncorrect","setAutoHideComments","setCommentTemplate","setMessageTemplate","setTemplateCommentIsCorrect","setMessageTemplateForWrongKeyword","setMessageTemplateForWrongPhoneNo","setVideoId","resetLiveStream"],"mappings":"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","sourcesContent":["import { find } from 'lodash';\nimport moment from 'moment';\nimport React, { createContext, FC, ReactNode, useContext, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectPage } from '../../../reducers/livestreamState/livestreamAction';\nimport { templatesComment } from './comment-template';\nimport { templatesMessage } from './message-template';\nimport { templatesWrongKeyword } from './message-template-wrong-keyword';\nimport { templatesWrongPhone } from './message-template-wrong-phone';\n\ninterface Keyword {\n    productIds: string[];\n    keyword: string;\n}\n\nexport interface LivestreamType {\n    name: string;\n    type: 0 | 1;\n    keywords: Keyword[];\n    syntax: 0 | 1;\n    orderCreationType: 0 | 1 | 2;\n    autoReplyIfCommentIsCorrect: boolean;\n    autoReplyIfCommentIsIncorrect: boolean;\n    autoHideComments: boolean;\n    commentTemplate: string | undefined;\n    messageTemplate: string | undefined;\n    messageTemplateForWrongKeyword: string | undefined;\n    messageTemplateForWrongPhoneNo: string | undefined;\n    active: boolean;\n    status: 0 | 1 | 2 | 3 | 4;\n    videoId?: string;\n    fbPageId: string;\n}\n\nconst initial_livestream = {\n    fbPageId: undefined,\n    type: 0,\n    videoId: undefined,\n    name: undefined,\n    keywords: [],\n    syntax: 0,\n    orderCreationType: 0,\n    autoReplyIfCommentIsCorrect: false,\n    autoReplyIfCommentIsIncorrect: false,\n    autoHideComments: false,\n    commentTemplate: undefined,\n    messageTemplate: undefined,\n    messageTemplateForWrongKeyword: undefined,\n    messageTemplateForWrongPhoneNo: undefined,\n    active: false,\n};\n\nconst initialContext = {\n    livestream: initial_livestream,\n    setLiveStream: (livestream: any) => livestream,\n};\n\nconst NewLiveStreamContext = createContext(initialContext);\n\ninterface Props {\n    children: ReactNode;\n    script?: any;\n}\n\ninterface Params {\n    fbPageId?: string;\n    scriptId?: string;\n}\n\nexport const NewLiveStreamProvider: FC<Props> = ({ children, script }) => {\n    const dispatch = useDispatch();\n    const fbPageIdState = useSelector((state: any) => state.livestream.fbPageId);\n    const pages = useSelector((state: any) => state.fanpage.pages);\n\n    const [livestream, setLiveStream] = useState<any>(initial_livestream);\n\n    const value = {\n        livestream,\n        setLiveStream,\n    };\n\n    useEffect(() => {\n        async function initialSetUpContext() {\n            if (script) {\n                return setLiveStream(script);\n            }\n            const page = find(pages, (page: any) => page.fbObjectId === fbPageIdState);\n\n            if (page) {\n                const fbPageId = fbPageIdState ? fbPageIdState : page.fbObjectId;\n                const name = `Livestream ngày ${moment().format('DD/MM')} page ${page.name}`;\n\n                return setLiveStream({ ...livestream, fbPageId, name });\n            }\n\n            const arrPageIds = Object.keys(pages).map((pageId: string) => pageId);\n\n            if (arrPageIds.length > 0) {\n                const pageId = arrPageIds[0];\n                const fbPageId = pages[pageId].fbObjectId;\n\n                dispatch(selectPage(fbPageId));\n\n                const name = `Livestream ngày ${moment().format('DD/MM')} page ${\n                    pages[pageId].name\n                }`;\n\n                return setLiveStream({ ...livestream, fbPageId, name });\n            }\n\n            return null;\n        }\n\n        initialSetUpContext();\n    }, [pages]);\n\n    return <NewLiveStreamContext.Provider value={value}>{children}</NewLiveStreamContext.Provider>;\n};\n\nexport const useNewLiveStream = () => {\n    const { livestream, setLiveStream } = useContext(NewLiveStreamContext);\n    const pages = useSelector((state: any) => state.fanpage.pages);\n\n    const setFbPageId = (fbPageId: string) => {\n        const page = find(pages, (p: any) => p.fbObjectId === fbPageId);\n\n        setLiveStream({\n            ...livestream,\n            fbPageId,\n            name: page\n                ? `Livestream ngày ${moment().format('DD/MM')} page ${page.name}`\n                : undefined,\n        });\n    };\n\n    const setNameLiveStream = (name: string) => {\n        setLiveStream({\n            ...livestream,\n            name,\n        });\n    };\n\n    const setTypeLivestream = (type: boolean) => {\n        setLiveStream({\n            ...livestream,\n            type,\n        });\n    };\n\n    const addKeyword = (keyword: any) => {\n        setLiveStream({\n            ...livestream,\n            keywords: [...livestream.keywords, keyword],\n        });\n    };\n\n    const removeKeyword = (keywordIndex: number) => {\n        setLiveStream({\n            ...livestream,\n            keywords: livestream.keywords.filter(\n                (keyword: any, index: number) => index !== keywordIndex\n            ),\n        });\n    };\n\n    const updateKeyword = (keyword: any, keywordIndex: number) => {\n        const newKeywords = livestream.keywords.map((item: any, index: number) => {\n            if (keywordIndex === index) return keyword;\n            return item;\n        });\n\n        setLiveStream({\n            ...livestream,\n            keywords: newKeywords,\n        });\n    };\n\n    const setSyntaxWithPhone = (syntax: number) => {\n        const autoReplyIfCommentIsIncorrect = () => {\n            if (syntax === 0 && livestream.autoReplyIfCommentIsIncorrect) {\n                return false;\n            }\n\n            return livestream.autoReplyIfCommentIsIncorrect;\n        };\n        setLiveStream({\n            ...livestream,\n            syntax,\n            autoReplyIfCommentIsIncorrect: autoReplyIfCommentIsIncorrect(),\n        });\n    };\n\n    const setOrderCreationType = (orderCreationType: number) => {\n        setLiveStream({\n            ...livestream,\n            orderCreationType,\n        });\n    };\n\n    const setAutoReplyIfCommentIsCorrect = () => {\n        if (!livestream.autoReplyIfCommentIsCorrect) {\n            setLiveStream({\n                ...livestream,\n                autoReplyIfCommentIsCorrect: !livestream.autoReplyIfCommentIsCorrect,\n                messageTemplate: templatesMessage[0].text,\n                commentTemplate: templatesComment[0].text,\n            });\n        } else {\n            setLiveStream({\n                ...livestream,\n                autoReplyIfCommentIsCorrect: !livestream.autoReplyIfCommentIsCorrect,\n                messageTemplate: undefined,\n                commentTemplate: undefined,\n            });\n        }\n    };\n\n    const setAutoReplyIfCommentIsIncorrect = () => {\n        if (!livestream.autoReplyIfCommentIsIncorrect) {\n            setLiveStream({\n                ...livestream,\n                autoReplyIfCommentIsIncorrect: !livestream.autoReplyIfCommentIsIncorrect,\n                messageTemplateForWrongKeyword: templatesWrongKeyword[0].text,\n                messageTemplateForWrongPhoneNo: templatesWrongPhone[0].text,\n            });\n        } else {\n            setLiveStream({\n                ...livestream,\n                autoReplyIfCommentIsIncorrect: !livestream.autoReplyIfCommentIsIncorrect,\n                messageTemplateForWrongKeyword: undefined,\n                messageTemplateForWrongPhoneNo: undefined,\n            });\n        }\n    };\n\n    const setAutoHideComments = () => {\n        setLiveStream({\n            ...livestream,\n            autoHideComments: !livestream.autoHideComments,\n        });\n    };\n\n    const setCommentTemplate = (commentTemplate: string) => {\n        setLiveStream({\n            ...livestream,\n            commentTemplate,\n        });\n    };\n\n    const setMessageTemplate = (messageTemplate: string) => {\n        setLiveStream({\n            ...livestream,\n            messageTemplate,\n        });\n    };\n\n    const setTemplateCommentIsCorrect = ({\n        commentTemplate,\n        messageTemplate,\n    }: {\n        commentTemplate: string;\n        messageTemplate: string;\n    }) => {\n        setLiveStream({\n            ...livestream,\n            commentTemplate,\n            messageTemplate,\n        });\n    };\n\n    const setMessageTemplateForWrongKeyword = (messageTemplateForWrongKeyword: string) => {\n        setLiveStream({\n            ...livestream,\n            messageTemplateForWrongKeyword,\n        });\n    };\n\n    const setMessageTemplateForWrongPhoneNo = (messageTemplateForWrongPhoneNo: string) => {\n        setLiveStream({\n            ...livestream,\n            messageTemplateForWrongPhoneNo,\n        });\n    };\n\n    const setVideoId = (videoId?: string) => {\n        setLiveStream({\n            ...livestream,\n            videoId,\n        });\n    };\n\n    const resetLiveStream = () => {\n        setLiveStream(initial_livestream);\n    };\n\n    return {\n        livestream,\n        setLiveStream,\n        setFbPageId,\n        setNameLiveStream,\n        setTypeLivestream,\n        setSyntaxWithPhone,\n        setAutoReplyIfCommentIsCorrect,\n        setAutoReplyIfCommentIsIncorrect,\n        setAutoHideComments,\n        addKeyword,\n        removeKeyword,\n        updateKeyword,\n        setOrderCreationType,\n        setTemplateCommentIsCorrect,\n        setCommentTemplate,\n        setMessageTemplate,\n        setMessageTemplateForWrongKeyword,\n        setMessageTemplateForWrongPhoneNo,\n        setVideoId,\n        resetLiveStream,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}