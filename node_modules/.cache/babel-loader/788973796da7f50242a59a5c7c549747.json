{"ast":null,"code":"import types from './orderTypes';\nconst initialState = {\n  loading: false,\n  orders: {\n    data: [],\n    total: 0\n  },\n  type: 'all'\n};\n\nconst orderReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.FETCH_ORDERS_LOADING:\n      return { ...state,\n        loading: true\n      };\n\n    case types.CHANGE_ORDER_TYPE:\n      return { ...state,\n        type: action.payload\n      };\n\n    case types.FETCH_ORDERS_SUCCESS:\n      return { ...state,\n        orders: action.payload,\n        loading: false\n      };\n\n    case types.FETCH_ORDERS_FAILED:\n      return { ...state,\n        loading: false\n      };\n\n    case types.UPDATE_STATUS_ORDER_SUCCESS:\n      {\n        const new_orders_data = state.orders.data.map(order => {\n          if (order._id === action.payload._id) {\n            return { ...order,\n              status: action.payload.status\n            };\n          }\n\n          return order;\n        });\n        return { ...state,\n          orders: { ...state.orders,\n            data: new_orders_data\n          }\n        };\n      }\n\n    case types.DELETE_ORDER_SUCCESS:\n      const cloneOrder = state.orders.data.filter(item => item._id !== action.payload);\n      return { ...state,\n        orders: { ...state.orders,\n          data: cloneOrder\n        },\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default orderReducer;","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/reducers/orderState/orderReducer.ts"],"names":["types","initialState","loading","orders","data","total","type","orderReducer","state","action","FETCH_ORDERS_LOADING","CHANGE_ORDER_TYPE","payload","FETCH_ORDERS_SUCCESS","FETCH_ORDERS_FAILED","UPDATE_STATUS_ORDER_SUCCESS","new_orders_data","map","order","_id","status","DELETE_ORDER_SUCCESS","cloneOrder","filter","item"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,cAAlB;AAIA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,KADQ;AAEjBC,EAAAA,MAAM,EAAE;AACJC,IAAAA,IAAI,EAAE,EADF;AAEJC,IAAAA,KAAK,EAAE;AAFH,GAFS;AAMjBC,EAAAA,IAAI,EAAE;AANW,CAArB;;AASA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAA2C;AAC5D,UAAQA,MAAM,CAACH,IAAf;AACI,SAAKN,KAAK,CAACU,oBAAX;AACI,aAAO,EACH,GAAGF,KADA;AAEHN,QAAAA,OAAO,EAAE;AAFN,OAAP;;AAKJ,SAAKF,KAAK,CAACW,iBAAX;AACI,aAAO,EACH,GAAGH,KADA;AAEHF,QAAAA,IAAI,EAAEG,MAAM,CAACG;AAFV,OAAP;;AAKJ,SAAKZ,KAAK,CAACa,oBAAX;AACI,aAAO,EACH,GAAGL,KADA;AAEHL,QAAAA,MAAM,EAAEM,MAAM,CAACG,OAFZ;AAGHV,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAMJ,SAAKF,KAAK,CAACc,mBAAX;AACI,aAAO,EACH,GAAGN,KADA;AAEHN,QAAAA,OAAO,EAAE;AAFN,OAAP;;AAKJ,SAAKF,KAAK,CAACe,2BAAX;AAAwC;AACpC,cAAMC,eAAe,GAAGR,KAAK,CAACL,MAAN,CAAaC,IAAb,CAAkBa,GAAlB,CAAuBC,KAAD,IAAgB;AAC1D,cAAIA,KAAK,CAACC,GAAN,KAAcV,MAAM,CAACG,OAAP,CAAeO,GAAjC,EAAsC;AAClC,mBAAO,EAAE,GAAGD,KAAL;AAAYE,cAAAA,MAAM,EAAEX,MAAM,CAACG,OAAP,CAAeQ;AAAnC,aAAP;AACH;;AACD,iBAAOF,KAAP;AACH,SALuB,CAAxB;AAOA,eAAO,EACH,GAAGV,KADA;AAEHL,UAAAA,MAAM,EAAE,EACJ,GAAGK,KAAK,CAACL,MADL;AAEJC,YAAAA,IAAI,EAAEY;AAFF;AAFL,SAAP;AAOH;;AAED,SAAKhB,KAAK,CAACqB,oBAAX;AACI,YAAMC,UAAU,GAAGd,KAAK,CAACL,MAAN,CAAaC,IAAb,CAAkBmB,MAAlB,CACdC,IAAD,IAA2BA,IAAI,CAACL,GAAL,KAAaV,MAAM,CAACG,OADhC,CAAnB;AAGA,aAAO,EACH,GAAGJ,KADA;AAEHL,QAAAA,MAAM,EAAE,EAAE,GAAGK,KAAK,CAACL,MAAX;AAAmBC,UAAAA,IAAI,EAAEkB;AAAzB,SAFL;AAGHpB,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAMJ;AACI,aAAOM,KAAP;AAtDR;AAwDH,CAzDD;;AA2DA,eAAeD,YAAf","sourcesContent":["import types from './orderTypes';\n\nimport { IAction } from '../imagesState/interfaces';\n\nconst initialState = {\n    loading: false,\n    orders: {\n        data: [],\n        total: 0,\n    },\n    type: 'all',\n};\n\nconst orderReducer = (state = initialState, action: IAction) => {\n    switch (action.type) {\n        case types.FETCH_ORDERS_LOADING:\n            return {\n                ...state,\n                loading: true,\n            };\n\n        case types.CHANGE_ORDER_TYPE:\n            return {\n                ...state,\n                type: action.payload,\n            };\n\n        case types.FETCH_ORDERS_SUCCESS:\n            return {\n                ...state,\n                orders: action.payload,\n                loading: false,\n            };\n\n        case types.FETCH_ORDERS_FAILED:\n            return {\n                ...state,\n                loading: false,\n            };\n\n        case types.UPDATE_STATUS_ORDER_SUCCESS: {\n            const new_orders_data = state.orders.data.map((order: any) => {\n                if (order._id === action.payload._id) {\n                    return { ...order, status: action.payload.status };\n                }\n                return order;\n            });\n\n            return {\n                ...state,\n                orders: {\n                    ...state.orders,\n                    data: new_orders_data,\n                },\n            };\n        }\n\n        case types.DELETE_ORDER_SUCCESS:\n            const cloneOrder = state.orders.data.filter(\n                (item: { _id: string }) => item._id !== action.payload\n            );\n            return {\n                ...state,\n                orders: { ...state.orders, data: cloneOrder },\n                loading: false,\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default orderReducer;\n"]},"metadata":{},"sourceType":"module"}