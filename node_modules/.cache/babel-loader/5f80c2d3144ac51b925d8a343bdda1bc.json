{"ast":null,"code":"import { find, pick } from 'lodash';\nimport livestreamApi from '../../api/livestream-api';\nimport types from './types';\nexport function loadLiveStreamStart() {\n  return {\n    type: types.LOADING\n  };\n}\nexport function loadLiveStreamSuccess(data) {\n  return {\n    type: types.LOAD_SUCCESS,\n    payload: data\n  };\n}\nexport function loadLiveStreamFailed() {\n  return {\n    type: types.LOAD_SUCCESS\n  };\n}\nexport function selectPage(pageId) {\n  return {\n    type: types.SELECT_PAGE,\n    payload: pageId\n  };\n}\nexport function updateCurrentPageOfPagination(page) {\n  return {\n    type: types.CHANGE_PAGE,\n    payload: page\n  };\n}\nexport function changeName(name) {\n  return {\n    type: types.CHANGE_NAME,\n    payload: name\n  };\n}\nexport function changeDate(dates) {\n  return {\n    type: types.CHANGE_DATE,\n    payload: dates\n  };\n}\nexport function changeFilter(values) {\n  return {\n    type: types.CHANGE_FILTER,\n    payload: values\n  };\n}\nexport function updateScript(script) {\n  return {\n    type: types.UPDATE_SCRIPT,\n    payload: script\n  };\n}\nexport const loadLivestreams = () => async (dispatch, getState) => {\n  dispatch({\n    type: types.LOADING\n  });\n  const {\n    livestream,\n    store,\n    fanpage\n  } = getState();\n\n  const getFbPageId = () => {\n    const {\n      pages\n    } = fanpage;\n    if (Object.keys(pages).length === 0) return null;\n    const page = find(pages, page => page.fbObjectId === livestream.fbPageId);\n\n    if (page) {\n      return page.fbObjectId;\n    }\n\n    return pages[Object.keys(pages)[0]].fbObjectId;\n  };\n\n  const fbPageId = getFbPageId();\n  dispatch(selectPage(fbPageId));\n\n  try {\n    const response = await livestreamApi.loadLiveStream({\n      storeId: store.store._id,\n      fbPageId,\n      ...pick(livestream, ['limit', 'page', 'name', 'startTime', 'endTime', 'sort', 'direction', 'status', 'active'])\n    });\n    dispatch(loadLiveStreamSuccess(response));\n  } catch (error) {\n    dispatch(loadLiveStreamFailed());\n  }\n};","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/reducers/livestreamState/livestreamAction.ts"],"names":["find","pick","livestreamApi","types","loadLiveStreamStart","type","LOADING","loadLiveStreamSuccess","data","LOAD_SUCCESS","payload","loadLiveStreamFailed","selectPage","pageId","SELECT_PAGE","updateCurrentPageOfPagination","page","CHANGE_PAGE","changeName","name","CHANGE_NAME","changeDate","dates","CHANGE_DATE","changeFilter","values","CHANGE_FILTER","updateScript","script","UPDATE_SCRIPT","loadLivestreams","dispatch","getState","livestream","store","fanpage","getFbPageId","pages","Object","keys","length","fbObjectId","fbPageId","response","loadLiveStream","storeId","_id","error"],"mappings":"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","sourcesContent":["import { find, pick } from 'lodash';\nimport livestreamApi from '../../api/livestream-api';\nimport types from './types';\n\nexport function loadLiveStreamStart() {\n    return {\n        type: types.LOADING,\n    };\n}\n\nexport function loadLiveStreamSuccess(data: any) {\n    return {\n        type: types.LOAD_SUCCESS,\n        payload: data,\n    };\n}\n\nexport function loadLiveStreamFailed() {\n    return {\n        type: types.LOAD_SUCCESS,\n    };\n}\n\nexport function selectPage(pageId: string) {\n    return {\n        type: types.SELECT_PAGE,\n        payload: pageId,\n    };\n}\n\nexport function updateCurrentPageOfPagination(page: number) {\n    return {\n        type: types.CHANGE_PAGE,\n        payload: page,\n    };\n}\nexport function changeName(name: string) {\n    return {\n        type: types.CHANGE_NAME,\n        payload: name,\n    };\n}\n\nexport function changeDate(dates: number[]) {\n    return {\n        type: types.CHANGE_DATE,\n        payload: dates,\n    };\n}\n\nexport function changeFilter(values: any) {\n    return {\n        type: types.CHANGE_FILTER,\n        payload: values,\n    };\n}\n\nexport function updateScript(script: any) {\n    return {\n        type: types.UPDATE_SCRIPT,\n        payload: script,\n    };\n}\n\nexport const loadLivestreams = () => async (dispatch: any, getState: any) => {\n    dispatch({ type: types.LOADING });\n\n    const { livestream, store, fanpage } = getState();\n\n    const getFbPageId = () => {\n        const { pages } = fanpage;\n        if (Object.keys(pages).length === 0) return null;\n\n        const page = find(pages, (page: any) => page.fbObjectId === livestream.fbPageId);\n\n        if (page) {\n            return page.fbObjectId;\n        }\n\n        return pages[Object.keys(pages)[0]].fbObjectId;\n    };\n\n    const fbPageId = getFbPageId();\n\n    dispatch(selectPage(fbPageId));\n\n    try {\n        const response = await livestreamApi.loadLiveStream({\n            storeId: store.store._id,\n            fbPageId,\n            ...pick(livestream, [\n                'limit',\n                'page',\n                'name',\n                'startTime',\n                'endTime',\n                'sort',\n                'direction',\n                'status',\n                'active',\n            ]),\n        });\n\n        dispatch(loadLiveStreamSuccess(response));\n    } catch (error) {\n        dispatch(loadLiveStreamFailed());\n    }\n};\n"]},"metadata":{},"sourceType":"module"}