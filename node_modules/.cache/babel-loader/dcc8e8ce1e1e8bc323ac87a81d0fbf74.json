{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/FacebookClient/src/pages/conversation/conversation-detail/context.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { pick } from 'lodash';\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { loadComments, loadMessages } from '../../../api/conversation-api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  loading: false,\n  messages: [],\n  postContent: '',\n  text: '',\n  textChat: '',\n  labels: [],\n  labelIds: [],\n  images: [],\n  message_sending: [],\n  images_sending: [],\n  isFocus: false,\n  next: '',\n  isNewMessage: false\n};\nconst initialContext = {\n  state: initialState,\n  setState: state => state\n};\nconst Context = /*#__PURE__*/createContext(initialContext);\n\nconst formatMessages = ({\n  arr,\n  type\n}) => arr.map(item => ({ ...item,\n  type\n}));\n\nconst ProviderContext = ({\n  children\n}) => {\n  _s();\n\n  const conversation = useSelector(({\n    fanpage\n  }) => fanpage.conversation);\n  const originSocketMessage = useSelector(({\n    fanpage\n  }) => fanpage.originSocketMessage);\n  const store = useSelector(({\n    store\n  }) => store.store);\n  const token = useSelector(({\n    auth\n  }) => auth.token);\n  const labelsSetting = useSelector(state => state.label.labels);\n  const [state, setState] = useState(initialState);\n\n  const toggleLoading = value => setState({ ...state,\n    loading: value,\n    messages: []\n  });\n\n  useEffect(() => {\n    toggleLoading(true);\n\n    async function loadCoversationList() {\n      toggleLoading(true);\n\n      try {\n        const labels = Object.keys(labelsSetting).map(key => ({ ...labelsSetting[key]\n        }));\n\n        if (conversation.type === 1) {\n          const messagesResponse = await loadMessages({ ...pick(conversation, ['fbObjectId', 'fbPageId']),\n            storeId: store._id,\n            token: token.accessToken\n          });\n          const messages = formatMessages({\n            arr: messagesResponse.data,\n            type: 1\n          }).reverse();\n          return setState({ ...state,\n            next: messagesResponse.next,\n            messages,\n            loading: false,\n            postContent: '',\n            labels,\n            labelIds: conversation.labelIds || []\n          });\n        }\n\n        let conversationId = conversation.fbObjectId;\n        const commentsResponse = await loadComments({\n          conversationId,\n          ...pick(conversation, ['fbPageId']),\n          storeId: store._id,\n          token: token.accessToken\n        });\n        const messages = formatMessages({\n          arr: (commentsResponse.data || []).reverse(),\n          type: 2\n        });\n        return setState({ ...state,\n          messages,\n          loading: false,\n          postContent: '',\n          labels,\n          labelIds: conversation.labelIds || [],\n          next: commentsResponse.next\n        });\n      } catch (error) {\n        toggleLoading(false);\n      }\n    }\n\n    if (conversation) {\n      loadCoversationList();\n    }\n  }, [conversation]);\n  const value = {\n    state,\n    setState\n  };\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ProviderContext, \"Zp86UpQ9SWRgYrv6rxzfSIbXHgI=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = ProviderContext;\n\nconst useConversationDetail = () => {\n  _s2();\n\n  const value = useContext(Context);\n  const {\n    state,\n    setState\n  } = value;\n\n  const setMessages = messages => {\n    setState({ ...state,\n      messages\n    });\n  };\n\n  const loadMoreMessages = (dataMessages, next) => {\n    const messages = [...dataMessages, ...state.messages];\n    setState({ ...state,\n      messages,\n      next\n    });\n  };\n\n  const updateMessage = message => {\n    const index = (state.messages || []).findIndex(o => o.id === message.id);\n    let messages = [...state.messages];\n\n    if (index === -1) {\n      messages = [...state.messages, message];\n    }\n\n    setState({ ...state,\n      messages\n    });\n  };\n\n  const deleteMessage = message => {\n    let messages = state.messages.filter(o => o.id !== message.id);\n    messages = messages.filter(o => !o.parent || o.parent && o.parent.id !== message.id);\n    setState({ ...state,\n      messages\n    });\n  };\n\n  const getComments = async (conversationId, fbPageId, storeId, token) => {\n    setState({ ...state,\n      loading: true\n    });\n    const commentsResponse = await loadComments({\n      conversationId,\n      fbPageId,\n      storeId,\n      token\n    });\n    const messages = formatMessages({\n      arr: commentsResponse.data,\n      type: 2\n    });\n    setState({ ...state,\n      messages,\n      next: commentsResponse.next,\n      loading: false\n    });\n  };\n\n  const changeText = text => {\n    setState({ ...state,\n      text\n    });\n  };\n\n  const changeTextChat = textChat => {\n    setState({ ...state,\n      textChat\n    });\n  };\n\n  const updateLabels = label => {\n    const data = state.labelIds.filter(item => item._id === label._id);\n\n    if (data.length > 0) {\n      const labelIds = state.labelIds.filter(item => item._id !== label._id);\n      setState({ ...state,\n        labelIds\n      });\n    } else {\n      const labelIds = [...state.labelIds, label];\n      setState({ ...state,\n        labelIds\n      });\n    }\n  };\n\n  const setImageSend = images => {\n    setState({ ...state,\n      images,\n      isFocus: true\n    });\n  };\n\n  const setImageSending = images => {\n    setState({ ...state,\n      images_sending: images\n    });\n  };\n\n  const changeIsFocus = value => {\n    setState({ ...state,\n      isFocus: value\n    });\n  };\n\n  const setIsNewMessage = value => {\n    setState({ ...state,\n      isNewMessage: value\n    });\n  };\n\n  const setIdMessage = data => {\n    const index = (state.messages || []).findIndex(o => o.id === data.fakeId);\n\n    if (index !== -1) {\n      state.messages[index].id = data.realId;\n    }\n\n    setState({ ...state,\n      messages: [...state.messages]\n    });\n  };\n\n  const setMessageSending = message => {\n    setState({ ...state,\n      messages: [...state.messages, message],\n      text: '',\n      isNewMessage: true\n    });\n  };\n\n  const setMessagesSending = messages => {\n    setState({ ...state,\n      messages: [...state.messages, ...messages],\n      text: '',\n      isNewMessage: true\n    });\n  };\n\n  const removeMessageError = message => {\n    const messages = state.messages.filter(m => m.id !== message.id);\n    setState({ ...state,\n      messages,\n      text: ''\n    });\n  };\n\n  const resetMessageSending = () => {\n    setState({ ...state,\n      message_sending: []\n    });\n  };\n\n  return { ...state,\n    setMessages,\n    loadMoreMessages,\n    setIsNewMessage,\n    updateMessage,\n    deleteMessage,\n    changeText,\n    changeTextChat,\n    updateLabels,\n    setImageSend,\n    changeIsFocus,\n    setImageSending,\n    setMessageSending,\n    resetMessageSending,\n    removeMessageError,\n    setMessagesSending,\n    getComments,\n    setIdMessage\n  };\n};\n\n_s2(useConversationDetail, \"ksutO2/Ix3UeCrGnhyM+QEP505Y=\");\n\nexport { ProviderContext, useConversationDetail };\n\nvar _c;\n\n$RefreshReg$(_c, \"ProviderContext\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/pages/conversation/conversation-detail/context.tsx"],"names":["pick","React","createContext","useContext","useEffect","useState","useSelector","loadComments","loadMessages","initialState","loading","messages","postContent","text","textChat","labels","labelIds","images","message_sending","images_sending","isFocus","next","isNewMessage","initialContext","state","setState","Context","formatMessages","arr","type","map","item","ProviderContext","children","conversation","fanpage","originSocketMessage","store","token","auth","labelsSetting","label","toggleLoading","value","loadCoversationList","Object","keys","key","messagesResponse","storeId","_id","accessToken","data","reverse","conversationId","fbObjectId","commentsResponse","error","useConversationDetail","setMessages","loadMoreMessages","dataMessages","updateMessage","message","index","findIndex","o","id","deleteMessage","filter","parent","getComments","fbPageId","changeText","changeTextChat","updateLabels","length","setImageSend","setImageSending","changeIsFocus","setIsNewMessage","setIdMessage","fakeId","realId","setMessageSending","setMessagesSending","removeMessageError","m","resetMessageSending"],"mappings":"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","sourcesContent":["import { pick } from 'lodash';\nimport React, { createContext, FC, ReactNode, useContext, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { loadComments, loadMessages } from '../../../api/conversation-api';\nimport { ILabel } from '../../../collections/label';\nimport { IAuthState } from '../../../reducers/authState/authReducer';\nimport { IConversation, IFacebookState } from '../../../reducers/fanpageState/fanpageReducer';\nimport { IStoreState } from '../../../reducers/storeState/storeReducer';\n\nexport interface Message {\n    from: { name: string; email: string; id: string };\n    created_time: string;\n    id: string;\n    message: string;\n    attachments?: {\n        data: any[];\n    };\n    type?: number;\n    parent?: any;\n}\n\nexport interface Comment {\n    created_time: string;\n    from: {\n        id: string;\n        name?: string;\n    };\n    id: string;\n    message: string;\n    type?: number;\n    text: string;\n    parent?: any;\n}\n\ninterface IState {\n    loading: boolean;\n    messages: any | never[];\n}\n\nconst initialState = {\n    loading: false,\n    messages: [] as Message[],\n    postContent: '',\n    text: '',\n    textChat: '',\n    labels: [] as ILabel[],\n    labelIds: [] as any[],\n    images: [],\n    message_sending: [],\n    images_sending: [],\n    isFocus: false,\n    next: '',\n    isNewMessage: false,\n};\n\nconst initialContext = {\n    state: initialState,\n    setState: (state: any): any => state,\n};\n\nconst Context = createContext(initialContext);\n\ninterface Props {\n    children: ReactNode;\n}\ntype Item = Comment | Message;\n\nconst formatMessages = ({ arr, type }: { arr: any[]; type: number }): any =>\n    arr.map((item: any) => ({ ...item, type }));\n\nconst ProviderContext: FC<Props> = ({ children }) => {\n    const conversation: IConversation = useSelector(\n        ({ fanpage }: { fanpage: IFacebookState }) => fanpage.conversation\n    );\n\n    const originSocketMessage: any = useSelector(\n        ({ fanpage }: { fanpage: IFacebookState }) => fanpage.originSocketMessage\n    );\n\n    const store = useSelector(({ store }: { store: IStoreState }) => store.store);\n\n    const token: any = useSelector(({ auth }: { auth: IAuthState }) => auth.token);\n\n    const labelsSetting = useSelector((state: any) => state.label.labels);\n\n    const [state, setState] = useState(initialState);\n\n    const toggleLoading = (value: boolean) => setState({ ...state, loading: value, messages: [] });\n\n    useEffect(() => {\n        toggleLoading(true);\n        async function loadCoversationList() {\n            toggleLoading(true);\n            try {\n                const labels = Object.keys(labelsSetting).map((key: string) => ({\n                    ...labelsSetting[key],\n                }));\n                if (conversation.type === 1) {\n                    const messagesResponse = await loadMessages({\n                        ...pick(conversation, ['fbObjectId', 'fbPageId']),\n                        storeId: store._id,\n                        token: token.accessToken,\n                    });\n\n                    const messages = formatMessages({\n                        arr: messagesResponse.data,\n                        type: 1,\n                    }).reverse();\n\n                    return setState({\n                        ...state,\n                        next: messagesResponse.next,\n                        messages,\n                        loading: false,\n                        postContent: '',\n                        labels,\n                        labelIds: conversation.labelIds || [],\n                    });\n                }\n\n                let conversationId = conversation.fbObjectId;\n                const commentsResponse = await loadComments({\n                    conversationId,\n                    ...pick(conversation, ['fbPageId']),\n                    storeId: store._id,\n                    token: token.accessToken,\n                });\n\n                const messages = formatMessages({\n                    arr: (commentsResponse.data || []).reverse(),\n                    type: 2,\n                });\n                return setState({\n                    ...state,\n                    messages,\n                    loading: false,\n                    postContent: '',\n                    labels,\n                    labelIds: conversation.labelIds || [],\n                    next: commentsResponse.next,\n                });\n            } catch (error) {\n                toggleLoading(false);\n            }\n        }\n\n        if (conversation) {\n            loadCoversationList();\n        }\n    }, [conversation]);\n\n    const value = { state, setState };\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n};\n\nconst useConversationDetail = () => {\n    const value = useContext(Context);\n\n    const { state, setState } = value;\n\n    const setMessages = (messages: Message | Comment) => {\n        setState({ ...state, messages });\n    };\n\n    const loadMoreMessages = (dataMessages: Message[] | Comment[], next: string) => {\n        const messages = [...dataMessages, ...state.messages];\n        setState({ ...state, messages, next });\n    };\n\n    const updateMessage = (message: any) => {\n        const index = (state.messages || []).findIndex((o) => o.id === message.id);\n        let messages = [...state.messages];\n        if (index === -1) {\n            messages = [...state.messages, message];\n        }\n        setState({ ...state, messages });\n    };\n\n    const deleteMessage = (message: { id: string }) => {\n        let messages = state.messages.filter((o) => o.id !== message.id);\n        messages = messages.filter((o) => !o.parent || (o.parent && o.parent.id !== message.id));\n        setState({ ...state, messages });\n    };\n\n    const getComments = async (\n        conversationId: string,\n        fbPageId: string,\n        storeId: string,\n        token: string\n    ) => {\n        setState({ ...state, loading: true });\n        const commentsResponse = await loadComments({\n            conversationId,\n            fbPageId,\n            storeId,\n            token,\n        });\n\n        const messages = formatMessages({\n            arr: commentsResponse.data,\n            type: 2,\n        });\n\n        setState({ ...state, messages, next: commentsResponse.next, loading: false });\n    };\n\n    const changeText = (text: string) => {\n        setState({ ...state, text });\n    };\n\n    const changeTextChat = (textChat: string) => {\n        setState({ ...state, textChat });\n    };\n\n    const updateLabels = (label: ILabel) => {\n        const data = state.labelIds.filter((item) => item._id === label._id);\n        if (data.length > 0) {\n            const labelIds = state.labelIds.filter((item) => item._id !== label._id);\n            setState({ ...state, labelIds });\n        } else {\n            const labelIds = [...state.labelIds, label];\n            setState({ ...state, labelIds });\n        }\n    };\n\n    const setImageSend = (images: any[]) => {\n        setState({ ...state, images, isFocus: true });\n    };\n\n    const setImageSending = (images: any[]) => {\n        setState({ ...state, images_sending: images });\n    };\n\n    const changeIsFocus = (value: boolean) => {\n        setState({ ...state, isFocus: value });\n    };\n\n    const setIsNewMessage = (value: boolean) => {\n        setState({ ...state, isNewMessage: value });\n    };\n\n    const setIdMessage = (data: any) => {\n        const index = (state.messages || []).findIndex((o) => o.id === data.fakeId);\n        if (index !== -1) {\n            state.messages[index].id = data.realId;\n        }\n        setState({\n            ...state,\n            messages: [...state.messages],\n        });\n    };\n\n    const setMessageSending = (message: any) => {\n        setState({\n            ...state,\n            messages: [...state.messages, message],\n            text: '',\n            isNewMessage: true,\n        });\n    };\n\n    const setMessagesSending = (messages: any) => {\n        setState({\n            ...state,\n            messages: [...state.messages, ...messages],\n            text: '',\n            isNewMessage: true,\n        });\n    };\n\n    const removeMessageError = (message: any) => {\n        const messages = state.messages.filter((m: any) => m.id !== message.id);\n        setState({ ...state, messages, text: '' });\n    };\n\n    const resetMessageSending = () => {\n        setState({ ...state, message_sending: [] });\n    };\n\n    return {\n        ...state,\n        setMessages,\n        loadMoreMessages,\n        setIsNewMessage,\n        updateMessage,\n        deleteMessage,\n        changeText,\n        changeTextChat,\n        updateLabels,\n        setImageSend,\n        changeIsFocus,\n        setImageSending,\n        setMessageSending,\n        resetMessageSending,\n        removeMessageError,\n        setMessagesSending,\n        getComments,\n        setIdMessage,\n    };\n};\n\nexport { ProviderContext, useConversationDetail };\n"]},"metadata":{},"sourceType":"module"}