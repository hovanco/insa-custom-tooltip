{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/FacebookClient/src/pages/report/report-label/context.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { pick } from 'lodash';\nimport React, { createContext, useContext, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport reportApi from '../../../api/report-api';\nimport { getEndTime, getStartTime } from '../util';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialContext = {\n  type: 'month',\n  date: Date.now(),\n  pageId: null,\n  loading: false,\n  data: null\n};\nconst initilState = {\n  state: initialContext,\n  setState: state => state\n};\nconst ReportLabelContext = /*#__PURE__*/createContext(initilState);\n\nconst ProviderReportLabel = ({\n  children\n}) => {\n  _s();\n\n  const [state, setState] = useState(initialContext);\n  return /*#__PURE__*/_jsxDEV(ReportLabelContext.Provider, {\n    value: {\n      state,\n      setState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ProviderReportLabel, \"bqpcwmhiZC3i2GZ8TzQkJ+FcbGI=\");\n\n_c = ProviderReportLabel;\n\nconst useReportLabelContext = () => {\n  _s2();\n\n  const value = useContext(ReportLabelContext);\n  const store = useSelector(state => state.store.store);\n  const token = useSelector(state => state.auth.token);\n  const pages = useSelector(state => state.fanpage.pages);\n  const {\n    state,\n    setState\n  } = value;\n\n  const selectDateType = type => {\n    setState({ ...state,\n      type,\n      date: Date.now()\n    });\n  };\n\n  const selectDate = date => {\n    setState({ ...state,\n      date\n    });\n  };\n\n  const selectPage = pageId => {\n    setState({ ...state,\n      pageId: pages[pageId].fbObjectId\n    });\n  };\n\n  const handleFilter = async () => {\n    setState({ ...state,\n      loading: true\n    });\n\n    try {\n      const arg = pick(state, ['type', 'date']);\n      const data = {\n        storeId: store._id,\n        pageId: state.pageId || '',\n        startTime: getStartTime(arg),\n        endTime: getEndTime(arg),\n        token: token.accessToken\n      };\n      const response = await reportApi.reportLabel(data);\n      setState({ ...state,\n        data: response,\n        loading: false\n      });\n    } catch (error) {\n      setState({ ...state,\n        loading: false\n      });\n    }\n  };\n\n  return { ...state,\n    selectDateType,\n    selectDate,\n    handleFilter,\n    selectPage\n  };\n};\n\n_s2(useReportLabelContext, \"laZPalPHv9hgt/tZBAZS9mFCG48=\", false, function () {\n  return [useSelector, useSelector, useSelector];\n});\n\nexport { ProviderReportLabel, useReportLabelContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"ProviderReportLabel\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/pages/report/report-label/context.tsx"],"names":["pick","React","createContext","useContext","useState","useSelector","reportApi","getEndTime","getStartTime","initialContext","type","date","Date","now","pageId","loading","data","initilState","state","setState","ReportLabelContext","ProviderReportLabel","children","useReportLabelContext","value","store","token","auth","pages","fanpage","selectDateType","selectDate","selectPage","fbObjectId","handleFilter","arg","storeId","_id","startTime","endTime","accessToken","response","reportLabel","error"],"mappings":"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","sourcesContent":["import { pick } from 'lodash';\nimport React, { createContext, FC, ReactNode, useContext, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport reportApi from '../../../api/report-api';\nimport { Page } from '../../../reducers/fanpageState/fanpageReducer';\nimport { getEndTime, getStartTime } from '../util';\n\ninterface IContext {\n    type: string;\n    date: number | any[];\n    loading: boolean;\n    pageId: any;\n    data: any;\n}\n\nconst initialContext: IContext = {\n    type: 'month',\n    date: Date.now(),\n    pageId: null,\n    loading: false,\n    data: null,\n};\n\ninterface IState {\n    state: IContext;\n    setState: (state: IContext) => void;\n}\n\nconst initilState: IState = {\n    state: initialContext,\n    setState: (state) => state,\n};\n\nconst ReportLabelContext = createContext<IState>(initilState);\n\nconst ProviderReportLabel: FC<{ children: ReactNode }> = ({ children }) => {\n    const [state, setState] = useState(initialContext);\n\n    return (\n        <ReportLabelContext.Provider value={{ state, setState }}>\n            {children}\n        </ReportLabelContext.Provider>\n    );\n};\n\nconst useReportLabelContext = () => {\n    const value = useContext(ReportLabelContext);\n    const store = useSelector((state: any) => state.store.store);\n    const token = useSelector((state: any) => state.auth.token);\n    const pages = useSelector((state: any) => state.fanpage.pages);\n\n    const { state, setState } = value;\n\n    const selectDateType = (type: string) => {\n        setState({ ...state, type, date: Date.now() });\n    };\n\n    const selectDate = (date: any) => {\n        setState({ ...state, date });\n    };\n\n    const selectPage = (pageId: string) => {\n        setState({ ...state, pageId: (pages[pageId] as Page).fbObjectId });\n    };\n\n    const handleFilter = async () => {\n        setState({ ...state, loading: true });\n        try {\n            const arg = pick(state, ['type', 'date']);\n\n            const data = {\n                storeId: store._id,\n                pageId: state.pageId || '',\n                startTime: getStartTime(arg),\n                endTime: getEndTime(arg),\n                token: token.accessToken,\n            };\n            const response = await reportApi.reportLabel(data);\n            setState({ ...state, data: response, loading: false });\n        } catch (error) {\n            setState({ ...state, loading: false });\n        }\n    };\n\n    return {\n        ...state,\n        selectDateType,\n        selectDate,\n        handleFilter,\n        selectPage,\n    };\n};\n\nexport { ProviderReportLabel, useReportLabelContext };\n"]},"metadata":{},"sourceType":"module"}