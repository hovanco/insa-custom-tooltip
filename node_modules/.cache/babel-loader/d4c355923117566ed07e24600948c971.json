{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/FacebookClient/src/pages/live-stream/script/btn-save.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, message } from 'antd';\nimport { find, get, isEmpty, omit, pick, trim } from 'lodash';\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { updateOrder } from '../../../api/order-api';\nimport storeApi from '../../../api/store-api';\nimport { useOrder } from '../../conversation/conversation-customer/context-order';\nimport { getFee } from '../../conversation/conversation-customer/util';\nimport livestreamApi from '../../../api/livestream-api';\nimport shippingApi from '../../../api/shipping-api';\nimport { EDeliveryDiscountBy, EDeliveryServiceIds } from '../../../collections/order';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar errorMsg;\n\n(function (errorMsg) {\n  errorMsg[\"INVALID_PRODUCT_QUANTITY\"] = \"INVALID_PRODUCT_QUANTITY\";\n})(errorMsg || (errorMsg = {}));\n\nconst BtnSave = ({\n  title = 'Giao hàng',\n  fbPageId,\n  customerId,\n  isNew = false,\n  scriptId,\n  toggle,\n  reloadCustomer\n}) => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const store = useSelector(state => state.store.store);\n  const token = useSelector(state => state.auth.token);\n  const pages = useSelector(state => state.fanpage.pages);\n  const {\n    order\n  } = useOrder();\n\n  const createOrderShip = async newOrder => {\n    const totalWeight = newOrder.products.reduce((value, o) => o.productId.weight * o.count + value, 0);\n    let minWeight = newOrder.deliveryOptions.serviceId == 1 ? 10 : 1;\n    let maxWeight = newOrder.deliveryOptions.serviceId == 1 ? 20000 : 1600000;\n\n    if (totalWeight < minWeight) {\n      message.error(`Tổng khối lượng của sản phẩm chưa đạt mức tối thiểu ${minWeight}g`);\n      return;\n    } else if (totalWeight > maxWeight) {\n      message.error(`Tổng khối lượng của sản phẩm vượt mức tối đa ${maxWeight / 1000}kg`);\n      return;\n    }\n\n    const response = await shippingApi.toggleCreateOrderShip({\n      token: token.accessToken,\n      storeId: store._id,\n      orderId: newOrder._id,\n      cancel: false,\n      warehouseId: newOrder.warehouseId\n    });\n    return response;\n  };\n\n  const createNewOrder = async () => {\n    try {\n      setLoading(false);\n      const page = find(pages, p => p.fbObjectId === fbPageId);\n\n      if (isEmpty(customerId)) {\n        const dataCustomer = { ...pick(order.customer, ['name', 'phoneNo', 'address', 'province', 'district', 'ward']),\n          fbPageId: page._id,\n          fbUserId: order.customer.fbUserId\n        };\n        const newCustomer = await storeApi.createCustomer({\n          token: token.accessToken,\n          storeId: store._id,\n          data: dataCustomer\n        });\n        order.customer = newCustomer;\n      }\n\n      const products = order.products.map(p => pick(p, ['count', 'productId', 'price']));\n      const valueShipmentFeeForCustomer = get(order, 'deliveryOptions.shipmentFeeForCustomer');\n      const shipmentFeeForCustomer = !valueShipmentFeeForCustomer || valueShipmentFeeForCustomer === 0 ? get(order, 'deliveryOptions.shipmentFee') : valueShipmentFeeForCustomer;\n      const data = {\n        products,\n        customer: pick(order.customer, ['_id', 'fbUserId', 'name', 'phoneNo', 'address', 'province', 'district', 'ward']),\n        fbPageId,\n        deliveryOptions: { ...pick(order.deliveryOptions, ['shipmentFee', 'discount', 'discountBy', 'noteForDelivery']),\n          shipmentFeeForCustomer,\n          serviceId: order.deliveryOptions.serviceId || 0,\n          transportType: order.deliveryOptions.transportType || 0,\n          customerNote: order.deliveryOptions.customerNote.length > 0 ? order.deliveryOptions.customerNote : undefined,\n          noteForCustomerCare: order.deliveryOptions.noteForCustomerCare.length > 0 ? order.deliveryOptions.noteForCustomerCare : undefined,\n          feeForReceiver: getFee(order).feeForReceiver,\n          shipmentFeeByTotal: true\n        },\n        warehouseId: order.warehouseId\n      };\n      const response = await storeApi.createOrder({\n        storeId: store._id,\n        token: token.accessToken,\n        data\n      });\n      await livestreamApi.updateOrderIdInComment({\n        storeId: store._id,\n        fbPageId,\n        scriptId,\n        data: {\n          fbUserId: order.customer.fbUserId,\n          orderId: response._id\n        }\n      });\n      const transportType = get(order, 'deliveryOptions.transportType') || 0;\n\n      if (transportType !== 0) {\n        await createOrderShip(response);\n      }\n\n      setLoading(false);\n      message.success('Đã tạo đơn giao hàng');\n      toggle();\n      reloadCustomer();\n    } catch (error) {\n      setLoading(false);\n      message.error('Lỗi tạo đơn giao hàng');\n    }\n  };\n\n  const notValidDelivery = () => {\n    const hasSelectDelivery = order.deliveryOptions.serviceId && order.deliveryOptions.serviceId !== 0;\n\n    if (hasSelectDelivery && !order.deliveryOptions.transportType || hasSelectDelivery && typeof order.deliveryOptions.noteForDelivery === 'undefined') {\n      return true;\n    }\n\n    return false;\n  };\n\n  const checkValid = () => {\n    const serviceId = get(order, 'deliveryOptions.serviceId');\n    const is3ndShipment = [EDeliveryServiceIds.GHTK, EDeliveryServiceIds.GHN].includes(serviceId);\n    if (order.customer.name.length === 0 || !order.customer.phoneNo || order.customer.phoneNo.length === 0 || is3ndShipment && !trim(get(order, 'customer.address')) || typeof serviceId === 'undefined' || typeof order.customer.province === 'undefined' || typeof order.customer.district === 'undefined' || typeof order.customer.ward === 'undefined' || typeof order.warehouseId === 'undefined' || order.products.length === 0 || notValidDelivery()) return false;\n    return true;\n  };\n\n  const handleUpdateOrder = async () => {\n    setLoading(true);\n    const products = order.products.map(p => {\n      return {\n        count: p.count,\n        productId: p._id || p.productId,\n        price: p.price\n      };\n    });\n    const {\n      feeForReceiver\n    } = getFee(order);\n    const shipmentFeeForCustomer = get(order, 'deliveryOptions.shipmentFeeForCustomer', 0) === 0 ? get(order, 'deliveryOptions.shipmentFee', 0) : get(order, 'deliveryOptions.shipmentFeeForCustomer', 0);\n\n    try {\n      const deliveryOptions = { ...pick(order.deliveryOptions, ['discount', 'discountBy', 'serviceId', 'shipmentFee', 'shipmentFeeByTotal', 'transportType', 'noteForDelivery']),\n        shipmentFeeForCustomer,\n        feeForReceiver,\n        customerNote: order.deliveryOptions.customerNote && order.deliveryOptions.customerNote.length > 0 ? order.deliveryOptions.customerNote : undefined,\n        noteForCustomerCare: order.deliveryOptions.noteForCustomerCare && order.deliveryOptions.noteForCustomerCare.length > 0 ? order.deliveryOptions.noteForCustomerCare : undefined,\n        shipmentOrderId: order.deliveryOptions.shipmentOrderId ? order.deliveryOptions.shipmentOrderId : undefined\n      };\n      let data = {\n        customer: omit(order.customer, ['fbUserId', 'provinceName', 'districtName', 'wardName', 'note']),\n        deliveryOptions,\n        products,\n        warehouseId: order.warehouseId,\n        isDraft: false\n      };\n      const response = await updateOrder({\n        token: token.accessToken,\n        storeId: store._id,\n        orderId: order._id,\n        data\n      });\n      const serviceId = get(response, 'deliveryOptions.serviceId');\n\n      if ([EDeliveryServiceIds.GHN, EDeliveryServiceIds.GHTK].includes(serviceId)) {\n        await createOrderShip(response);\n      }\n\n      message.success('Đã tạo đơn giao hàng');\n      setLoading(false);\n      toggle();\n      reloadCustomer();\n    } catch (error) {\n      const msg = get(error, 'response.data.message');\n\n      switch (msg) {\n        case errorMsg.INVALID_PRODUCT_QUANTITY:\n          message.error('Số lượng sản phẩm không hợp lệ');\n          break;\n\n        default:\n          message.error('Lỗi tạo đơn giao hàng');\n          break;\n      }\n\n      setLoading(false);\n    }\n  };\n\n  const maxDiscount = () => {\n    const {\n      discountBy\n    } = get(order, 'deliveryOptions');\n    let maxValue = 100;\n\n    if (discountBy === EDeliveryDiscountBy.Money) {\n      const products = order.products.map(p => pick(p, ['count', 'productId', 'price']));\n      const productsPrice = products.reduce((value, product) => (product.price || 0) * product.count + value, 0);\n      maxValue = productsPrice;\n    }\n\n    return maxValue;\n  };\n\n  const validOrder = () => {\n    const {\n      discount\n    } = get(order, 'deliveryOptions');\n\n    if (discount > maxDiscount()) {\n      message.error('Giá trị chiết khấu không hợp lệ');\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleOnClick = async () => {\n    if (!validOrder()) {\n      return;\n    }\n\n    if (isNew) {\n      createNewOrder();\n    } else {\n      handleUpdateOrder();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    type: \"primary\",\n    onClick: handleOnClick,\n    loading: loading,\n    disabled: !checkValid(),\n    children: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 356,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BtnSave, \"N6rnet3Ac27XEfKWTLFoU5+kkxI=\", false, function () {\n  return [useSelector, useSelector, useSelector, useOrder];\n});\n\n_c = BtnSave;\nexport default BtnSave;\n\nvar _c;\n\n$RefreshReg$(_c, \"BtnSave\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/pages/live-stream/script/btn-save.tsx"],"names":["Button","message","find","get","isEmpty","omit","pick","trim","React","useState","useSelector","updateOrder","storeApi","useOrder","getFee","livestreamApi","shippingApi","EDeliveryDiscountBy","EDeliveryServiceIds","errorMsg","BtnSave","title","fbPageId","customerId","isNew","scriptId","toggle","reloadCustomer","loading","setLoading","store","state","token","auth","pages","fanpage","order","createOrderShip","newOrder","totalWeight","products","reduce","value","o","productId","weight","count","minWeight","deliveryOptions","serviceId","maxWeight","error","response","toggleCreateOrderShip","accessToken","storeId","_id","orderId","cancel","warehouseId","createNewOrder","page","p","fbObjectId","dataCustomer","customer","fbUserId","newCustomer","createCustomer","data","map","valueShipmentFeeForCustomer","shipmentFeeForCustomer","transportType","customerNote","length","undefined","noteForCustomerCare","feeForReceiver","shipmentFeeByTotal","createOrder","updateOrderIdInComment","success","notValidDelivery","hasSelectDelivery","noteForDelivery","checkValid","is3ndShipment","GHTK","GHN","includes","name","phoneNo","province","district","ward","handleUpdateOrder","price","shipmentOrderId","isDraft","msg","INVALID_PRODUCT_QUANTITY","maxDiscount","discountBy","maxValue","Money","productsPrice","product","validOrder","discount","handleOnClick"],"mappings":"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","sourcesContent":["import { Button, message } from 'antd';\nimport { find, get, isEmpty, omit, pick, trim } from 'lodash';\nimport React, { FC, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { updateOrder } from '../../../api/order-api';\nimport storeApi from '../../../api/store-api';\nimport { useOrder } from '../../conversation/conversation-customer/context-order';\nimport { getFee } from '../../conversation/conversation-customer/util';\nimport livestreamApi from '../../../api/livestream-api';\nimport shippingApi from '../../../api/shipping-api';\nimport { EDeliveryDiscountBy, EDeliveryServiceIds } from '../../../collections/order';\n\nenum errorMsg {\n    INVALID_PRODUCT_QUANTITY = 'INVALID_PRODUCT_QUANTITY',\n}\n\ninterface Props {\n    title?: string;\n    fbPageId: string;\n    customerId?: string;\n    isNew?: boolean;\n    scriptId: string;\n    toggle: () => void;\n    reloadCustomer: () => void;\n}\n\nconst BtnSave: FC<Props> = ({\n    title = 'Giao hàng',\n    fbPageId,\n    customerId,\n    isNew = false,\n    scriptId,\n    toggle,\n    reloadCustomer,\n}) => {\n    const [loading, setLoading] = useState(false);\n    const store = useSelector((state: any) => state.store.store);\n    const token = useSelector((state: any) => state.auth.token);\n    const pages = useSelector((state: any) => state.fanpage.pages);\n\n    const { order } = useOrder();\n\n    const createOrderShip = async (newOrder: any) => {\n        const totalWeight = newOrder.products.reduce(\n            (value: number, o: any) => o.productId.weight * o.count + value,\n            0\n        );\n\n        let minWeight = newOrder.deliveryOptions.serviceId == 1 ? 10 : 1;\n        let maxWeight = newOrder.deliveryOptions.serviceId == 1 ? 20000 : 1600000;\n\n        if (totalWeight < minWeight) {\n            message.error(`Tổng khối lượng của sản phẩm chưa đạt mức tối thiểu ${minWeight}g`);\n            return;\n        } else if (totalWeight > maxWeight) {\n            message.error(`Tổng khối lượng của sản phẩm vượt mức tối đa ${maxWeight / 1000}kg`);\n            return;\n        }\n\n        const response = await shippingApi.toggleCreateOrderShip({\n            token: token.accessToken,\n            storeId: store._id,\n            orderId: newOrder._id,\n            cancel: false,\n            warehouseId: newOrder.warehouseId,\n        });\n\n        return response;\n    };\n\n    const createNewOrder = async () => {\n        try {\n            setLoading(false);\n            const page = find(pages, (p: any) => p.fbObjectId === fbPageId);\n\n            if (isEmpty(customerId)) {\n                const dataCustomer = {\n                    ...pick(order.customer, [\n                        'name',\n                        'phoneNo',\n                        'address',\n                        'province',\n                        'district',\n                        'ward',\n                    ]),\n                    fbPageId: page._id,\n                    fbUserId: order.customer.fbUserId,\n                };\n                const newCustomer = await storeApi.createCustomer({\n                    token: token.accessToken,\n                    storeId: store._id,\n                    data: dataCustomer,\n                });\n\n                order.customer = newCustomer;\n            }\n\n            const products = order.products.map((p: any) =>\n                pick(p, ['count', 'productId', 'price'])\n            );\n\n            const valueShipmentFeeForCustomer = get(\n                order,\n                'deliveryOptions.shipmentFeeForCustomer'\n            );\n\n            const shipmentFeeForCustomer =\n                !valueShipmentFeeForCustomer || valueShipmentFeeForCustomer === 0\n                    ? get(order, 'deliveryOptions.shipmentFee')\n                    : valueShipmentFeeForCustomer;\n\n            const data = {\n                products,\n                customer: pick(order.customer, [\n                    '_id',\n                    'fbUserId',\n                    'name',\n                    'phoneNo',\n                    'address',\n                    'province',\n                    'district',\n                    'ward',\n                ]),\n                fbPageId,\n                deliveryOptions: {\n                    ...pick(order.deliveryOptions, [\n                        'shipmentFee',\n                        'discount',\n                        'discountBy',\n                        'noteForDelivery',\n                    ]),\n                    shipmentFeeForCustomer,\n                    serviceId: order.deliveryOptions.serviceId || 0,\n                    transportType: order.deliveryOptions.transportType || 0,\n                    customerNote:\n                        order.deliveryOptions.customerNote.length > 0\n                            ? order.deliveryOptions.customerNote\n                            : undefined,\n                    noteForCustomerCare:\n                        order.deliveryOptions.noteForCustomerCare.length > 0\n                            ? order.deliveryOptions.noteForCustomerCare\n                            : undefined,\n\n                    feeForReceiver: getFee(order).feeForReceiver,\n                    shipmentFeeByTotal: true,\n                },\n                warehouseId: order.warehouseId,\n            };\n\n            const response = await storeApi.createOrder({\n                storeId: store._id,\n                token: token.accessToken,\n                data,\n            });\n\n            await livestreamApi.updateOrderIdInComment({\n                storeId: store._id,\n                fbPageId,\n                scriptId,\n                data: {\n                    fbUserId: order.customer.fbUserId,\n                    orderId: response._id,\n                },\n            });\n\n            const transportType = get(order, 'deliveryOptions.transportType') || 0;\n\n            if (transportType !== 0) {\n                await createOrderShip(response);\n            } \n\n            setLoading(false);\n            message.success('Đã tạo đơn giao hàng');\n            toggle();\n            reloadCustomer();\n        } catch (error) {\n            setLoading(false);\n            message.error('Lỗi tạo đơn giao hàng');\n        }\n    };\n\n    const notValidDelivery = () => {\n        const hasSelectDelivery =\n            order.deliveryOptions.serviceId && order.deliveryOptions.serviceId !== 0;\n\n        if (\n            (hasSelectDelivery && !order.deliveryOptions.transportType) ||\n            (hasSelectDelivery && typeof order.deliveryOptions.noteForDelivery === 'undefined')\n        ) {\n            return true;\n        }\n\n        return false;\n    };\n\n    const checkValid = () => {\n        const serviceId = get(order, 'deliveryOptions.serviceId');\n        const is3ndShipment = [EDeliveryServiceIds.GHTK, EDeliveryServiceIds.GHN].includes(serviceId);\n\n        if (\n            order.customer.name.length === 0 ||\n            !order.customer.phoneNo ||\n            order.customer.phoneNo.length === 0 ||\n            (is3ndShipment && !trim(get(order, 'customer.address'))) ||\n            typeof serviceId === 'undefined' ||\n            typeof order.customer.province === 'undefined' ||\n            typeof order.customer.district === 'undefined' ||\n            typeof order.customer.ward === 'undefined' ||\n            typeof order.warehouseId === 'undefined' ||\n            order.products.length === 0 ||\n            notValidDelivery()\n        )\n            return false;\n\n        return true;\n    };\n\n    const handleUpdateOrder = async () => {\n        setLoading(true);\n        const products = order.products.map((p: any) => {\n            return {\n                count: p.count,\n                productId: p._id || p.productId,\n                price: p.price,\n            };\n        });\n\n        const { feeForReceiver } = getFee(order);\n\n        const shipmentFeeForCustomer =\n            get(order, 'deliveryOptions.shipmentFeeForCustomer', 0) === 0\n                ? get(order, 'deliveryOptions.shipmentFee', 0)\n                : get(order, 'deliveryOptions.shipmentFeeForCustomer', 0);\n\n        try {\n            const deliveryOptions = {\n                ...pick(order.deliveryOptions, [\n                    'discount',\n                    'discountBy',\n                    'serviceId',\n                    'shipmentFee',\n                    'shipmentFeeByTotal',\n                    'transportType',\n                    'noteForDelivery',\n                ]),\n                shipmentFeeForCustomer,\n                feeForReceiver,\n                customerNote:\n                    order.deliveryOptions.customerNote &&\n                    order.deliveryOptions.customerNote.length > 0\n                        ? order.deliveryOptions.customerNote\n                        : undefined,\n                noteForCustomerCare:\n                    order.deliveryOptions.noteForCustomerCare &&\n                    order.deliveryOptions.noteForCustomerCare.length > 0\n                        ? order.deliveryOptions.noteForCustomerCare\n                        : undefined,\n                shipmentOrderId: (order as any).deliveryOptions.shipmentOrderId\n                    ? (order as any).deliveryOptions.shipmentOrderId\n                    : undefined,\n            };\n\n            let data: any = {\n                customer: omit(order.customer, [\n                    'fbUserId',\n                    'provinceName',\n                    'districtName',\n                    'wardName',\n                    'note',\n                ]),\n                deliveryOptions,\n                products,\n                warehouseId: (order as any).warehouseId,\n                isDraft: false,\n            };\n\n            const response = await updateOrder({\n                token: token.accessToken,\n                storeId: store._id,\n                orderId: (order as any)._id,\n                data,\n            });\n\n            const serviceId = get(response, 'deliveryOptions.serviceId');\n            \n            if ([EDeliveryServiceIds.GHN, EDeliveryServiceIds.GHTK].includes(serviceId)) {\n                await createOrderShip(response);\n            }\n\n            message.success('Đã tạo đơn giao hàng');\n\n            setLoading(false);\n\n            toggle();\n            reloadCustomer();\n        } catch (error) {\n            const msg = get(error, 'response.data.message');\n            switch (msg) {\n                case errorMsg.INVALID_PRODUCT_QUANTITY:\n                    message.error('Số lượng sản phẩm không hợp lệ');\n                    break;\n                default:\n                    message.error('Lỗi tạo đơn giao hàng');\n                    break;\n            }\n\n            setLoading(false);\n        }\n    };\n\n    const maxDiscount = ():number => {\n        const { discountBy } = get(order, 'deliveryOptions');\n        let maxValue = 100;\n\n        if (discountBy === EDeliveryDiscountBy.Money) {\n            const products = order.products.map((p: any) =>\n                pick(p, ['count', 'productId', 'price'])\n            );\n            const productsPrice = products.reduce(\n            (value: number, product) => (product.price as number || 0) * product.count + value,\n            0);\n\n            maxValue = productsPrice;\n        }\n\n        return maxValue;\n    }\n\n    const validOrder = (): boolean => {\n        \n        const { discount } = get(order, 'deliveryOptions');\n\n        if (discount as number > maxDiscount()) {\n\n            message.error('Giá trị chiết khấu không hợp lệ');\n            return false;\n        }\n        \n        return true;\n    }\n\n    const handleOnClick = async () => {\n\n        if (!validOrder()) {\n            return;\n        }\n\n        if (isNew) {\n            createNewOrder();\n        } else {\n            handleUpdateOrder();\n        }\n    };\n\n    return (\n        <Button type='primary' onClick={handleOnClick} loading={loading} disabled={!checkValid()}>\n            {title}\n        </Button>\n    );\n};\n\nexport default BtnSave;\n"]},"metadata":{},"sourceType":"module"}