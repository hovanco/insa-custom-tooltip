{"ast":null,"code":"import axiosClient from './axios-client';\nconst livestreamApi = {\n  createLivestream: async ({\n    storeId,\n    fbPageId,\n    data\n  }) => {\n    const url = `/social-network/v1/stores/${storeId}/facebook-pages/${fbPageId}/livestream-scripts`;\n    const response = await axiosClient({\n      url,\n      method: 'POST',\n      data\n    });\n    return response.data;\n  },\n  copyLivestream: async ({\n    storeId,\n    fbPageId,\n    data\n  }) => {\n    const url = `/social-network/v1/stores/${storeId}/facebook-pages/${fbPageId}/livestream-scripts/copy`;\n    const response = await axiosClient({\n      url,\n      method: 'POST',\n      data\n    });\n    return response.data;\n  },\n  checkEmptyLivestream: async storeId => {\n    const url = `/social-network/v1/stores/${storeId}/livestream-scripts/check-empty`;\n    const response = await axiosClient({\n      url,\n      method: 'GET'\n    });\n    return response.data;\n  },\n  loadLiveStream: async ({\n    storeId,\n    fbPageId,\n    page = 1,\n    limit = 15,\n    name = undefined,\n    startTime = undefined,\n    endTime = undefined,\n    sort = undefined,\n    direction = undefined,\n    status = undefined,\n    active = undefined\n  }) => {\n    const url = `/social-network/v1/stores/${storeId}/facebook-pages/${fbPageId}/livestream-scripts`;\n    const response = await axiosClient({\n      method: 'GET',\n      url,\n      params: {\n        page,\n        limit,\n        name,\n        startTime,\n        endTime,\n        sort,\n        direction,\n        status,\n        active\n      }\n    });\n    return response.data;\n  },\n  loadScript: async ({\n    storeId,\n    fbPageId,\n    scriptId\n  }) => {\n    const url = `/social-network/v1/stores/${storeId}/facebook-pages/${fbPageId}/livestream-scripts/${scriptId}`;\n    const response = await axiosClient({\n      method: 'GET',\n      url\n    });\n    return response.data;\n  },\n  deleteScript: async ({\n    storeId,\n    fbPageId,\n    scriptId\n  }) => {\n    const url = `/social-network/v1/stores/${storeId}/facebook-pages/${fbPageId}/livestream-scripts/${scriptId}`;\n    const response = await axiosClient({\n      method: 'DELETE',\n      url\n    });\n    return response.data;\n  },\n  updateScript: async ({\n    storeId,\n    fbPageId,\n    scriptId,\n    data\n  }) => {\n    const url = `/social-network/v1/stores/${storeId}/facebook-pages/${fbPageId}/livestream-scripts/${scriptId}`;\n    const response = await axiosClient({\n      method: 'PUT',\n      url,\n      data\n    });\n    return response.data;\n  },\n  changeActiveScript: async ({\n    storeId,\n    fbPageId,\n    scriptId,\n    active\n  }) => {\n    const url = `/social-network/v1/stores/${storeId}/facebook-pages/${fbPageId}/livestream-scripts/${scriptId}/active`;\n    const response = await axiosClient({\n      url,\n      method: 'PUT',\n      data: {\n        active\n      }\n    });\n    return response.data;\n  },\n  getVideos: async ({\n    storeId,\n    fbPageId\n  }) => {\n    const url = `/social-network/v1/stores/${storeId}/facebook-pages/${fbPageId}/videos?limit=50`;\n    const response = await axiosClient({\n      method: 'GET',\n      url\n    });\n    return response.data;\n  },\n  getVideo: async ({\n    storeId,\n    fbPageId,\n    videoId\n  }) => {\n    const url = `/social-network/v1/stores/${storeId}/facebook-pages/${fbPageId}/videos/${videoId}`;\n    const response = await axiosClient({\n      method: 'GET',\n      url\n    });\n    return response.data;\n  },\n  getCustomerInLivestream: async ({\n    storeId,\n    fbPageId,\n    scriptId,\n    page,\n    limit,\n    isHasPhoneNo,\n    isHasOrder,\n    search\n  }) => {\n    const url = `/social-network/v1/stores/${storeId}/pages/${fbPageId}/livestream-scripts/${scriptId}/reports/customers`;\n    const response = await axiosClient({\n      method: 'GET',\n      url,\n      params: {\n        page,\n        limit,\n        isHasPhoneNo,\n        isHasOrder,\n        search\n      }\n    });\n    return response.data;\n  },\n  updateOrderIdInComment: async ({\n    storeId,\n    fbPageId,\n    scriptId,\n    data\n  }) => {\n    const url = `/social-network/v1/stores/${storeId}/pages/${fbPageId}/livestream-scripts/${scriptId}/comments`;\n    const response = await axiosClient({\n      url,\n      method: 'PUT',\n      data\n    });\n    return response.data;\n  },\n  checkActiveAndNotUseScripts: async ({\n    storeId,\n    fbPageId\n  }) => {\n    const url = `/social-network/v1/stores/${storeId}/facebook-pages/${fbPageId}/livestream-scripts/check-incoming-scripts`;\n    const response = await axiosClient({\n      method: 'GET',\n      url\n    });\n    return response.data && response.data.result;\n  }\n};\nexport default livestreamApi;","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/api/livestream-api.ts"],"names":["axiosClient","livestreamApi","createLivestream","storeId","fbPageId","data","url","response","method","copyLivestream","checkEmptyLivestream","loadLiveStream","page","limit","name","undefined","startTime","endTime","sort","direction","status","active","params","loadScript","scriptId","deleteScript","updateScript","changeActiveScript","getVideos","getVideo","videoId","getCustomerInLivestream","isHasPhoneNo","isHasOrder","search","updateOrderIdInComment","checkActiveAndNotUseScripts","result"],"mappings":"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","sourcesContent":["import axiosClient from './axios-client';\n\nconst livestreamApi = {\n    createLivestream: async ({\n        storeId,\n        fbPageId,\n        data,\n    }: {\n        storeId: string;\n        fbPageId: string;\n        data: any;\n    }): Promise<any> => {\n        const url = `/social-network/v1/stores/${storeId}/facebook-pages/${fbPageId}/livestream-scripts`;\n        const response = await axiosClient({\n            url,\n            method: 'POST',\n            data,\n        });\n\n        return response.data;\n    },\n\n    copyLivestream: async ({\n        storeId,\n        fbPageId,\n        data,\n    }: {\n        storeId: string;\n        fbPageId: string;\n        data: { scriptId: string; name: string };\n    }): Promise<any> => {\n        const url = `/social-network/v1/stores/${storeId}/facebook-pages/${fbPageId}/livestream-scripts/copy`;\n\n        const response = await axiosClient({\n            url,\n            method: 'POST',\n            data,\n        });\n\n        return response.data;\n    },\n\n    checkEmptyLivestream: async (storeId: string): Promise<any> => {\n        const url = `/social-network/v1/stores/${storeId}/livestream-scripts/check-empty`;\n\n        const response = await axiosClient({\n            url,\n            method: 'GET',\n        });\n\n        return response.data;\n    },\n\n    loadLiveStream: async ({\n        storeId,\n        fbPageId,\n        page = 1,\n        limit = 15,\n        name = undefined,\n        startTime = undefined,\n        endTime = undefined,\n        sort = undefined,\n        direction = undefined,\n        status = undefined,\n        active = undefined,\n    }: {\n        storeId: string;\n        fbPageId: string;\n        page?: number;\n        limit?: number;\n        name?: string;\n        startTime?: number;\n        endTime?: number;\n        sort?: string;\n        direction?: string;\n        status?: number;\n        active?: boolean;\n    }): Promise<any> => {\n        const url = `/social-network/v1/stores/${storeId}/facebook-pages/${fbPageId}/livestream-scripts`;\n\n        const response = await axiosClient({\n            method: 'GET',\n            url,\n            params: {\n                page,\n                limit,\n                name,\n                startTime,\n                endTime,\n                sort,\n                direction,\n                status,\n                active,\n            },\n        });\n\n        return response.data;\n    },\n\n    loadScript: async ({\n        storeId,\n        fbPageId,\n        scriptId,\n    }: {\n        storeId: string;\n        fbPageId: string;\n        scriptId: string;\n    }): Promise<any> => {\n        const url = `/social-network/v1/stores/${storeId}/facebook-pages/${fbPageId}/livestream-scripts/${scriptId}`;\n\n        const response = await axiosClient({\n            method: 'GET',\n            url,\n        });\n\n        return response.data;\n    },\n\n    deleteScript: async ({\n        storeId,\n        fbPageId,\n        scriptId,\n    }: {\n        storeId: string;\n        fbPageId: string;\n        scriptId: string;\n    }): Promise<any> => {\n        const url = `/social-network/v1/stores/${storeId}/facebook-pages/${fbPageId}/livestream-scripts/${scriptId}`;\n\n        const response = await axiosClient({\n            method: 'DELETE',\n            url,\n        });\n\n        return response.data;\n    },\n\n    updateScript: async ({\n        storeId,\n        fbPageId,\n        scriptId,\n        data,\n    }: {\n        storeId: string;\n        fbPageId: string;\n        scriptId: string;\n        data: any;\n    }): Promise<any> => {\n        const url = `/social-network/v1/stores/${storeId}/facebook-pages/${fbPageId}/livestream-scripts/${scriptId}`;\n\n        const response = await axiosClient({\n            method: 'PUT',\n            url,\n            data,\n        });\n\n        return response.data;\n    },\n\n    changeActiveScript: async ({\n        storeId,\n        fbPageId,\n        scriptId,\n        active,\n    }: {\n        storeId: string;\n        fbPageId: string;\n        scriptId: string;\n        active: boolean;\n    }): Promise<any> => {\n        const url = `/social-network/v1/stores/${storeId}/facebook-pages/${fbPageId}/livestream-scripts/${scriptId}/active`;\n\n        const response = await axiosClient({\n            url,\n            method: 'PUT',\n            data: {\n                active,\n            },\n        });\n\n        return response.data;\n    },\n\n    getVideos: async ({\n        storeId,\n        fbPageId,\n    }: {\n        storeId: string;\n        fbPageId: string;\n    }): Promise<any> => {\n        const url = `/social-network/v1/stores/${storeId}/facebook-pages/${fbPageId}/videos?limit=50`;\n\n        const response = await axiosClient({\n            method: 'GET',\n            url,\n        });\n\n        return response.data;\n    },\n    getVideo: async ({\n        storeId,\n        fbPageId,\n        videoId,\n    }: {\n        storeId: string;\n        fbPageId: string;\n        videoId: string;\n    }): Promise<any> => {\n        const url = `/social-network/v1/stores/${storeId}/facebook-pages/${fbPageId}/videos/${videoId}`;\n\n        const response = await axiosClient({\n            method: 'GET',\n            url,\n        });\n\n        return response.data;\n    },\n\n    getCustomerInLivestream: async ({\n        storeId,\n        fbPageId,\n        scriptId,\n        page,\n        limit,\n        isHasPhoneNo,\n        isHasOrder,\n        search,\n    }: {\n        storeId: string;\n        fbPageId: string;\n        scriptId: string;\n        page?: number;\n        limit?: number;\n        isHasPhoneNo?: boolean;\n        isHasOrder?: boolean;\n        search?: string;\n    }): Promise<any> => {\n        const url = `/social-network/v1/stores/${storeId}/pages/${fbPageId}/livestream-scripts/${scriptId}/reports/customers`;\n\n        const response = await axiosClient({\n            method: 'GET',\n            url,\n            params: {\n                page,\n                limit,\n                isHasPhoneNo,\n                isHasOrder,\n                search,\n            },\n        });\n        return response.data;\n    },\n\n    updateOrderIdInComment: async ({\n        storeId,\n        fbPageId,\n        scriptId,\n        data,\n    }: {\n        storeId: string;\n        fbPageId: string;\n        scriptId: string;\n        data: {\n            fbUserId: string;\n            orderId: string;\n        };\n    }): Promise<any> => {\n        const url = `/social-network/v1/stores/${storeId}/pages/${fbPageId}/livestream-scripts/${scriptId}/comments`;\n\n        const response = await axiosClient({\n            url,\n            method: 'PUT',\n            data,\n        });\n\n        return response.data;\n    },\n\n    checkActiveAndNotUseScripts: async ({\n        storeId,\n        fbPageId,\n    }: {\n        storeId: string;\n        fbPageId: string;\n    }): Promise<boolean> => {\n        const url = `/social-network/v1/stores/${storeId}/facebook-pages/${fbPageId}/livestream-scripts/check-incoming-scripts`;\n\n        const response = await axiosClient({\n            method: 'GET',\n            url,\n        });\n        return response.data && response.data.result;\n    },\n};\n\nexport default livestreamApi;\n"]},"metadata":{},"sourceType":"module"}