{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/FacebookClient/src/pages/conversation/conversation-detail/toggle-block-btn.tsx\",\n    _s = $RefreshSig$();\n\nimport { MinusCircleOutlined, ExclamationCircleOutlined } from '@ant-design/icons';\nimport { message, Tooltip, Modal } from 'antd';\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleBlockUser } from '../../../api/conversation-api';\nimport { toggleBlockUser as toggleBlockUserAction } from '../../../reducers/fanpageState/fanpageAction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ToggleBlockBtn = () => {\n  _s();\n\n  const conversation = useSelector(state => state.fanpage.conversation);\n  const store = useSelector(state => state.store.store);\n  const token = useSelector(state => state.auth.token);\n  const [blocked, setBlocked] = useState(() => {\n    if (conversation.blocked) return conversation.blocked;\n    return false;\n  });\n  const dispatch = useDispatch();\n  const {\n    confirm\n  } = Modal;\n  const message_text = {\n    success: `Đã ${blocked ? 'mở khóa' : 'khóa'} tài khoản.`,\n    error: `Lỗi ${blocked ? 'mở khóa' : 'khóa'} tài khoản.`\n  };\n  useEffect(() => {\n    if (conversation) {\n      setBlocked(conversation.blocked || false);\n    }\n  }, [conversation]);\n\n  const showConfirm = () => {\n    confirm({\n      title: blocked ? 'Bạn có thực sự muốn bỏ chặn?' : 'Bạn có thực sự muốn chặn khách hàng?',\n      icon: /*#__PURE__*/_jsxDEV(ExclamationCircleOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 19\n      }, this),\n\n      onOk() {\n        toggleUser();\n      },\n\n      onCancel() {}\n\n    });\n  };\n\n  const toggleUser = async () => {\n    const data = {\n      token: token.accessToken,\n      pageId: conversation.fbPageId,\n      storeId: store._id,\n      userId: conversation.fbUserId\n    };\n\n    try {\n      const response = await toggleBlockUser({ ...data,\n        blocked: !blocked\n      });\n      dispatch(toggleBlockUserAction(conversation));\n      setBlocked(!blocked);\n      message.success(message_text.success);\n    } catch (error) {\n      message.error(message_text.error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Tooltip, {\n    placement: \"bottom\",\n    title: blocked ? 'Bỏ chặn khách hàng' : 'Chặn khách hàng',\n    children: /*#__PURE__*/_jsxDEV(MinusCircleOutlined, {\n      onClick: showConfirm,\n      style: {\n        color: blocked ? 'red' : 'inherit'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ToggleBlockBtn, \"+Mz0pWEi8ObLVHyQoCj+61Rn5K4=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = ToggleBlockBtn;\nexport default ToggleBlockBtn;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToggleBlockBtn\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/pages/conversation/conversation-detail/toggle-block-btn.tsx"],"names":["MinusCircleOutlined","ExclamationCircleOutlined","message","Tooltip","Modal","React","useState","useEffect","useDispatch","useSelector","toggleBlockUser","toggleBlockUserAction","ToggleBlockBtn","conversation","state","fanpage","store","token","auth","blocked","setBlocked","dispatch","confirm","message_text","success","error","showConfirm","title","icon","onOk","toggleUser","onCancel","data","accessToken","pageId","fbPageId","storeId","_id","userId","fbUserId","response","color"],"mappings":"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","sourcesContent":["import { MinusCircleOutlined, ExclamationCircleOutlined } from '@ant-design/icons';\nimport { message, Tooltip, Modal } from 'antd';\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { toggleBlockUser } from '../../../api/conversation-api';\nimport { toggleBlockUser as toggleBlockUserAction } from '../../../reducers/fanpageState/fanpageAction';\nimport { IConversation } from '../../../reducers/fanpageState/fanpageReducer';\n\nconst ToggleBlockBtn = (): JSX.Element => {\n    const conversation: IConversation = useSelector((state: any) => state.fanpage.conversation);\n    const store = useSelector((state: any) => state.store.store);\n    const token: any = useSelector((state: any) => state.auth.token);\n    const [blocked, setBlocked] = useState(() => {\n        if (conversation.blocked) return conversation.blocked;\n        return false;\n    });\n    const dispatch = useDispatch();\n    const { confirm } = Modal;\n\n    const message_text = {\n        success: `Đã ${blocked ? 'mở khóa' : 'khóa'} tài khoản.`,\n        error: `Lỗi ${blocked ? 'mở khóa' : 'khóa'} tài khoản.`,\n    };\n\n    useEffect(() => {\n        if (conversation) {\n            setBlocked(conversation.blocked || false);\n        }\n    }, [conversation]);\n\n    const showConfirm = () => {\n        confirm({\n            title: blocked\n                ? 'Bạn có thực sự muốn bỏ chặn?'\n                : 'Bạn có thực sự muốn chặn khách hàng?',\n            icon: <ExclamationCircleOutlined />,\n            onOk() {\n                toggleUser();\n            },\n            onCancel() {},\n        });\n    };\n\n    const toggleUser = async () => {\n        const data = {\n            token: token.accessToken,\n            pageId: conversation.fbPageId,\n            storeId: store._id,\n            userId: conversation.fbUserId,\n        };\n\n        try {\n            const response = await toggleBlockUser({\n                ...data,\n                blocked: !blocked,\n            });\n\n            dispatch(toggleBlockUserAction(conversation));\n\n            setBlocked(!blocked);\n\n            message.success(message_text.success);\n        } catch (error) {\n            message.error(message_text.error);\n        }\n    };\n    return (\n        <Tooltip placement='bottom' title={blocked ? 'Bỏ chặn khách hàng' : 'Chặn khách hàng'}>\n            <MinusCircleOutlined\n                onClick={showConfirm}\n                style={{ color: blocked ? 'red' : 'inherit' }}\n            />\n        </Tooltip>\n    );\n};\n\nexport default ToggleBlockBtn;\n"]},"metadata":{},"sourceType":"module"}