{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nimport get from 'lodash/get';\nimport * as queryString from 'query-string';\n\nconst setToken = ({\n  token,\n  remember = true\n}) => {\n  const tokenString = JSON.stringify(token);\n\n  if (remember) {\n    return localStorage.setItem('token', tokenString);\n  }\n\n  return sessionStorage.setItem('token', tokenString);\n};\n\nconst getTokenLocal = () => {\n  const tokenString = localStorage.getItem('token') || sessionStorage.getItem('token');\n  if (!tokenString) return null;\n  const token = JSON.parse(tokenString);\n  return token;\n};\n\nconst getToken = type => {\n  const tokenLocal = getTokenLocal();\n  if (!tokenLocal) return null;\n  return get(tokenLocal, type || 'accessToken');\n};\n\nconst getAuthParam = () => {\n  const token = getToken('accessToken');\n  if (!token) return null;\n  const search = queryString.stringify({\n    token,\n    location: JSON.stringify({\n      pathname: '/'\n    })\n  });\n  return search;\n};\n\nconst removeToken = () => {\n  localStorage.removeItem('token');\n  sessionStorage.removeItem('token');\n};\n\nconst checkToken = token => {\n  const tokenDecode = jwtDecode(token);\n  const expToken = get(tokenDecode, 'exp');\n\n  if (!expToken) {\n    return false;\n  }\n\n  const dateNow = Math.floor(Date.now() / 1000);\n  return expToken - dateNow > 0;\n};\n\nexport { setToken, getToken, removeToken, getAuthParam, checkToken, getTokenLocal };","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/api/token.ts"],"names":["jwtDecode","get","queryString","setToken","token","remember","tokenString","JSON","stringify","localStorage","setItem","sessionStorage","getTokenLocal","getItem","parse","getToken","type","tokenLocal","getAuthParam","search","location","pathname","removeToken","removeItem","checkToken","tokenDecode","expToken","dateNow","Math","floor","Date","now"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAO,KAAKC,WAAZ,MAA6B,cAA7B;;AASA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAQ,GAAG;AAApB,CAAD,KAA6E;AAC1F,QAAMC,WAAW,GAAGC,IAAI,CAACC,SAAL,CAAeJ,KAAf,CAApB;;AAEA,MAAIC,QAAJ,EAAc;AACV,WAAOI,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BJ,WAA9B,CAAP;AACH;;AAED,SAAOK,cAAc,CAACD,OAAf,CAAuB,OAAvB,EAAgCJ,WAAhC,CAAP;AACH,CARD;;AAUA,MAAMM,aAAa,GAAG,MAAqB;AACvC,QAAMN,WAAW,GAAGG,YAAY,CAACI,OAAb,CAAqB,OAArB,KAAiCF,cAAc,CAACE,OAAf,CAAuB,OAAvB,CAArD;AAEA,MAAI,CAACP,WAAL,EAAkB,OAAO,IAAP;AAElB,QAAMF,KAAa,GAAGG,IAAI,CAACO,KAAL,CAAWR,WAAX,CAAtB;AAEA,SAAOF,KAAP;AACH,CARD;;AAUA,MAAMW,QAAQ,GAAIC,IAAD,IAA0D;AACvE,QAAMC,UAAU,GAAGL,aAAa,EAAhC;AAEA,MAAI,CAACK,UAAL,EAAiB,OAAO,IAAP;AAEjB,SAAOhB,GAAG,CAACgB,UAAD,EAAaD,IAAI,IAAI,aAArB,CAAV;AACH,CAND;;AAQA,MAAME,YAAY,GAAG,MAAqB;AACtC,QAAMd,KAAK,GAAGW,QAAQ,CAAC,aAAD,CAAtB;AAEA,MAAI,CAACX,KAAL,EAAY,OAAO,IAAP;AAEZ,QAAMe,MAAM,GAAGjB,WAAW,CAACM,SAAZ,CAAsB;AACjCJ,IAAAA,KADiC;AAEjCgB,IAAAA,QAAQ,EAAEb,IAAI,CAACC,SAAL,CAAe;AACrBa,MAAAA,QAAQ,EAAE;AADW,KAAf;AAFuB,GAAtB,CAAf;AAMA,SAAOF,MAAP;AACH,CAZD;;AAcA,MAAMG,WAAW,GAAG,MAAM;AACtBb,EAAAA,YAAY,CAACc,UAAb,CAAwB,OAAxB;AACAZ,EAAAA,cAAc,CAACY,UAAf,CAA0B,OAA1B;AACH,CAHD;;AAKA,MAAMC,UAAU,GAAIpB,KAAD,IAA4B;AAC3C,QAAMqB,WAAW,GAAGzB,SAAS,CAACI,KAAD,CAA7B;AACA,QAAMsB,QAAQ,GAAGzB,GAAG,CAACwB,WAAD,EAAc,KAAd,CAApB;;AAEA,MAAI,CAACC,QAAL,EAAe;AACX,WAAO,KAAP;AACH;;AAED,QAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,KAAa,IAAxB,CAAhB;AAEA,SAAOL,QAAQ,GAAGC,OAAX,GAAqB,CAA5B;AACH,CAXD;;AAaA,SAASxB,QAAT,EAAmBY,QAAnB,EAA6BO,WAA7B,EAA0CJ,YAA1C,EAAwDM,UAAxD,EAAoEZ,aAApE","sourcesContent":["import jwtDecode from 'jwt-decode';\nimport get from 'lodash/get';\nimport * as queryString from 'query-string';\n\nexport interface IToken {\n    accessToken: string;\n    refreshToken: string;\n    expiredIn: number;\n    type: string;\n}\n\nconst setToken = ({ token, remember = true }: { token: IToken; remember?: boolean }): void => {\n    const tokenString = JSON.stringify(token);\n\n    if (remember) {\n        return localStorage.setItem('token', tokenString);\n    }\n\n    return sessionStorage.setItem('token', tokenString);\n};\n\nconst getTokenLocal = (): IToken | null => {\n    const tokenString = localStorage.getItem('token') || sessionStorage.getItem('token');\n\n    if (!tokenString) return null;\n\n    const token: IToken = JSON.parse(tokenString);\n\n    return token;\n};\n\nconst getToken = (type?: 'accessToken' | 'refreshToken'): string | null => {\n    const tokenLocal = getTokenLocal();\n\n    if (!tokenLocal) return null;\n\n    return get(tokenLocal, type || 'accessToken');\n};\n\nconst getAuthParam = (): string | null => {\n    const token = getToken('accessToken');\n\n    if (!token) return null;\n\n    const search = queryString.stringify({\n        token,\n        location: JSON.stringify({\n            pathname: '/',\n        }),\n    });\n    return search;\n};\n\nconst removeToken = () => {\n    localStorage.removeItem('token');\n    sessionStorage.removeItem('token');\n};\n\nconst checkToken = (token: string): boolean => {\n    const tokenDecode = jwtDecode(token);\n    const expToken = get(tokenDecode, 'exp');\n\n    if (!expToken) {\n        return false;\n    }\n\n    const dateNow = Math.floor(Date.now() / 1000);\n\n    return expToken - dateNow > 0;\n};\n\nexport { setToken, getToken, removeToken, getAuthParam, checkToken, getTokenLocal };\n"]},"metadata":{},"sourceType":"module"}