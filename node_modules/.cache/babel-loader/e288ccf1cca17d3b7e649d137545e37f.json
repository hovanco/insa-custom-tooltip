{"ast":null,"code":"import axios from './axios-client';\nimport Axios from 'axios';\nimport constants from '../constants';\nexport async function loginWithEmail(data) {\n  const response = await axios({\n    method: 'POST',\n    url: '/authentication/v1/signin',\n    data\n  });\n  return response.data;\n}\nexport async function signupWithEmail(data) {\n  const response = await axios({\n    method: 'POST',\n    url: '/authentication/v1/signup',\n    data\n  });\n  return response.data;\n}\nexport async function loginWithService({\n  accessToken,\n  service\n}) {\n  const url = `/authentication/v1/signin/${service}`;\n  const data = {\n    accessToken\n  };\n  const response = await axios({\n    method: 'POST',\n    url,\n    data\n  });\n  return response.data;\n}\nexport async function getUser() {\n  const url = '/authentication/v1/users/info';\n  const response = await axios({\n    url,\n    method: 'GET'\n  });\n  return response.data;\n}\nexport async function refreshAccessToken(refreshToken) {\n  const response = await Axios({\n    method: 'POST',\n    url: `${constants.URL_API}/authentication/v1/auth/refresh-token`,\n    data: {\n      refreshToken\n    }\n  });\n  return response.data;\n}\nexport async function existingRefreshToken(refreshToken) {\n  const response = await axios({\n    method: 'POST',\n    url: '/authentication/v1/auth/existing-refresh-token',\n    data: {\n      refreshToken\n    }\n  });\n  return response;\n}\nexport async function logout(refreshToken) {\n  const response = await axios({\n    method: 'POST',\n    url: '/authentication/v1/auth/logout',\n    data: {\n      refreshToken\n    }\n  });\n  return response.data;\n}\nconst authApi = {\n  loginWithEmail,\n  signupWithEmail,\n  loginWithService,\n  getUser,\n  refreshAccessToken,\n  existingRefreshToken,\n  logout\n};\nexport default authApi;","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/api/auth-api.ts"],"names":["axios","Axios","constants","loginWithEmail","data","response","method","url","signupWithEmail","loginWithService","accessToken","service","getUser","refreshAccessToken","refreshToken","URL_API","existingRefreshToken","logout","authApi"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,gBAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAYA,OAAO,eAAeC,cAAf,CAA8BC,IAA9B,EAAiE;AACpE,QAAMC,QAAQ,GAAG,MAAML,KAAK,CAAC;AACzBM,IAAAA,MAAM,EAAE,MADiB;AAEzBC,IAAAA,GAAG,EAAE,2BAFoB;AAGzBH,IAAAA;AAHyB,GAAD,CAA5B;AAMA,SAAOC,QAAQ,CAACD,IAAhB;AACH;AAED,OAAO,eAAeI,eAAf,CAA+BJ,IAA/B,EAAkE;AACrE,QAAMC,QAAQ,GAAG,MAAML,KAAK,CAAC;AACzBM,IAAAA,MAAM,EAAE,MADiB;AAEzBC,IAAAA,GAAG,EAAE,2BAFoB;AAGzBH,IAAAA;AAHyB,GAAD,CAA5B;AAMA,SAAOC,QAAQ,CAACD,IAAhB;AACH;AAED,OAAO,eAAeK,gBAAf,CAAgC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAhC,EAAuF;AAC1F,QAAMJ,GAAG,GAAI,6BAA4BI,OAAQ,EAAjD;AAEA,QAAMP,IAAI,GAAG;AAAEM,IAAAA;AAAF,GAAb;AAEA,QAAML,QAAQ,GAAG,MAAML,KAAK,CAAC;AACzBM,IAAAA,MAAM,EAAE,MADiB;AAEzBC,IAAAA,GAFyB;AAGzBH,IAAAA;AAHyB,GAAD,CAA5B;AAMA,SAAOC,QAAQ,CAACD,IAAhB;AACH;AAED,OAAO,eAAeQ,OAAf,GAAwC;AAC3C,QAAML,GAAG,GAAG,+BAAZ;AAEA,QAAMF,QAAQ,GAAG,MAAML,KAAK,CAAC;AACzBO,IAAAA,GADyB;AAEzBD,IAAAA,MAAM,EAAE;AAFiB,GAAD,CAA5B;AAKA,SAAOD,QAAQ,CAACD,IAAhB;AACH;AAED,OAAO,eAAeS,kBAAf,CAAkCC,YAAlC,EAAsE;AACzE,QAAMT,QAAQ,GAAG,MAAMJ,KAAK,CAAC;AACzBK,IAAAA,MAAM,EAAE,MADiB;AAEzBC,IAAAA,GAAG,EAAG,GAAEL,SAAS,CAACa,OAAQ,uCAFD;AAGzBX,IAAAA,IAAI,EAAE;AACFU,MAAAA;AADE;AAHmB,GAAD,CAA5B;AAQA,SAAOT,QAAQ,CAACD,IAAhB;AACH;AAED,OAAO,eAAeY,oBAAf,CAAoCF,YAApC,EAAwE;AAC3E,QAAMT,QAAQ,GAAG,MAAML,KAAK,CAAC;AACzBM,IAAAA,MAAM,EAAE,MADiB;AAEzBC,IAAAA,GAAG,EAAE,gDAFoB;AAGzBH,IAAAA,IAAI,EAAE;AACFU,MAAAA;AADE;AAHmB,GAAD,CAA5B;AAQA,SAAOT,QAAP;AACH;AAED,OAAO,eAAeY,MAAf,CAAsBH,YAAtB,EAA0D;AAC7D,QAAMT,QAAQ,GAAG,MAAML,KAAK,CAAC;AACzBM,IAAAA,MAAM,EAAE,MADiB;AAEzBC,IAAAA,GAAG,EAAE,gCAFoB;AAGzBH,IAAAA,IAAI,EAAE;AACFU,MAAAA;AADE;AAHmB,GAAD,CAA5B;AAQA,SAAOT,QAAQ,CAACD,IAAhB;AACH;AAED,MAAMc,OAAO,GAAG;AACZf,EAAAA,cADY;AAEZK,EAAAA,eAFY;AAGZC,EAAAA,gBAHY;AAIZG,EAAAA,OAJY;AAKZC,EAAAA,kBALY;AAMZG,EAAAA,oBANY;AAOZC,EAAAA;AAPY,CAAhB;AAUA,eAAeC,OAAf","sourcesContent":["import axios from './axios-client';\nimport Axios from 'axios';\nimport constants from '../constants';\n\ninterface FormAuthDate {\n    email?: string;\n    password?: string;\n}\n\ninterface LoginService {\n    service: 'facebook' | 'google';\n    accessToken: string;\n}\n\nexport async function loginWithEmail(data: FormAuthDate): Promise<void> {\n    const response = await axios({\n        method: 'POST',\n        url: '/authentication/v1/signin',\n        data,\n    });\n\n    return response.data;\n}\n\nexport async function signupWithEmail(data: FormAuthDate): Promise<void> {\n    const response = await axios({\n        method: 'POST',\n        url: '/authentication/v1/signup',\n        data,\n    });\n\n    return response.data;\n}\n\nexport async function loginWithService({ accessToken, service }: LoginService): Promise<void> {\n    const url = `/authentication/v1/signin/${service}`;\n\n    const data = { accessToken };\n\n    const response = await axios({\n        method: 'POST',\n        url,\n        data,\n    });\n\n    return response.data;\n}\n\nexport async function getUser(): Promise<void> {\n    const url = '/authentication/v1/users/info';\n\n    const response = await axios({\n        url,\n        method: 'GET',\n    });\n\n    return response.data;\n}\n\nexport async function refreshAccessToken(refreshToken: string): Promise<any> {\n    const response = await Axios({\n        method: 'POST',\n        url: `${constants.URL_API}/authentication/v1/auth/refresh-token`,\n        data: {\n            refreshToken,\n        },\n    });\n\n    return response.data;\n}\n\nexport async function existingRefreshToken(refreshToken: string): Promise<any> {\n    const response = await axios({\n        method: 'POST',\n        url: '/authentication/v1/auth/existing-refresh-token',\n        data: {\n            refreshToken,\n        },\n    });\n\n    return response\n}\n\nexport async function logout(refreshToken: string): Promise<any> {\n    const response = await axios({\n        method: 'POST',\n        url: '/authentication/v1/auth/logout',\n        data: {\n            refreshToken,\n        },\n    });\n\n    return response.data;\n}\n\nconst authApi = {\n    loginWithEmail,\n    signupWithEmail,\n    loginWithService,\n    getUser,\n    refreshAccessToken,\n    existingRefreshToken,\n    logout,\n};\n\nexport default authApi;\n"]},"metadata":{},"sourceType":"module"}