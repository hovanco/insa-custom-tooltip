{"ast":null,"code":"import { message } from 'antd';\nimport { get } from 'lodash';\nimport { createWarehouseRequest, deleteWarehouseRequest, fetchWarehousesRequest, updateWarehouseRequest } from '../../api/warehouse-api';\nimport types from './warehouseTypes';\nimport { updateStore } from '../storeState/storeAction';\nexport function setWarehouses(data) {\n  return {\n    type: types.FETCH_WAREHOUSES_SUCCESS,\n    payload: data\n  };\n}\nexport const fetchWarehouses = query => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: types.FETCH_WAREHOUSES_LOADING\n    });\n    const {\n      auth,\n      store\n    } = getState();\n    const {\n      token\n    } = auth;\n    const storeId = store.store._id;\n    const res = await fetchWarehousesRequest({\n      token: token.accessToken,\n      storeId,\n      query\n    });\n    dispatch(setWarehouses(res));\n  } catch (error) {\n    dispatch({\n      type: types.FETCH_WAREHOUSES_FAILED\n    });\n  }\n};\nexport const createWarehouse = data => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: types.CREATE_WAREHOUSE_LOADING\n    });\n    const {\n      auth,\n      store\n    } = getState();\n    const {\n      token\n    } = auth;\n    const storeId = store.store._id;\n    const res = await createWarehouseRequest({\n      token: token.accessToken,\n      storeId,\n      data\n    });\n\n    if (res) {\n      message.success('Tạo mới chi nhánh thành công');\n      return res;\n    }\n  } catch (error) {\n    message.error('Tạo chi nhánh mới thất bại');\n    dispatch({\n      type: types.CREATE_WAREHOUSE_FAILED\n    });\n    return;\n  }\n};\nexport const updateWarehouse = data => async (dispatch, getState) => {\n  try {\n    const {\n      auth,\n      store\n    } = getState();\n    const {\n      token\n    } = auth;\n    const storeId = store.store._id;\n    const res = await updateWarehouseRequest({\n      token: token.accessToken,\n      storeId,\n      warehouseId: data._id,\n      data: { ...data,\n        storeId\n      }\n    });\n\n    if (res) {\n      if (store.store.warehouseId === data._id) {\n        dispatch(updateStore({ ...store.store,\n          province: res.province,\n          district: res.district,\n          ward: res.ward,\n          phoneNo: res.phoneNo,\n          address: res.address\n        }));\n      }\n\n      message.success('Cập nhật chi nhánh thành công');\n      return res;\n    }\n  } catch (error) {\n    if (get(error, 'response.data.message') === 'NOT_ALLOW_CHANGING_ADDRESS') {\n      message.error('Bạn không thể thay đổi địa chỉ chi nhánh. Vui lòng liên hệ nhân viên hỗ trợ để được trợ giúp.');\n    } else {\n      message.error('Cập nhật không thành công');\n    }\n\n    dispatch({\n      type: types.UPDATE_WAREHOUSE_FAILED\n    });\n    return;\n  }\n};\nexport const deleteWarehouse = warehouseId => async (dispatch, getState) => {\n  try {\n    const {\n      auth,\n      store\n    } = getState();\n    const {\n      token\n    } = auth;\n    const storeId = store.store._id;\n    const res = await deleteWarehouseRequest({\n      token: token.accessToken,\n      storeId,\n      warehouseId\n    });\n\n    if (res) {\n      message.success('Đã xoá 1 chi nhánh');\n    }\n\n    dispatch({\n      type: types.DELETE_WAREHOUSE_SUCCESS,\n      payload: warehouseId\n    });\n  } catch (error) {\n    if (get(error, 'response.data.message') === 'HAS_RELATED_ORDER') {\n      message.error('Đã tạo đơn với chi nhánh này, bạn không thể xóa chi nhánh');\n    } else {\n      message.error('Lỗi xóa chi nhánh');\n    }\n\n    dispatch({\n      type: types.DELETE_WAREHOUSE_FAILED\n    });\n  }\n};","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/reducers/warehouseState/warehouseAction.ts"],"names":["message","get","createWarehouseRequest","deleteWarehouseRequest","fetchWarehousesRequest","updateWarehouseRequest","types","updateStore","setWarehouses","data","type","FETCH_WAREHOUSES_SUCCESS","payload","fetchWarehouses","query","dispatch","getState","FETCH_WAREHOUSES_LOADING","auth","store","token","storeId","_id","res","accessToken","error","FETCH_WAREHOUSES_FAILED","createWarehouse","CREATE_WAREHOUSE_LOADING","success","CREATE_WAREHOUSE_FAILED","updateWarehouse","warehouseId","province","district","ward","phoneNo","address","UPDATE_WAREHOUSE_FAILED","deleteWarehouse","DELETE_WAREHOUSE_SUCCESS","DELETE_WAREHOUSE_FAILED"],"mappings":"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","sourcesContent":["import { message } from 'antd';\nimport { get } from 'lodash';\nimport { Dispatch } from 'redux';\nimport {\n    createWarehouseRequest,\n    deleteWarehouseRequest,\n    fetchWarehousesRequest,\n    updateWarehouseRequest,\n} from '../../api/warehouse-api';\nimport { IAction } from './warehouseReducer';\nimport types from './warehouseTypes';\nimport { updateStore } from '../storeState/storeAction';\n\nexport function setWarehouses(data: any): IAction {\n    return {\n        type: types.FETCH_WAREHOUSES_SUCCESS,\n        payload: data,\n    };\n}\n\nexport const fetchWarehouses = (query: { page: number; limit: number }) => async (\n    dispatch: Dispatch,\n    getState: () => any\n) => {\n    try {\n        dispatch({\n            type: types.FETCH_WAREHOUSES_LOADING,\n        });\n\n        const { auth, store } = getState();\n        const { token } = auth;\n        const storeId = store.store._id;\n\n        const res = await fetchWarehousesRequest({\n            token: token.accessToken,\n            storeId,\n            query,\n        });\n\n        dispatch(setWarehouses(res));\n    } catch (error) {\n        dispatch({ type: types.FETCH_WAREHOUSES_FAILED });\n    }\n};\n\nexport const createWarehouse = (data: any) => async (dispatch: Dispatch, getState: () => any) => {\n    try {\n        dispatch({\n            type: types.CREATE_WAREHOUSE_LOADING,\n        });\n\n        const { auth, store } = getState();\n        const { token } = auth;\n        const storeId = store.store._id;\n\n        const res = await createWarehouseRequest({\n            token: token.accessToken,\n            storeId,\n            data,\n        });\n        if (res) {\n            message.success('Tạo mới chi nhánh thành công');\n            return res;\n        }\n    } catch (error) {\n        message.error('Tạo chi nhánh mới thất bại');\n        dispatch({ type: types.CREATE_WAREHOUSE_FAILED });\n        return;\n    }\n};\n\nexport const updateWarehouse = (data: any) => async (dispatch: Dispatch, getState: () => any) => {\n    try {\n        const { auth, store } = getState();\n        const { token } = auth;\n        const storeId = store.store._id;\n\n        const res = await updateWarehouseRequest({\n            token: token.accessToken,\n            storeId,\n            warehouseId: data._id,\n            data: { ...data, storeId },\n        });\n        if (res) {\n            if (store.store.warehouseId === data._id) {\n                dispatch(\n                    updateStore({\n                        ...store.store,\n                        province: res.province,\n                        district: res.district,\n                        ward: res.ward,\n                        phoneNo: res.phoneNo,\n                        address: res.address,\n                    })\n                );\n            }\n            message.success('Cập nhật chi nhánh thành công');\n            return res;\n        }\n    } catch (error) {\n        if (get(error, 'response.data.message') === 'NOT_ALLOW_CHANGING_ADDRESS') {\n            message.error(\n                'Bạn không thể thay đổi địa chỉ chi nhánh. Vui lòng liên hệ nhân viên hỗ trợ để được trợ giúp.'\n            );\n        } else {\n            message.error('Cập nhật không thành công');\n        }\n        dispatch({ type: types.UPDATE_WAREHOUSE_FAILED });\n        return;\n    }\n};\n\nexport const deleteWarehouse = (warehouseId: string) => async (\n    dispatch: Dispatch,\n    getState: () => any\n) => {\n    try {\n        const { auth, store } = getState();\n        const { token } = auth;\n        const storeId = store.store._id;\n\n        const res = await deleteWarehouseRequest({\n            token: token.accessToken,\n            storeId,\n            warehouseId,\n        });\n        if (res) {\n            message.success('Đã xoá 1 chi nhánh');\n        }\n\n        dispatch({ type: types.DELETE_WAREHOUSE_SUCCESS, payload: warehouseId });\n    } catch (error) {\n        if (get(error, 'response.data.message') === 'HAS_RELATED_ORDER') {\n            message.error('Đã tạo đơn với chi nhánh này, bạn không thể xóa chi nhánh');\n        } else {\n            message.error('Lỗi xóa chi nhánh');\n        }\n        dispatch({ type: types.DELETE_WAREHOUSE_FAILED });\n    }\n};\n"]},"metadata":{},"sourceType":"module"}