{"ast":null,"code":"import { message } from 'antd';\nimport { get } from 'lodash';\nimport { createCategoryRequest, createProductRequest, deleteProductRequest, fetchCategoryRequest, fetchProductsRequest, updateProductRequest } from '../../api/product-api';\nimport types from './productTypes';\nexport function setProducts(data) {\n  return {\n    type: types.FETCH_PRODUCTS_SUCCESS,\n    payload: data\n  };\n}\nexport function setCategory(data) {\n  return {\n    type: types.FETCH_CATEGORY_SUCCESS,\n    payload: data\n  };\n}\nexport const fetchProducts = query => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: types.FETCH_PRODUCTS_LOADING\n    });\n    const {\n      auth,\n      store\n    } = getState();\n    const {\n      token\n    } = auth;\n    const storeId = store.store._id;\n    const res = await fetchProductsRequest({\n      token: token.accessToken,\n      storeId,\n      query\n    });\n    dispatch(setProducts(res));\n  } catch (error) {\n    dispatch({\n      type: types.FETCH_PRODUCTS_FAILED\n    });\n  }\n};\nexport const createProduct = data => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: types.CREATE_PRODUCT_LOADING\n    });\n    const {\n      auth,\n      store\n    } = getState();\n    const {\n      token\n    } = auth;\n    const storeId = store.store._id;\n    const res = await createProductRequest({\n      token: token.accessToken,\n      storeId,\n      data\n    });\n\n    if (res) {\n      message.success('Tạo mới sản phẩm thành công');\n      return res;\n    }\n  } catch (error) {\n    if (error && error.response && error.response.data && error.response.data.message === 'PRODUCT_CODE_EXISTED') {\n      message.error(`Mã sản phẩm ${data.code} đã tồn tại!`);\n    }\n\n    dispatch({\n      type: types.CREATE_PRODUCT_FAILED\n    });\n    return;\n  }\n};\nexport const updateProduct = data => async (dispatch, getState) => {\n  try {\n    const {\n      auth,\n      store\n    } = getState();\n    const {\n      token\n    } = auth;\n    const storeId = store.store._id;\n    const res = await updateProductRequest({\n      token: token.accessToken,\n      storeId,\n      productId: data._id,\n      data: { ...data,\n        storeId\n      }\n    });\n\n    if (res) {\n      message.success('Chỉnh sửa sản phẩm thành công');\n      return res;\n    }\n  } catch (error) {\n    if (get(error, 'response.data.message') === 'PRODUCT_CODE_EXISTED') {\n      message.error(`Mã sản phẩm ${data.code} đã tồn tại. Vui lòng nhập mã sản phẩm khác`);\n    } else {\n      message.error('Cập nhật sản phẩm thất bại');\n    }\n\n    dispatch({\n      type: types.UPDATE_PRODUCT_FAILED\n    });\n    return;\n  }\n};\nexport const deleteProduct = productId => async (dispatch, getState) => {\n  try {\n    const {\n      auth,\n      store\n    } = getState();\n    const {\n      token\n    } = auth;\n    const storeId = store.store._id;\n    const res = await deleteProductRequest({\n      token: token.accessToken,\n      storeId,\n      productId\n    });\n\n    if (res) {\n      message.success('Đã xoá 1 sản phẩm');\n    }\n\n    dispatch({\n      type: types.DELETE_PRODUCT_SUCCESS,\n      payload: productId\n    });\n  } catch (error) {\n    if (error && error.response && error.response.data && error.response.data.message) {\n      message.error(`${error.response.data.message}`);\n    } else {\n      message.error('Lỗi xóa sản phẩm');\n    }\n\n    dispatch({\n      type: types.DELETE_PRODUCT_FAILED\n    });\n  }\n};\nexport const fetchCategory = textSearch => async (dispatch, getState) => {\n  try {\n    const {\n      auth,\n      store\n    } = getState();\n    const {\n      token\n    } = auth;\n    const storeId = store.store._id;\n    const data = {\n      token: token.accessToken,\n      storeId,\n      query: {}\n    };\n    textSearch && (data.query = {\n      textSearch\n    });\n    const res = await fetchCategoryRequest(data);\n    dispatch(setCategory(res));\n  } catch (error) {\n    dispatch({\n      type: types.FETCH_CATEGORY_FAILED\n    });\n  }\n};\nexport const createCategory = name => async (dispatch, getState) => {\n  try {\n    const {\n      auth,\n      store\n    } = getState();\n    const {\n      token\n    } = auth;\n    const storeId = store.store._id;\n    const data = {\n      token: token.accessToken,\n      data: {\n        name,\n        storeId\n      },\n      storeId\n    };\n    const res = await createCategoryRequest(data);\n\n    if (res) {\n      dispatch({\n        type: types.SET_NEW_CATEGORY_SUCCESS,\n        payload: res._id\n      });\n      message.success('Tạo Danh mục thành công');\n    }\n  } catch (error) {\n    message.error('Lỗi tạo Danh mục');\n  }\n};","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/reducers/productState/productAction.ts"],"names":["message","get","createCategoryRequest","createProductRequest","deleteProductRequest","fetchCategoryRequest","fetchProductsRequest","updateProductRequest","types","setProducts","data","type","FETCH_PRODUCTS_SUCCESS","payload","setCategory","FETCH_CATEGORY_SUCCESS","fetchProducts","query","dispatch","getState","FETCH_PRODUCTS_LOADING","auth","store","token","storeId","_id","res","accessToken","error","FETCH_PRODUCTS_FAILED","createProduct","CREATE_PRODUCT_LOADING","success","response","code","CREATE_PRODUCT_FAILED","updateProduct","productId","UPDATE_PRODUCT_FAILED","deleteProduct","DELETE_PRODUCT_SUCCESS","DELETE_PRODUCT_FAILED","fetchCategory","textSearch","FETCH_CATEGORY_FAILED","createCategory","name","SET_NEW_CATEGORY_SUCCESS"],"mappings":"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","sourcesContent":["import { message } from 'antd';\nimport { get } from 'lodash';\nimport { Dispatch } from 'redux';\nimport {\n    createCategoryRequest,\n    createProductRequest,\n    deleteProductRequest,\n    fetchCategoryRequest,\n    fetchProductsRequest,\n    updateProductRequest,\n} from '../../api/product-api';\nimport { IAction } from './productReducer';\nimport types from './productTypes';\n\nexport function setProducts(data: any): IAction {\n    return {\n        type: types.FETCH_PRODUCTS_SUCCESS,\n        payload: data,\n    };\n}\nexport function setCategory(data: any): IAction {\n    return {\n        type: types.FETCH_CATEGORY_SUCCESS,\n        payload: data,\n    };\n}\n\nexport const fetchProducts = (query: {\n    textSearch?: string;\n    page: number;\n    limit: number;\n    sort?: string;\n}) => async (dispatch: Dispatch, getState: () => any) => {\n    try {\n        dispatch({\n            type: types.FETCH_PRODUCTS_LOADING,\n        });\n\n        const { auth, store } = getState();\n        const { token } = auth;\n        const storeId = store.store._id;\n\n        const res = await fetchProductsRequest({\n            token: token.accessToken,\n            storeId,\n            query,\n        });\n\n        dispatch(setProducts(res));\n    } catch (error) {\n        dispatch({ type: types.FETCH_PRODUCTS_FAILED });\n    }\n};\n\nexport const createProduct = (data: any) => async (dispatch: Dispatch, getState: () => any) => {\n    try {\n        dispatch({\n            type: types.CREATE_PRODUCT_LOADING,\n        });\n\n        const { auth, store } = getState();\n        const { token } = auth;\n        const storeId = store.store._id;\n\n        const res = await createProductRequest({\n            token: token.accessToken,\n            storeId,\n            data,\n        });\n        if (res) {\n            message.success('Tạo mới sản phẩm thành công');\n            return res;\n        }\n    } catch (error) {\n        if (\n            error &&\n            error.response &&\n            error.response.data &&\n            error.response.data.message === 'PRODUCT_CODE_EXISTED'\n        ) {\n            message.error(`Mã sản phẩm ${data.code} đã tồn tại!`);\n        }\n        dispatch({ type: types.CREATE_PRODUCT_FAILED });\n        return;\n    }\n};\n\nexport const updateProduct = (data: any) => async (dispatch: Dispatch, getState: () => any) => {\n    try {\n        const { auth, store } = getState();\n        const { token } = auth;\n        const storeId = store.store._id;\n\n        const res = await updateProductRequest({\n            token: token.accessToken,\n            storeId,\n            productId: data._id,\n            data: { ...data, storeId },\n        });\n        if (res) {\n            message.success('Chỉnh sửa sản phẩm thành công');\n            return res;\n        }\n    } catch (error) {\n        if (get(error, 'response.data.message') === 'PRODUCT_CODE_EXISTED') {\n            message.error(`Mã sản phẩm ${data.code} đã tồn tại. Vui lòng nhập mã sản phẩm khác`);\n        } else {\n            message.error('Cập nhật sản phẩm thất bại');\n        }\n        dispatch({ type: types.UPDATE_PRODUCT_FAILED });\n        return;\n    }\n};\n\nexport const deleteProduct = (productId: string) => async (\n    dispatch: Dispatch,\n    getState: () => any\n) => {\n    try {\n        const { auth, store } = getState();\n        const { token } = auth;\n        const storeId = store.store._id;\n\n        const res = await deleteProductRequest({\n            token: token.accessToken,\n            storeId,\n            productId,\n        });\n        if (res) {\n            message.success('Đã xoá 1 sản phẩm');\n        }\n\n        dispatch({ type: types.DELETE_PRODUCT_SUCCESS, payload: productId });\n    } catch (error) {\n        if (error && error.response && error.response.data && error.response.data.message) {\n            message.error(`${error.response.data.message}`);\n        } else {\n            message.error('Lỗi xóa sản phẩm');\n        }\n        dispatch({ type: types.DELETE_PRODUCT_FAILED });\n    }\n};\n\nexport const fetchCategory = (textSearch?: string) => async (\n    dispatch: Dispatch,\n    getState: () => any\n) => {\n    try {\n        const { auth, store } = getState();\n        const { token } = auth;\n        const storeId = store.store._id;\n\n        const data = { token: token.accessToken, storeId, query: {} };\n        textSearch && (data.query = { textSearch });\n\n        const res = await fetchCategoryRequest(data);\n\n        dispatch(setCategory(res));\n    } catch (error) {\n        dispatch({ type: types.FETCH_CATEGORY_FAILED });\n    }\n};\n\nexport const createCategory = (name: string) => async (dispatch: Dispatch, getState: () => any) => {\n    try {\n        const { auth, store } = getState();\n        const { token } = auth;\n        const storeId = store.store._id;\n\n        const data = {\n            token: token.accessToken,\n            data: { name, storeId },\n            storeId,\n        };\n\n        const res = await createCategoryRequest(data);\n        if (res) {\n            dispatch({\n                type: types.SET_NEW_CATEGORY_SUCCESS,\n                payload: res._id,\n            });\n            message.success('Tạo Danh mục thành công');\n        }\n    } catch (error) {\n        message.error('Lỗi tạo Danh mục');\n    }\n};\n"]},"metadata":{},"sourceType":"module"}