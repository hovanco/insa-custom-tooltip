{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/FacebookClient/src/pages/conversation/conversation-detail/conversation-detail-list.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Space } from 'antd';\nimport { isArray, pick } from 'lodash';\nimport React, { useEffect, useLayoutEffect, useRef } from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadComments, loadMessages } from '../../../api/conversation-api';\nimport { Loading } from '../../../components';\nimport { setNewMessage } from '../../../reducers/fanpageState/fanpageAction';\nimport { useConversationDetail } from './context';\nimport MessageBubble from './message-bubble';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ConversationDetailList = ({\n  contentPost,\n  loadingContent,\n  updateContentPost,\n  filterConversation\n}) => {\n  _s();\n\n  const conversation = useSelector(({\n    fanpage\n  }) => fanpage.conversation);\n  const newMessage = useSelector(({\n    fanpage\n  }) => fanpage.newMessage);\n  const isUpdateMessage = useSelector(({\n    fanpage\n  }) => fanpage.isUpdateMessage);\n  const dispatch = useDispatch();\n  const token = useSelector(({\n    auth\n  }) => auth.token);\n  const store = useSelector(({\n    store\n  }) => store.store);\n  const {\n    isNewMessage,\n    setIsNewMessage,\n    next,\n    loading,\n    messages,\n    updateMessage,\n    loadMoreMessages\n  } = useConversationDetail();\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    if (!loading) {\n      messagesEndRef.current.scrollIntoView(false);\n    }\n  };\n\n  useLayoutEffect(() => {\n    if (isNewMessage) {\n      scrollToBottom();\n      setIsNewMessage(false);\n    }\n  }, [isNewMessage]);\n  useEffect(() => {\n    if (newMessage && isUpdateMessage) {\n      updateMessage(newMessage);\n      dispatch(setNewMessage(null));\n    }\n  }, [newMessage, isNewMessage]);\n\n  const getInnerHeight = elm => {\n    if (elm) {\n      const computed = getComputedStyle(elm);\n      const padding = parseInt(computed.paddingTop) + parseInt(computed.paddingBottom);\n      return elm.clientHeight - padding;\n    }\n\n    return 0;\n  };\n\n  useLayoutEffect(() => {\n    const elmBoxChat = document.getElementById('list-chat');\n    let isScroll = false;\n\n    if (elmBoxChat) {\n      const height = getInnerHeight(elmBoxChat);\n      isScroll = elmBoxChat.scrollHeight - (elmBoxChat.scrollTop + height) < 500;\n    }\n\n    if (isArray(messages) && messages.length <= 20 || isScroll) {\n      scrollToBottom();\n    }\n  }, [messages]);\n\n  const renderMessages = () => {\n    if (loading) return /*#__PURE__*/_jsxDEV(Loading, {\n      full: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 29\n    }, this);\n    return messages.map((message, index) => {\n      return /*#__PURE__*/_jsxDEV(MessageBubble, {\n        me: message.from.id === conversation.fbPageId,\n        userId: conversation.fbUserId,\n        type: conversation.type,\n        message: message,\n        isShowAvatarHere: index === 0 || message.from.id !== messages[index - 1].from.id\n      }, message.id + index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this);\n    });\n  };\n\n  const renderButton = () => {\n    if (loading) return;\n    return conversation.type === 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 30\n      },\n      children: /*#__PURE__*/_jsxDEV(Space, {\n        size: 10,\n        direction: \"vertical\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post-content\",\n          children: [contentPost.full_picture && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: contentPost.message ? 'img-post has-content' : 'img-post',\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: contentPost.full_picture,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 33\n          }, this), contentPost.message && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                padding: '10px 15px'\n              },\n              children: contentPost.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => filterConversation(),\n            children: \"L\\u1ECDc b\\xECnh lu\\u1EADn c\\u1EE7a b\\xE0i vi\\u1EBFt n\\xE0y\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }, this);\n  };\n\n  const loadMore = async () => {\n    try {\n      let res = {\n        data: []\n      };\n\n      if (conversation.type === 1 && !loading && next) {\n        res = await loadMessages({ ...pick(conversation, ['fbObjectId', 'fbPageId']),\n          storeId: store._id,\n          token: token.accessToken,\n          next\n        });\n\n        if (res && isArray(res.data)) {\n          loadMoreMessages(res.data, res.next);\n        }\n      } else if (conversation.type === 2 && !loading && next) {\n        let conversationId = conversation.fbObjectId;\n        res = await loadComments({\n          conversationId,\n          ...pick(conversation, ['fbPageId']),\n          storeId: store._id,\n          token: token.accessToken,\n          next\n        });\n\n        if (res && isArray(res.data)) {\n          loadMoreMessages(res.data.reverse(), res.next);\n        }\n      }\n    } catch (e) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"list-chat\",\n    className: \"conversation-detail-list\",\n    children: [renderButton(), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      pageStart: 0,\n      loadMore: loadMore,\n      hasMore: !!next,\n      loader: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 25\n      }, this),\n      useWindow: false,\n      initialLoad: false,\n      threshold: 20,\n      isReverse: true,\n      children: renderMessages()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: messagesEndRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ConversationDetailList, \"hNS+Je687B8J19KNoQ2OYQqqETs=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch, useSelector, useSelector, useConversationDetail];\n});\n\n_c = ConversationDetailList;\nexport default ConversationDetailList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationDetailList\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/pages/conversation/conversation-detail/conversation-detail-list.tsx"],"names":["Button","Space","isArray","pick","React","useEffect","useLayoutEffect","useRef","InfiniteScroll","useDispatch","useSelector","loadComments","loadMessages","Loading","setNewMessage","useConversationDetail","MessageBubble","ConversationDetailList","contentPost","loadingContent","updateContentPost","filterConversation","conversation","fanpage","newMessage","isUpdateMessage","dispatch","token","auth","store","isNewMessage","setIsNewMessage","next","loading","messages","updateMessage","loadMoreMessages","messagesEndRef","scrollToBottom","current","scrollIntoView","getInnerHeight","elm","computed","getComputedStyle","padding","parseInt","paddingTop","paddingBottom","clientHeight","elmBoxChat","document","getElementById","isScroll","height","scrollHeight","scrollTop","length","renderMessages","map","message","index","from","id","fbPageId","fbUserId","type","renderButton","marginBottom","full_picture","loadMore","res","data","storeId","_id","accessToken","conversationId","fbObjectId","reverse","e"],"mappings":"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","sourcesContent":["import { Button, Space } from 'antd';\nimport { isArray, pick } from 'lodash';\nimport React, { FC, ReactElement, useEffect, useLayoutEffect, useRef } from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadComments, loadMessages } from '../../../api/conversation-api';\nimport { Loading } from '../../../components';\nimport { IAuthState } from '../../../reducers/authState/authReducer';\nimport { setNewMessage } from '../../../reducers/fanpageState/fanpageAction';\nimport { IConversation, IFacebookState } from '../../../reducers/fanpageState/fanpageReducer';\nimport { IStoreState } from '../../../reducers/storeState/storeReducer';\nimport { Comment, Message, useConversationDetail } from './context';\nimport MessageBubble from './message-bubble';\n\ntype Item = Comment | Message;\n\ninterface Props {\n    contentPost: any;\n    loadingContent: boolean;\n    updateContentPost: () => void;\n    filterConversation: () => void;\n}\n\nconst ConversationDetailList: FC<Props> = ({\n    contentPost,\n    loadingContent,\n    updateContentPost,\n    filterConversation,\n}): ReactElement => {\n    const conversation: IConversation = useSelector(\n        ({ fanpage }: { fanpage: IFacebookState }) => fanpage.conversation\n    );\n    const newMessage: any = useSelector(\n        ({ fanpage }: { fanpage: IFacebookState }) => fanpage.newMessage\n    );\n    const isUpdateMessage: boolean = useSelector(\n        ({ fanpage }: { fanpage: IFacebookState }) => fanpage.isUpdateMessage\n    );\n\n    const dispatch = useDispatch();\n\n    const token: any = useSelector(({ auth }: { auth: IAuthState }) => auth.token);\n    const store = useSelector(({ store }: { store: IStoreState }) => store.store);\n\n    const {\n        isNewMessage,\n        setIsNewMessage,\n        next,\n        loading,\n        messages,\n        updateMessage,\n        loadMoreMessages,\n    } = useConversationDetail();\n\n    const messagesEndRef = useRef<any>(null);\n\n    const scrollToBottom = () => {\n        if (!loading) {\n            messagesEndRef.current.scrollIntoView(false);\n        }\n    };\n\n    useLayoutEffect(() => {\n        if (isNewMessage) {\n            scrollToBottom();\n            setIsNewMessage(false);\n        }\n    }, [isNewMessage]);\n\n    useEffect(() => {\n        if (newMessage && isUpdateMessage) {\n            updateMessage(newMessage);\n            dispatch(setNewMessage(null));\n        }\n    }, [newMessage, isNewMessage]);\n\n    const getInnerHeight = (elm: HTMLElement) => {\n        if (elm) {\n            const computed = getComputedStyle(elm);\n            const padding = parseInt(computed.paddingTop) + parseInt(computed.paddingBottom);\n\n            return elm.clientHeight - padding;\n        }\n\n        return 0;\n    };\n\n    useLayoutEffect(() => {\n        const elmBoxChat = document.getElementById('list-chat');\n        let isScroll = false;\n\n        if (elmBoxChat) {\n            const height = getInnerHeight(elmBoxChat);\n            isScroll = elmBoxChat.scrollHeight - (elmBoxChat.scrollTop + height) < 500;\n        }\n\n        if ((isArray(messages) && messages.length <= 20) || isScroll) {\n            scrollToBottom();\n        }\n    }, [messages]);\n\n    const renderMessages = () => {\n        if (loading) return <Loading full />;\n        return messages.map((message: any, index: number) => {\n            return (\n                <MessageBubble\n                    me={message.from.id === conversation.fbPageId}\n                    userId={conversation.fbUserId}\n                    type={conversation.type}\n                    message={message}\n                    key={message.id + index}\n                    isShowAvatarHere={\n                        index === 0 || message.from.id !== messages[index - 1].from.id\n                    }\n                />\n            );\n        });\n    };\n\n    const renderButton = () => {\n        if (loading) return;\n\n        return (\n            conversation.type === 2 && (\n                <div style={{ marginBottom: 30 }}>\n                    <Space size={10} direction='vertical'>\n                        <div className='post-content'>\n                            {contentPost.full_picture && (\n                                <div\n                                    className={\n                                        contentPost.message ? 'img-post has-content' : 'img-post'\n                                    }\n                                >\n                                    <img src={contentPost.full_picture} alt='' />\n                                </div>\n                            )}\n\n                            {contentPost.message && (\n                                <div className='text'>\n                                    <div style={{ padding: '10px 15px' }}>\n                                        {contentPost.message}\n                                    </div>\n                                </div>\n                            )}\n                        </div>\n                        <div>\n                            {/* <Button\n                            type=\"primary\"\n                            size=\"small\"\n                            loading={loadingContent}\n                            onClick={() => updateContentPost()}\n                        >\n                            Cập nhật lại nội dung bài viết\n                        </Button>\n                        &nbsp; */}\n                            <Button onClick={() => filterConversation()}>\n                                Lọc bình luận của bài viết này\n                            </Button>\n                        </div>\n                    </Space>\n                </div>\n            )\n        );\n    };\n\n    const loadMore = async () => {\n        try {\n            let res: any = { data: [] };\n            if (conversation.type === 1 && !loading && next) {\n                res = await loadMessages({\n                    ...pick(conversation, ['fbObjectId', 'fbPageId']),\n                    storeId: store._id,\n                    token: token.accessToken,\n                    next,\n                });\n                if (res && isArray(res.data)) {\n                    loadMoreMessages(res.data, res.next);\n                }\n            } else if (conversation.type === 2 && !loading && next) {\n                let conversationId = conversation.fbObjectId;\n                res = await loadComments({\n                    conversationId,\n                    ...pick(conversation, ['fbPageId']),\n                    storeId: store._id,\n                    token: token.accessToken,\n                    next,\n                });\n                if (res && isArray(res.data)) {\n                    loadMoreMessages(res.data.reverse(), res.next);\n                }\n            }\n        } catch (e) {}\n    };\n\n    return (\n        <div id='list-chat' className='conversation-detail-list'>\n            {renderButton()}\n\n            <InfiniteScroll\n                pageStart={0}\n                loadMore={loadMore}\n                hasMore={!!next}\n                loader={<Loading />}\n                useWindow={false}\n                initialLoad={false}\n                threshold={20}\n                isReverse\n            >\n                {renderMessages()}\n            </InfiniteScroll>\n            {/* {renderMessagesSending()} */}\n            <div ref={messagesEndRef} />\n        </div>\n    );\n};\n\nexport default ConversationDetailList;\n"]},"metadata":{},"sourceType":"module"}