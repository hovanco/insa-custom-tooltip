{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport authApi from '../api/auth-api';\nimport { getToken } from '../api/token';\nimport { getUserAction, logout } from '../reducers/authState/authAction';\nexport function useProgressAuth() {\n  _s();\n\n  const dispatch = useDispatch();\n  const isAuth = useSelector(({\n    auth\n  }) => auth.isAuth);\n  const loading = useSelector(({\n    auth\n  }) => auth.loading);\n  const [progress, setProgress] = useState(true);\n  useEffect(() => {\n    async function processAuth() {\n      try {\n        if (window.location.pathname === '/save-token') {\n          return;\n        }\n\n        const refreshToken = getToken('refreshToken');\n\n        if (!refreshToken) {\n          dispatch(logout());\n          return;\n        }\n\n        const response = await authApi.existingRefreshToken(refreshToken);\n\n        if (!response.existingRefreshToken) {\n          dispatch(logout(false));\n          return;\n        }\n\n        dispatch(getUserAction());\n      } catch (error) {\n        dispatch(logout(false));\n      } finally {\n        setProgress(false);\n      }\n    }\n\n    if (isAuth) {\n      processAuth();\n    } else {\n      setProgress(false);\n    }\n  }, []);\n  return useMemo(() => ({\n    loading,\n    isAuth,\n    progress\n  }), [loading, isAuth, progress]);\n}\n\n_s(useProgressAuth, \"6DjxTFcjsklKUPIcY3qts1vSc0U=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/app-router/use-progress-auth.ts"],"names":["useEffect","useMemo","useState","useDispatch","useSelector","authApi","getToken","getUserAction","logout","useProgressAuth","dispatch","isAuth","auth","loading","progress","setProgress","processAuth","window","location","pathname","refreshToken","response","existingRefreshToken","error"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,aAAT,EAAwBC,MAAxB,QAAsC,kCAAtC;AAOA,OAAO,SAASC,eAAT,GAA2B;AAAA;;AAC9B,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAMQ,MAAM,GAAGP,WAAW,CAAC,CAAC;AAAEQ,IAAAA;AAAF,GAAD,KAAyBA,IAAI,CAACD,MAA/B,CAA1B;AACA,QAAME,OAAO,GAAGT,WAAW,CAAC,CAAC;AAAEQ,IAAAA;AAAF,GAAD,KAAyBA,IAAI,CAACC,OAA/B,CAA3B;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAU,IAAV,CAAxC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAegB,WAAf,GAA6B;AACzB,UAAI;AACA,YAAIC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,KAA6B,aAAjC,EAAgD;AAC5C;AACH;;AAED,cAAMC,YAAY,GAAGd,QAAQ,CAAC,cAAD,CAA7B;;AAEA,YAAI,CAACc,YAAL,EAAmB;AACfV,UAAAA,QAAQ,CAACF,MAAM,EAAP,CAAR;AACA;AACH;;AAED,cAAMa,QAAQ,GAAG,MAAMhB,OAAO,CAACiB,oBAAR,CAA6BF,YAA7B,CAAvB;;AAEA,YAAI,CAACC,QAAQ,CAACC,oBAAd,EAAoC;AAChCZ,UAAAA,QAAQ,CAACF,MAAM,CAAC,KAAD,CAAP,CAAR;AACA;AACH;;AAEDE,QAAAA,QAAQ,CAACH,aAAa,EAAd,CAAR;AACH,OApBD,CAoBE,OAAOgB,KAAP,EAAc;AACZb,QAAAA,QAAQ,CAACF,MAAM,CAAC,KAAD,CAAP,CAAR;AACH,OAtBD,SAsBU;AACNO,QAAAA,WAAW,CAAC,KAAD,CAAX;AACH;AACJ;;AAED,QAAIJ,MAAJ,EAAY;AACRK,MAAAA,WAAW;AACd,KAFD,MAEO;AACHD,MAAAA,WAAW,CAAC,KAAD,CAAX;AACH;AACJ,GAlCQ,EAkCN,EAlCM,CAAT;AAoCA,SAAOd,OAAO,CAAC,OAAO;AAAEY,IAAAA,OAAF;AAAWF,IAAAA,MAAX;AAAmBG,IAAAA;AAAnB,GAAP,CAAD,EAAwC,CAACD,OAAD,EAAUF,MAAV,EAAkBG,QAAlB,CAAxC,CAAd;AACH;;GA3CeL,e;UACKN,W,EACFC,W,EACCA,W","sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport authApi from '../api/auth-api';\nimport { getToken } from '../api/token';\nimport { getUserAction, logout } from '../reducers/authState/authAction';\nimport { IAuthState } from '../reducers/authState/authReducer';\n\nexport interface AuthState {\n    auth: IAuthState;\n}\n\nexport function useProgressAuth() {\n    const dispatch = useDispatch();\n    const isAuth = useSelector(({ auth }: AuthState) => auth.isAuth);\n    const loading = useSelector(({ auth }: AuthState) => auth.loading);\n    const [progress, setProgress] = useState<boolean>(true);\n\n    useEffect(() => {\n        async function processAuth() {\n            try {\n                if (window.location.pathname === '/save-token') {\n                    return;\n                }\n\n                const refreshToken = getToken('refreshToken');\n\n                if (!refreshToken) {\n                    dispatch(logout());\n                    return;\n                }\n\n                const response = await authApi.existingRefreshToken(refreshToken);\n\n                if (!response.existingRefreshToken) {\n                    dispatch(logout(false));\n                    return;\n                }\n\n                dispatch(getUserAction());\n            } catch (error) {\n                dispatch(logout(false));\n            } finally {\n                setProgress(false);\n            }\n        }\n\n        if (isAuth) {\n            processAuth();\n        } else {\n            setProgress(false);\n        }\n    }, []);\n\n    return useMemo(() => ({ loading, isAuth, progress }), [loading, isAuth, progress]);\n}\n"]},"metadata":{},"sourceType":"module"}