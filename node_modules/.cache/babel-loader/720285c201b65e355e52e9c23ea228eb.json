{"ast":null,"code":"import { message } from 'antd';\nimport types from './orderTypes';\nimport { fetchOrdersRequest, updateStatusOrdersRequest, removeOrdersRequest } from '../../api/order-api';\nexport function setOrders(data) {\n  return {\n    type: types.FETCH_ORDERS_SUCCESS,\n    payload: data\n  };\n}\nexport function changeOrderType(type) {\n  return {\n    type: types.CHANGE_ORDER_TYPE,\n    payload: type\n  };\n}\nexport const fetchOrders = query => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: types.FETCH_ORDERS_LOADING\n    });\n    const {\n      auth,\n      store\n    } = getState();\n    const {\n      token\n    } = auth;\n    const storeId = store.store._id;\n    const res = await fetchOrdersRequest({\n      token: token.accessToken,\n      storeId,\n      query\n    });\n    dispatch(setOrders(res));\n  } catch (error) {\n    message.error('Lỗi tải đơn hàng');\n    dispatch({\n      type: types.FETCH_ORDERS_FAILED\n    });\n  }\n};\nexport const updateStatusOrders = (orderId, status) => async (dispatch, getState) => {\n  try {\n    const {\n      auth,\n      store\n    } = getState();\n    const {\n      token\n    } = auth;\n    const storeId = store.store._id;\n    const res = await updateStatusOrdersRequest({\n      token: token.accessToken,\n      storeId,\n      orderId,\n      data: {\n        status\n      }\n    });\n\n    if (res) {\n      dispatch({\n        type: types.UPDATE_STATUS_ORDER_SUCCESS,\n        payload: res\n      });\n      return message.success('Chỉnh sửa trạng thái thành công');\n    }\n\n    message.error('Lỗi chỉnh sửa trạng thái');\n  } catch (error) {\n    message.error('Lỗi chỉnh sửa trạng thái');\n  }\n};\nexport const removeOrders = orderId => async (dispatch, getState) => {\n  try {\n    const {\n      auth,\n      store\n    } = getState();\n    const {\n      token\n    } = auth;\n    const storeId = store.store._id;\n    const res = await removeOrdersRequest({\n      token: token.accessToken,\n      storeId,\n      orderId\n    });\n    dispatch({\n      type: types.DELETE_ORDER_SUCCESS,\n      payload: orderId\n    });\n    message.success('Xoá đơn hàng thành công');\n  } catch (error) {\n    message.error('Lỗi xoá đơn hàng');\n  }\n};","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/reducers/orderState/orderAction.ts"],"names":["message","types","fetchOrdersRequest","updateStatusOrdersRequest","removeOrdersRequest","setOrders","data","type","FETCH_ORDERS_SUCCESS","payload","changeOrderType","CHANGE_ORDER_TYPE","fetchOrders","query","dispatch","getState","FETCH_ORDERS_LOADING","auth","store","token","storeId","_id","res","accessToken","error","FETCH_ORDERS_FAILED","updateStatusOrders","orderId","status","UPDATE_STATUS_ORDER_SUCCESS","success","removeOrders","DELETE_ORDER_SUCCESS"],"mappings":"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","sourcesContent":["import { Dispatch } from 'redux';\nimport { message } from 'antd';\n\nimport { IAction } from '../imagesState/interfaces';\nimport types from './orderTypes';\n\nimport {\n    fetchOrdersRequest,\n    updateStatusOrdersRequest,\n    removeOrdersRequest,\n} from '../../api/order-api';\n\nexport function setOrders(data: any): IAction {\n    return {\n        type: types.FETCH_ORDERS_SUCCESS,\n        payload: data,\n    };\n}\n\nexport function changeOrderType(type: string): IAction {\n    return {\n        type: types.CHANGE_ORDER_TYPE,\n        payload: type,\n    };\n}\n\nexport const fetchOrders = (query: { status?: string; page: number; limit: number }) => async (\n    dispatch: Dispatch,\n    getState: () => any\n) => {\n    try {\n        dispatch({\n            type: types.FETCH_ORDERS_LOADING,\n        });\n\n        const { auth, store } = getState();\n        const { token } = auth;\n        const storeId = store.store._id;\n\n        const res = await fetchOrdersRequest({\n            token: token.accessToken,\n            storeId,\n            query,\n        });\n\n        dispatch(setOrders(res));\n    } catch (error) {\n        message.error('Lỗi tải đơn hàng');\n        dispatch({ type: types.FETCH_ORDERS_FAILED });\n    }\n};\n\nexport const updateStatusOrders = (orderId: string, status: string) => async (\n    dispatch: Dispatch,\n    getState: () => any\n) => {\n    try {\n        const { auth, store } = getState();\n        const { token } = auth;\n        const storeId = store.store._id;\n\n        const res = await updateStatusOrdersRequest({\n            token: token.accessToken,\n            storeId,\n            orderId,\n            data: { status },\n        });\n\n        if (res) {\n            dispatch({\n                type: types.UPDATE_STATUS_ORDER_SUCCESS,\n                payload: res,\n            });\n            return message.success('Chỉnh sửa trạng thái thành công');\n        }\n        message.error('Lỗi chỉnh sửa trạng thái');\n    } catch (error) {\n        message.error('Lỗi chỉnh sửa trạng thái');\n    }\n};\n\nexport const removeOrders = (orderId: string) => async (\n    dispatch: Dispatch,\n    getState: () => any\n) => {\n    try {\n        const { auth, store } = getState();\n        const { token } = auth;\n        const storeId = store.store._id;\n\n        const res = await removeOrdersRequest({\n            token: token.accessToken,\n            storeId,\n            orderId,\n        });\n\n        dispatch({\n            type: types.DELETE_ORDER_SUCCESS,\n            payload: orderId,\n        });\n        message.success('Xoá đơn hàng thành công');\n    } catch (error) {\n        message.error('Lỗi xoá đơn hàng');\n    }\n};\n"]},"metadata":{},"sourceType":"module"}