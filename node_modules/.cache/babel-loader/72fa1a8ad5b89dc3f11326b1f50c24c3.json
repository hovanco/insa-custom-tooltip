{"ast":null,"code":"import storeApi from '../../api/store-api';\nimport { ESaleChannel } from '../../collections/sale-channel';\nimport types from './storeTypes';\nexport function loadingStore() {\n  return {\n    type: types.LOADING_STORE\n  };\n}\nexport function loadStoreFaild() {\n  return {\n    type: types.LOAD_STORE_FAILED\n  };\n}\nexport function loadStoreSuccess(store) {\n  return {\n    type: types.LOAD_STORE_SUCCESS,\n    payload: store\n  };\n}\nexport function addStore(store) {\n  return {\n    type: types.ADD_STORE,\n    payload: store\n  };\n}\nexport function updateStore(store) {\n  return {\n    type: types.UPDATE_STORE,\n    payload: store\n  };\n}\nexport const loadStore = () => async (dispatch, getState) => {\n  dispatch(loadingStore());\n  const {\n    auth\n  } = getState();\n  const {\n    token\n  } = auth;\n\n  if (token) {\n    try {\n      let response = await storeApi.loadStore(token.accessToken);\n\n      if (!(response.saleChannels || []).includes(ESaleChannel.FACEBOOK)) {\n        let newSaleChannels = response.saleChannels ? [...response.saleChannels, ESaleChannel.FACEBOOK] : [ESaleChannel.FACEBOOK];\n        response.saleChannels = newSaleChannels;\n        await storeApi.editStore({\n          token,\n          storeId: response._id,\n          data: {\n            saleChannels: newSaleChannels\n          }\n        });\n      }\n\n      return dispatch(loadStoreSuccess(response));\n    } catch (error) {\n      return dispatch(loadStoreFaild());\n    }\n  }\n\n  return dispatch(loadStoreFaild());\n};\nexport function changePageActive(page) {\n  return {\n    type: types.CHANGE_PAGE,\n    payload: page\n  };\n}","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/FacebookClient/src/reducers/storeState/storeAction.ts"],"names":["storeApi","ESaleChannel","types","loadingStore","type","LOADING_STORE","loadStoreFaild","LOAD_STORE_FAILED","loadStoreSuccess","store","LOAD_STORE_SUCCESS","payload","addStore","ADD_STORE","updateStore","UPDATE_STORE","loadStore","dispatch","getState","auth","token","response","accessToken","saleChannels","includes","FACEBOOK","newSaleChannels","editStore","storeId","_id","data","error","changePageActive","page","CHANGE_PAGE"],"mappings":"AAEA,OAAOA,QAAP,MAAqB,qBAArB;AACA,SAASC,YAAT,QAA6B,gCAA7B;AAEA,OAAOC,KAAP,MAAkB,cAAlB;AAEA,OAAO,SAASC,YAAT,GAAiC;AACpC,SAAO;AAAEC,IAAAA,IAAI,EAAEF,KAAK,CAACG;AAAd,GAAP;AACH;AAED,OAAO,SAASC,cAAT,GAAmC;AACtC,SAAO;AAAEF,IAAAA,IAAI,EAAEF,KAAK,CAACK;AAAd,GAAP;AACH;AAED,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAAiD;AACpD,SAAO;AAAEL,IAAAA,IAAI,EAAEF,KAAK,CAACQ,kBAAd;AAAkCC,IAAAA,OAAO,EAAEF;AAA3C,GAAP;AACH;AAED,OAAO,SAASG,QAAT,CAAkBH,KAAlB,EAAuC;AAC1C,SAAO;AACHL,IAAAA,IAAI,EAAEF,KAAK,CAACW,SADT;AAEHF,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH;AAED,OAAO,SAASK,WAAT,CAAqBL,KAArB,EAA0C;AAC7C,SAAO;AACHL,IAAAA,IAAI,EAAEF,KAAK,CAACa,YADT;AAEHJ,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH;AAED,OAAO,MAAMO,SAAS,GAAG,MAAM,OAAOC,QAAP,EAA2BC,QAA3B,KAAiE;AAC5FD,EAAAA,QAAQ,CAACd,YAAY,EAAb,CAAR;AAEA,QAAM;AAAEgB,IAAAA;AAAF,MAAWD,QAAQ,EAAzB;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAYD,IAAlB;;AAEA,MAAIC,KAAJ,EAAW;AACP,QAAI;AACA,UAAIC,QAAQ,GAAG,MAAMrB,QAAQ,CAACgB,SAAT,CAAmBI,KAAK,CAACE,WAAzB,CAArB;;AAEA,UAAI,CAAC,CAACD,QAAQ,CAACE,YAAT,IAAyB,EAA1B,EAA8BC,QAA9B,CAAuCvB,YAAY,CAACwB,QAApD,CAAL,EAAoE;AAChE,YAAIC,eAAe,GAAGL,QAAQ,CAACE,YAAT,GAChB,CAAC,GAAGF,QAAQ,CAACE,YAAb,EAA2BtB,YAAY,CAACwB,QAAxC,CADgB,GAEhB,CAACxB,YAAY,CAACwB,QAAd,CAFN;AAIAJ,QAAAA,QAAQ,CAACE,YAAT,GAAwBG,eAAxB;AACA,cAAM1B,QAAQ,CAAC2B,SAAT,CAAmB;AACrBP,UAAAA,KADqB;AAErBQ,UAAAA,OAAO,EAAEP,QAAQ,CAACQ,GAFG;AAGrBC,UAAAA,IAAI,EAAE;AACFP,YAAAA,YAAY,EAAEG;AADZ;AAHe,SAAnB,CAAN;AAOH;;AAED,aAAOT,QAAQ,CAACT,gBAAgB,CAACa,QAAD,CAAjB,CAAf;AACH,KAnBD,CAmBE,OAAOU,KAAP,EAAc;AACZ,aAAOd,QAAQ,CAACX,cAAc,EAAf,CAAf;AACH;AACJ;;AAED,SAAOW,QAAQ,CAACX,cAAc,EAAf,CAAf;AACH,CAhCM;AAkCP,OAAO,SAAS0B,gBAAT,CAA0BC,IAA1B,EAAqC;AACxC,SAAO;AACH7B,IAAAA,IAAI,EAAEF,KAAK,CAACgC,WADT;AAEHvB,IAAAA,OAAO,EAAEsB;AAFN,GAAP;AAIH","sourcesContent":["import { Dispatch } from 'redux';\n\nimport storeApi from '../../api/store-api';\nimport { ESaleChannel } from '../../collections/sale-channel';\nimport { IAction, Store } from './storeReducer';\nimport types from './storeTypes';\n\nexport function loadingStore(): IAction {\n    return { type: types.LOADING_STORE };\n}\n\nexport function loadStoreFaild(): IAction {\n    return { type: types.LOAD_STORE_FAILED };\n}\n\nexport function loadStoreSuccess(store: Store): IAction {\n    return { type: types.LOAD_STORE_SUCCESS, payload: store };\n}\n\nexport function addStore(store: any): IAction {\n    return {\n        type: types.ADD_STORE,\n        payload: store,\n    };\n}\n\nexport function updateStore(store: any): IAction {\n    return {\n        type: types.UPDATE_STORE,\n        payload: store,\n    };\n}\n\nexport const loadStore = () => async (dispatch: Dispatch, getState: () => any): Promise<any> => {\n    dispatch(loadingStore());\n\n    const { auth } = getState();\n    const { token } = auth;\n\n    if (token) {\n        try {\n            let response = await storeApi.loadStore(token.accessToken);\n\n            if (!(response.saleChannels || []).includes(ESaleChannel.FACEBOOK)) {\n                let newSaleChannels = response.saleChannels\n                    ? [...response.saleChannels, ESaleChannel.FACEBOOK]\n                    : [ESaleChannel.FACEBOOK];\n    \n                response.saleChannels = newSaleChannels;\n                await storeApi.editStore({\n                    token,\n                    storeId: response._id as string,\n                    data: {\n                        saleChannels: newSaleChannels,\n                    },\n                });\n            }\n\n            return dispatch(loadStoreSuccess(response));\n        } catch (error) {\n            return dispatch(loadStoreFaild());\n        }\n    }\n\n    return dispatch(loadStoreFaild());\n};\n\nexport function changePageActive(page: any) {\n    return {\n        type: types.CHANGE_PAGE,\n        payload: page,\n    };\n}\n"]},"metadata":{},"sourceType":"module"}